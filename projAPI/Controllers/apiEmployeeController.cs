using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using projAPI.Model;
using projContext;
using projContext.DB;
using Microsoft.Extensions.Options;
using System.Net.Http;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using System.Text;
using System.Collections;
using System.Globalization;
using System.Text.RegularExpressions;
using projAPI.Classes;
using Microsoft.Extensions.Configuration;
using System.ComponentModel;
using System.Reflection;
using static projContext.CommonClass;
using MySql.Data.MySqlClient;
using System.Data;
//using static projAPI.Controllers.apiMastersController;
using OfficeOpenXml;

namespace projAPI.Controllers
{
#if false

    [Route("api/[controller]")]
    [ApiController]
    public class apiEmployeeController : ControllerBase
    {
        private readonly IHttpContextAccessor _AC;
        private readonly Context _context;
        private IHostingEnvironment _hostingEnvironment;
        private readonly IOptions<AppSettings> _appSettings;
        private readonly IConfiguration _config;
        private readonly clsCurrentUser _clsCurrentUser;
        private readonly clsEmployeeDetail _clEmployeeDetail;
        DateTime FromDate;


        public apiEmployeeController(Context context, IConfiguration config, IHostingEnvironment environment, IOptions<AppSettings> appSettings, IHttpContextAccessor AC, clsCurrentUser _clsCurrentUser, clsEmployeeDetail _clEmployeeDetail)
        {
            _context = context;
            _config = config;
            _hostingEnvironment = environment;
            _appSettings = appSettings;
            _AC = AC;
            this._clsCurrentUser = _clsCurrentUser;
            this._clEmployeeDetail = _clEmployeeDetail;
        }

        // GET: api/apiEmployee
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.OfficialSection))]
        public IEnumerable<tbl_emp_officaial_sec> Gettbl_emp_officaial_sec()
        {
            return _context.tbl_emp_officaial_sec;
        }

        // GET: api/apiEmployee/5
        [HttpGet("{id}")]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> Gettbl_emp_officaial_sec([FromRoute] int id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            if (id == 0)
            {
                return Ok(new tbl_emp_officaial_sec());
            }
            var data = _clEmployeeDetail.EmpPermissionExists(new int[] { id });
            if (!data.Key)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                return Ok(objresponse);
            }

            // var companyid = _AC.HttpContext.User.Claims.Where(p => p.Type == "companyid").FirstOrDefault().Value;

            tbl_emp_officaial_sec tbl_emp_officaial = _context.tbl_emp_officaial_sec.Where(x => x.is_deleted == 0 && x.employee_id == id).FirstOrDefault();



            //if (tbl_emp_officaial == null)
            //{
            //    return NotFound();
            //}

            return Ok(tbl_emp_officaial);
        }

        // Post: api/apiEmployee/5
        [HttpPost("{id}")]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.OfficialSection))]
        public async Task<IActionResult> Puttbl_emp_officaial_sec([FromRoute] int id, [FromBody] tbl_emp_officaial_sec tbl_emp_officaial_sec)
        {

            ResponseMsg objresponse = new ResponseMsg();
            if (!ModelState.IsValid)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Something went wrong,Please check and try again later";
                return Ok(objresponse);
                //return BadRequest(ModelState);
            }

            if (!_clsCurrentUser.DownlineEmpId.Any(p => p == tbl_emp_officaial_sec.employee_id))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Unauthorize Access...!";
                return Ok(objresponse);
            }

            if (id != tbl_emp_officaial_sec.emp_official_section_id)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Invalid Request";
                //return BadRequest();
                return Ok(objresponse);
            }

            _context.Entry(tbl_emp_officaial_sec).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!tbl_emp_officaial_secExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/apiEmployee
        [Route("Posttbl_emp_officaial_sec")]
        [HttpPost]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.OfficialSection))]
        public async Task<IActionResult> Posttbl_emp_officaial_sec([FromBody] tbl_emp_officaial_sec tbl_emp_officaial_sec)
        {

            ResponseMsg objResult = new ResponseMsg();

            try
            {

                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { tbl_emp_officaial_sec.employee_id ?? 0 });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }

                //check if already pending request is exists
                var Exist_pending_req = _context.tbl_emp_officaial_sec.Where(a => a.employee_id == tbl_emp_officaial_sec.employee_id && a.is_deleted == 2).FirstOrDefault();
                if (Exist_pending_req != null)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "There is aleady a pending request for approval!";
                    return Ok(objResult);
                }


                if (_context.tbl_emp_officaial_sec.Where(p => p.employee_id != tbl_emp_officaial_sec.employee_id && p.is_deleted == 0 && p.card_number == tbl_emp_officaial_sec.card_number && _clEmployeeDetail.EmpIDs.Contains(p.employee_id ?? 0)).Count() > 0)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Card number already Exists");
                    return Ok(objResult);
                }


                byte[] imageBytes = null;
                if (!string.IsNullOrEmpty(tbl_emp_officaial_sec.employee_photo_path))
                {
                    string[] replaceThese = { "data:image/png;base64,", "data:image/jpeg;base64,", "data:image/jpg;base64," };

                    foreach (var rel in replaceThese)
                    {
                        tbl_emp_officaial_sec.employee_photo_path = tbl_emp_officaial_sec.employee_photo_path.Replace(rel, string.Empty);
                    }

                    imageBytes = System.Convert.FromBase64String(tbl_emp_officaial_sec.employee_photo_path);
                }
                using (var trans = _context.Database.BeginTransaction())
                {
                    try
                    {
                        _clEmployeeDetail.Save_tbl_emp_officaial_sec(tbl_emp_officaial_sec, imageBytes, _hostingEnvironment.WebRootPath);
                        trans.Commit();
                    }
                    catch (Exception ex)
                    {
                        trans.Rollback();
                        throw ex;
                    }
                }




                //#region Save Data In Employee Officaial Sec
                //// tbl_emp_officaial_sec
                //tbl_emp_officaial_sec emp_officaial_sec = new tbl_emp_officaial_sec();


                ////Create new obj of tbl_shift_details table for log

                //tbl_emp_officaial_sec tbl_emp_officaial = (from a in _context.tbl_emp_officaial_sec select a).Where(x => x.employee_id == tbl_emp_officaial_sec.employee_id).OrderByDescending(x => x.emp_official_section_id).FirstOrDefault();

                //if (tbl_emp_officaial != null)
                //{
                //    tbl_emp_officaial.is_deleted = 1;

                //    _context.tbl_emp_officaial_sec.Attach(tbl_emp_officaial);
                //    _context.Entry(tbl_emp_officaial).State = EntityState.Modified;
                //    await _context.SaveChangesAsync();

                //}


                //// Image Upload
                //// Image Upload
                //if (tbl_emp_officaial.employee_photo_path != tbl_emp_officaial_sec.employee_photo_path)
                //{
                //    string[] replaceThese = { "data:image/png;base64,", "data:image/jpeg;base64,", "data:image/jpg;base64," };
                //    string img_data = tbl_emp_officaial_sec.employee_photo_path;


                //    if (img_data != null && img_data != "")
                //    {
                //        foreach (string curr in replaceThese)
                //        {
                //            img_data = img_data.Replace(curr, string.Empty);
                //        }

                //        byte[] imageBytes = System.Convert.FromBase64String(img_data);
                //        string imageName = tbl_emp_officaial_sec.employee_photo_path + ".jpg";

                //        var allowedExtensions = new[] { ".Jpg", ".png", ".jpg", "jpeg" };

                //        var ext = ".jpg"; //getting the extension
                //        if (allowedExtensions.Contains(ext.ToLower())) //check what type of extension  
                //        {
                //            string name = tbl_emp_officaial_sec.employee_first_name + "_" + (tbl_emp_officaial_sec.employee_id).ToString();//getting file name without extension  
                //            string MyFileName = name + ext;

                //            var webRoot = _hostingEnvironment.WebRootPath;

                //            if (!Directory.Exists(webRoot + "/EmployeeImage/" + tbl_emp_officaial_sec.employee_first_name + "/"))
                //            {
                //                Directory.CreateDirectory(webRoot + "/EmployeeImage/" + tbl_emp_officaial_sec.employee_first_name + "/");
                //            }

                //            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeImage/" + tbl_emp_officaial_sec.employee_first_name + "/", MyFileName);
                //            System.IO.File.WriteAllBytes(path, imageBytes);//save image file
                //                                                           //update file name
                //            emp_officaial_sec.employee_photo_path = "/EmployeeImage/" + tbl_emp_officaial_sec.employee_first_name + "/" + MyFileName;
                //        }
                //    }

                //}
                //else
                //{
                //    emp_officaial_sec.employee_photo_path = tbl_emp_officaial_sec.employee_photo_path;
                //}

                //emp_officaial_sec.employee_id = tbl_emp_officaial_sec.employee_id;

                //if (tbl_emp_officaial_sec.location_id != 0)
                //{
                //    emp_officaial_sec.location_id = tbl_emp_officaial_sec.location_id;
                //}

                //if (tbl_emp_officaial_sec.department_id != 0)
                //{
                //    emp_officaial_sec.department_id = tbl_emp_officaial_sec.department_id;
                //}
                //if (tbl_emp_officaial_sec.sub_dept_id != 0)
                //{
                //    emp_officaial_sec.sub_dept_id = tbl_emp_officaial_sec.sub_dept_id;
                //}
                //emp_officaial_sec.gender = tbl_emp_officaial_sec.gender;
                //emp_officaial_sec.card_number = tbl_emp_officaial_sec.card_number;
                //emp_officaial_sec.salutation = tbl_emp_officaial_sec.salutation;
                //emp_officaial_sec.employee_first_name = tbl_emp_officaial_sec.employee_first_name;
                //emp_officaial_sec.employee_middle_name = tbl_emp_officaial_sec.employee_middle_name;
                //emp_officaial_sec.employee_last_name = tbl_emp_officaial_sec.employee_last_name;
                //emp_officaial_sec.group_joining_date = tbl_emp_officaial_sec.group_joining_date;
                //emp_officaial_sec.date_of_joining = tbl_emp_officaial_sec.date_of_joining;
                //emp_officaial_sec.department_date_of_joining = tbl_emp_officaial_sec.department_date_of_joining;
                //emp_officaial_sec.date_of_birth = tbl_emp_officaial_sec.date_of_birth;
                //emp_officaial_sec.religion_id = tbl_emp_officaial_sec.religion_id;
                //emp_officaial_sec.marital_status = tbl_emp_officaial_sec.marital_status;
                //emp_officaial_sec.hr_spoc = tbl_emp_officaial_sec.hr_spoc;
                //emp_officaial_sec.official_email_id = tbl_emp_officaial_sec.official_email_id;
                ////emp_officaial_sec.empmnt__id = tbl_emp_officaial_sec.current_employee_type;
                //emp_officaial_sec.is_ot_allowed = tbl_emp_officaial_sec.is_ot_allowed;
                //emp_officaial_sec.is_comb_off_allowed = tbl_emp_officaial_sec.is_comb_off_allowed;
                //emp_officaial_sec.mobile_punch_from_date = tbl_emp_officaial_sec.mobile_punch_from_date;
                //emp_officaial_sec.mobile_punch_to_date = tbl_emp_officaial_sec.mobile_punch_to_date;
                //emp_officaial_sec.last_working_date = Convert.ToDateTime("2500-12-31");
                //emp_officaial_sec.punch_type = tbl_emp_officaial_sec.punch_type;

                //if (tbl_emp_officaial_sec.current_employee_type != 0)
                //{
                //    emp_officaial_sec.current_employee_type = tbl_emp_officaial_sec.current_employee_type;
                //    // emp_officaial_sec.effective_empmnt_type_dt = tbl_emp_officaial_sec.effective_empmnt_type_dt;
                //}
                //emp_officaial_sec.is_deleted = tbl_emp_officaial_sec.is_deleted;
                //emp_officaial_sec.created_by = tbl_emp_officaial_sec.created_by;
                //emp_officaial_sec.created_date = DateTime.Now;//tbl_emp_officaial_sec.created_date;
                //emp_officaial_sec.last_modified_by = tbl_emp_officaial_sec.last_modified_by;
                //emp_officaial_sec.last_modified_date = Convert.ToDateTime("01-01-2000");//tbl_emp_officaial_sec.last_modified_date;
                //emp_officaial_sec.sub_location_id = tbl_emp_officaial_sec.sub_location_id;


                //if (tbl_emp_officaial_sec.is_applicable_for_all_comp == 0)
                //{
                //    emp_officaial_sec.is_applicable_for_all_comp = 0;
                //}
                //else
                //{
                //    emp_officaial_sec.is_applicable_for_all_comp = 1;

                //    tbl_employee_company_map tbl_emp_comp_map = new tbl_employee_company_map();

                //    //tbl_emp_comp_map.
                //}

                //emp_officaial_sec.remarks = tbl_emp_officaial_sec.remarks;
                //emp_officaial_sec.user_type = tbl_emp_officaial_sec.user_type;

                ////Save data in tbl_emp_officaial_sec

                //_context.tbl_emp_officaial_sec.Attach(emp_officaial_sec);
                //_context.Entry(emp_officaial_sec).State = EntityState.Added;
                //await _context.SaveChangesAsync();

                //#endregion

                //#region ** Start update in Employement Type master according to Joining Date**

                //var exist = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == emp_officaial_sec.employee_id && x.employment_type == emp_officaial_sec.current_employee_type).FirstOrDefault();
                //if (exist != null)
                //{
                //    exist.effective_date = emp_officaial_sec.date_of_joining;
                //    exist.last_modified_by = emp_officaial_sec.created_by;
                //    exist.last_modified_date = DateTime.Now;
                //}

                //_context.tbl_employment_type_master.Update(exist);
                //await _context.SaveChangesAsync();
                //#endregion


                objResult.StatusCode = 0;
                objResult.Message = "successfully submitted";
                return Ok(objResult);
            }
            catch (Exception ex)
            {
                objResult.Message = ex.Message.ToString();
                return Ok(objResult);
            }
        }
        [Route("EmployeeOfficial_changes/{employee_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Qualification))]
        public IActionResult EmployeeOfficial_changes([FromRoute] int employee_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                var data = _context.tbl_emp_officaial_sec.Where(x => x.employee_id == employee_id
                           && x.is_deleted == 2).OrderByDescending(x => x.emp_official_section_id).FirstOrDefault();


                return Ok(data);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }

        [Route("CreateEmployee")]
        [HttpPost]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.CreateEmployee))]
        public async Task<IActionResult> CreateEmployee([FromBody] tbl_user_master user_master)
        {
            ResponseMsg objResult = new ResponseMsg();
            EmployeeMaster objEmpMater = new EmployeeMaster();



            if (!_clsCurrentUser.CompanyId.Any(p => p == user_master.default_company_id))
            {
                objResult.StatusCode = 1;
                objResult.Message = "Invalid Company";
            }

            var is_transcommit = false;
            try
            {
                string url = Convert.ToString(_config["License_domain_url"]) + user_master.default_company_id + "/" + Convert.ToString(_config["Instance_ID"]);// sample url

                int total_no_of_employee = 1000;

                //using (HttpClient client = new HttpClient())
                //{
                //    total_no_of_employee = Convert.ToInt32(client.GetStringAsync(url).Result);
                //}

                //int get_exicest_emp = 1000;//_context.tbl_user_master.Where(a => a.default_company_id == user_master.default_company_id).Count();

                int total_exist_ = (from t1 in _context.tbl_employee_master
                                    join t2 in _context.tbl_employee_company_map on t1.employee_id equals t2.employee_id
                                    where t2.is_default && t2.company_id == user_master.default_company_id
                                    select t1.employee_id).Distinct().Count();


                if (total_exist_ >= total_no_of_employee)
                {
                    objResult.StatusCode = 3;
                    objResult.Message = "Employee limit exceed !!!";

                    return Ok(objResult);
                }
                else
                {

                    using (var trans = _context.Database.BeginTransaction())
                    {

                        try
                        {
                            var emp_ids = _context.tbl_employee_company_map.Where(x => _clsCurrentUser.CompanyId.Contains(x.company_id ?? 0) && x.is_deleted == 0).Select(p => p.employee_id).ToList();

                            var employee_code_exist = _context.tbl_employee_master.Where(a => emp_ids.Contains(a.employee_id) && a.emp_code == user_master.username && a.is_active == 1).Select(a => a.emp_code).FirstOrDefault();
                            if (employee_code_exist != null)
                            {
                                objResult.StatusCode = 3;
                                objResult.Message = "Employee Code Already Exists !!!";
                                return Ok(objResult);
                            }

    #region Get Employee Id And  Employee Code 
                            //Get data from company master
                            var data = (from a in _context.tbl_company_emp_setting.Where(x => x.is_active == 1 && x.company_id == Convert.ToInt32(user_master.default_company_id) && _clsCurrentUser.CompanyId.Contains(user_master.default_company_id))
                                        select new
                                        {
                                            a.prefix_for_employee_code,
                                            a.number_of_character_for_employee_code,
                                            a.current_range,
                                            a.from_range,
                                            a.to_range
                                        }).FirstOrDefault();

                            int emp_id = 1;
                            if (data != null)
                            {
                                emp_id = data.current_range + 1;
                            }
                            else
                            {
                                throw new Exception("Company Setting Not Defined");
                            }
                            string EmployeeCode = user_master.username;

    #endregion


    #region Save Data in Employee Master

                            tbl_employee_master employee_master_check = new tbl_employee_master();


                            // Check Company Name
                            if (employee_master_check.emp_code == EmployeeCode)
                            {
                                objResult.Message = "Employee Codee Already Exist...!";
                                objResult.StatusCode = 0;
                                return Ok(objResult);
                            }


                            // tbl_employee_master
                            tbl_employee_master employee_master = new tbl_employee_master();


                            employee_master.emp_code = EmployeeCode.ToUpper();


                            employee_master.is_active = 1;
                            employee_master.created_by = user_master.created_by;
                            employee_master.created_date = DateTime.Now;
                            employee_master.last_modified_by = 0; //user_master.last_modified_by;
                            employee_master.last_modified_date = Convert.ToDateTime("01-01-2000"); //DateTime.Now;


                            //Save data in tbl_employee_master
                            _context.tbl_employee_master.Add(employee_master);
                            await _context.SaveChangesAsync();

    #endregion

    #region update company setting table 

                            // tbl_company_emp_setting

                            tbl_company_emp_setting tbl_company_emp_setting = (from a in _context.tbl_company_emp_setting select a).Where(x => x.company_id == user_master.default_company_id).FirstOrDefault();
                            //Create new obj of tbl_shift_details table for log

                            if (tbl_company_emp_setting != null)
                            {
                                tbl_company_emp_setting.current_range = emp_id;
                                tbl_company_emp_setting.last_genrated = DateTime.Now;

                                _context.tbl_company_emp_setting.Attach(tbl_company_emp_setting);
                                _context.Entry(tbl_company_emp_setting).State = EntityState.Modified;
                                await _context.SaveChangesAsync();
                            }


    #endregion

                            var employee_id = employee_master.employee_id;


                            string encryemppwd = AESEncrytDecry.EncryptStringAES(EmployeeCode.Trim().ToLower());

    #region Save Data In User Master
                            tbl_user_master tbl_user_master = new tbl_user_master();
                            tbl_user_master.username = EmployeeCode.ToUpper();
                            tbl_user_master.password = encryemppwd;//EmployeeCode;
                            tbl_user_master.user_type = 1;
                            tbl_user_master.is_active = 1;
                            tbl_user_master.created_by = _clsCurrentUser.UserId;
                            tbl_user_master.created_date = DateTime.Now;
                            tbl_user_master.last_modified_by = 0; //user_master.last_modified_by;
                            tbl_user_master.last_modified_date = Convert.ToDateTime("01-01-2000"); //DateTime.Now;
                            tbl_user_master.default_company_id = user_master.default_company_id;
                            tbl_user_master.employee_id = employee_id;


                            //Save data in tbl_user_master
                            _context.tbl_user_master.Add(tbl_user_master);
                            await _context.SaveChangesAsync();

    #endregion

                            var user_id = tbl_user_master.user_id;

    #region Save Data in Employment Type Master

                            tbl_employment_type_master tbl_employment_type_master_ = new tbl_employment_type_master()
                            {

                                employee_id = employee_id,
                                employment_type = (byte)EmployeeType.Probation,
                                //duration_days = 0,
                                //duration_start_period = DateTime.Now,
                                //duration_end_period = new DateTime(2200, 1, 1),
                                //actual_duration_days = 0,
                                //actual_duration_start_period = DateTime.Now,
                                //actual_duration_end_period = new DateTime(2200, 1, 1),
                                is_deleted = 0,
                                created_by = user_master.created_by,
                                created_date = DateTime.Now,
                                last_modified_by = 0,
                                last_modified_date = DateTime.Now,
                                effective_date = DateTime.Now,
                            };
                            _context.tbl_employment_type_master.Add(tbl_employment_type_master_);
                            await _context.SaveChangesAsync();
    #endregion


    #region Save Data In Employee Officaial Sec
                            // tbl_emp_officaial_sec
                            tbl_emp_officaial_sec emp_officaial_sec = new tbl_emp_officaial_sec();
                            emp_officaial_sec.employee_id = employee_id;
                            emp_officaial_sec.card_number = "0";
                            emp_officaial_sec.gender = 0;
                            emp_officaial_sec.is_deleted = 0;
                            //emp_officaial_sec.user_type = (int)enmRoleMaster.Employee;
                            emp_officaial_sec.created_by = user_master.created_by;
                            emp_officaial_sec.created_date = DateTime.Now;
                            //Save data in tbl_user_master
                            _context.tbl_emp_officaial_sec.Add(emp_officaial_sec);
                            await _context.SaveChangesAsync();

    #endregion


    #region Save Data in emp company maping 
                            //tbl_employee_company_map
                            tbl_employee_company_map tbl_emp_comp_map = new tbl_employee_company_map();
                            tbl_emp_comp_map.employee_id = employee_id;
                            tbl_emp_comp_map.company_id = user_master.default_company_id;
                            tbl_emp_comp_map.is_deleted = 0;
                            tbl_emp_comp_map.created_by = user_master.created_by;
                            tbl_emp_comp_map.last_modified_by = 0; //user_master.last_modified_by;
                            tbl_emp_comp_map.created_date = DateTime.Now;
                            tbl_emp_comp_map.last_modified_date = Convert.ToDateTime("01-01-2000");// DateTime.Now;
                            tbl_emp_comp_map.is_default = true;

                            //Save data in tbl_employee_company_map
                            _context.tbl_employee_company_map.Add(tbl_emp_comp_map);
                            await _context.SaveChangesAsync();
    #endregion


    #region Save data in emp desig allocation
                            tbl_emp_desi_allocation emp_desi_alloc = new tbl_emp_desi_allocation();
                            emp_desi_alloc.employee_id = employee_id;
                            emp_desi_alloc.applicable_from_date = DateTime.Now;
                            emp_desi_alloc.applicable_to_date = Convert.ToDateTime("2500-01-01");

                            //Save data in tbl_emp_desi_allocation
                            _context.tbl_emp_desi_allocation.Add(emp_desi_alloc);
                            await _context.SaveChangesAsync();

    #endregion


    #region Save Data in emp_manager
                            tbl_emp_manager emp_manager = new tbl_emp_manager();
                            emp_manager.employee_id = employee_id;
                            emp_manager.applicable_from_date = DateTime.Now;
                            emp_manager.applicable_to_date = Convert.ToDateTime("2500-01-01");
                            emp_manager.is_deleted = 0;
                            //Save data in tbl_emp_managers
                            _context.tbl_emp_manager.Add(emp_manager);
                            await _context.SaveChangesAsync();
    #endregion


    #region Save Emp Grade Allocation
                            tbl_emp_grade_allocation emp_grade_allocation = new tbl_emp_grade_allocation();
                            emp_grade_allocation.employee_id = employee_id;
                            emp_grade_allocation.applicable_from_date = DateTime.Now;
                            emp_grade_allocation.applicable_to_date = Convert.ToDateTime("2500-01-01");


                            //Save data in tbl_emp_managers
                            _context.tbl_emp_grade_allocation.Add(emp_grade_allocation);
                            await _context.SaveChangesAsync();

    #endregion


    #region Save Emp Personal Sec
                            tbl_emp_personal_sec emp_personal_sec = new tbl_emp_personal_sec();
                            emp_personal_sec.employee_id = employee_id;
                            emp_personal_sec.blood_group = 0;
                            emp_personal_sec.permanent_pin_code = 0;
                            emp_personal_sec.permanent_city = 0;
                            emp_personal_sec.permanent_state = 0;
                            emp_personal_sec.permanent_city = 0;
                            emp_personal_sec.corresponding_pin_code = 0;
                            emp_personal_sec.corresponding_city = 0;
                            emp_personal_sec.corresponding_state = 0;
                            emp_personal_sec.corresponding_country = 0;
                            emp_personal_sec.is_emg_same_as_permanent = 0;
                            emp_personal_sec.emergency_contact_pin_code = 0;
                            emp_personal_sec.emergency_contact_city = 0;
                            emp_personal_sec.emergency_contact_state = 0;
                            emp_personal_sec.emergency_contact_country = 0;
                            emp_personal_sec.is_deleted = 2;
                            emp_personal_sec.created_by = user_master.created_by;
                            emp_personal_sec.last_modified_by = 0; //user_master.last_modified_by;
                            emp_personal_sec.created_date = DateTime.Now;
                            emp_personal_sec.last_modified_date = Convert.ToDateTime("01-01-2000"); //DateTime.Now;
                            //Save data in tbl_emp_personal_sec
                            _context.tbl_emp_personal_sec.Add(emp_personal_sec);
                            await _context.SaveChangesAsync();

    #endregion

    #region Save Emp Role 
                            tbl_user_role_map emp_user_role_map = new tbl_user_role_map();
                            emp_user_role_map.role_id = (int)enmRoleMaster.Employee;
                            emp_user_role_map.user_id = user_id;
                            emp_user_role_map.is_deleted = 0;
                            emp_user_role_map.created_by = user_master.created_by;
                            emp_user_role_map.created_date = DateTime.Now;
                            emp_user_role_map.last_modified_by = _clsCurrentUser.UserId;//user_master.created_by;
                            emp_user_role_map.last_modified_date = DateTime.Now;//DateTime.Now;


                            //Save data in tbl_emp_managers
                            _context.tbl_user_role_map.Add(emp_user_role_map);
                            await _context.SaveChangesAsync();

    #endregion

                            objEmpMater.employee_id = employee_id;
                            objEmpMater.emp_code = employee_master.emp_code;



                            trans.Commit();

                            is_transcommit = true;

                            return Ok(objEmpMater);
                        }
                        catch (Exception ex)
                        {
                            is_transcommit = false;
                            trans.Rollback();
                            objResult.StatusCode = 1;
                            objResult.Message = ex.Message;
                        }
                    }





                    if (is_transcommit)
                    {
                        return Ok(objEmpMater);
                    }
                    else
                    {
                        return Ok(objResult);
                    }

                }
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }



        // DELETE: api/apiEmployee/5
        [HttpDelete("{id}")]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.OfficialSection))]
        public async Task<IActionResult> Deletetbl_emp_officaial_sec([FromRoute] int id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var tbl_emp_officaial_sec = await _context.tbl_emp_officaial_sec.FindAsync(id);
            if (tbl_emp_officaial_sec == null)
            {
                return NotFound();
            }
            else
            {

                if (!_clsCurrentUser.DownlineEmpId.Any(p => p == tbl_emp_officaial_sec.employee_id))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access...!";
                    return Ok(objresponse);
                }
                _context.tbl_emp_officaial_sec.Remove(tbl_emp_officaial_sec);
                await _context.SaveChangesAsync();
                return Ok(tbl_emp_officaial_sec);
            }



        }

        private bool tbl_emp_officaial_secExists(int id)
        {
            return _context.tbl_emp_officaial_sec.Any(e => e.emp_official_section_id == id);
        }

        //Get Employee Code
        [Route("GetEmployeeCode/{company_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Employee))]
        public IActionResult GetEmployeeCode(int company_id)
        {
            ResponseMsg objResult = new ResponseMsg();

            try
            {
                if (!_clsCurrentUser.CompanyId.Any(p => p == company_id))
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Unauthorize Access...!";
                    return Ok(objResult);
                }

                //Get data from company master
                var data = (from a in _context.tbl_company_emp_setting.Where(x => x.is_active == 1 && x.company_id == company_id && _clsCurrentUser.CompanyId.Contains(x.company_id ?? 0))
                            select new
                            {
                                a.prefix_for_employee_code,
                                a.number_of_character_for_employee_code,
                                a.current_range,
                                a.from_range,
                                a.to_range
                            }).ToList();


                string prefix_for_employee_code = "";
                int number_of_character_for_employee_code = 0;
                int current_range = 0;
                int from_range = 0;
                int to_range = 0;



                foreach (var a in data)
                {
                    prefix_for_employee_code = a.prefix_for_employee_code;
                    number_of_character_for_employee_code = a.number_of_character_for_employee_code;
                    current_range = a.current_range;
                    from_range = a.from_range;
                    to_range = a.to_range;
                }

                //Employee Id
                int emp_id = current_range + 1;

                //number of character
                string TotalChar = prefix_for_employee_code.PadRight(number_of_character_for_employee_code, '0');

                //Remove Last Character
                string myString = TotalChar.Substring(0, TotalChar.Length - 1);

                //Mail Empaloyee Code
                string EmployeeCode = myString + emp_id;

                objResult.Message = EmployeeCode;
                objResult.StatusCode = 1;
                return Ok(objResult);
            }
            catch (Exception ex)
            {
                objResult.Message = "This Company Is InActive...!";
                objResult.StatusCode = 0;
                return Ok(objResult);
            }
        }
        [Route("ReloadEmployeeCode/{employee_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Employee))]
        public IActionResult ReloadEmployeeCode(int employee_id)
        {
            ResponseMsg objResult = new ResponseMsg();

            try
            {
                List<int> emp_comp_lst = new List<int>();

                var data_ = _context.tbl_employee_company_map.Where(x => x.employee_id == employee_id && x.is_deleted == 0).Select(p => new { p.company_id }).ToList();

                if (data_.Count > 0)
                {
                    for (int i = 0; i < data_.Count; i++)
                    {

                        emp_comp_lst.Add(Convert.ToInt32(data_[i].company_id));
                    }
                }


                List<EmployeeList> emp_off_dtl = new List<EmployeeList>();

                foreach (var com in emp_comp_lst)
                {
                    emp_off_dtl.AddRange(_clEmployeeDetail.GetEmployeeByDate(com, new DateTime(1900, 1, 1), DateTime.Now, 2)
                        .Select(p => new EmployeeList
                        {
                            company_id = p.company_id,
                            company_name = p.company_name,
                            dept_id = p.dept_id,
                            dept_name = p.dept_name,
                            emp_code = p.emp_code,
                            emp_name = p.emp_name,
                            emp_name_code = p.emp_code + " - " + p.emp_name,
                            location_id = p.location_id,
                            location_name = p.location_name,
                            state_id = p.state_id,
                            state_name = p.state_name,
                            _empid = p.employee_id
                        }));
                    ;
                }
                return Ok(emp_off_dtl);

            }
            catch (Exception ex)
            {
                objResult.Message = "Unauthorize Access...!";
                objResult.StatusCode = 0;
                return Ok(objResult);
            }
        }


        [Route("AddWeekOff")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EmpAllocation))]
        public async Task<IActionResult> AddWeekOff([FromBody] EmployeeOfficaialSection SWeekOff)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {

                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { SWeekOff.employee_id });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }

                tbl_emp_weekoff tew = new tbl_emp_weekoff()
                {
                    employee_id = SWeekOff.employee_id,
                    is_fixed_weekly_off = SWeekOff.is_fixed_weekly_off == 0 ? 1 : SWeekOff.is_fixed_weekly_off,
                    effective_from_date = SWeekOff.effectiveFromDt,
                    is_deleted = 0,
                    created_by = SWeekOff.created_by,
                    created_date = DateTime.Now,
                    modifed_by = SWeekOff.created_by,
                    modifed_date = SWeekOff.last_modified_date
                };

                _context.tbl_emp_weekoff.Add(tew);
                _context.SaveChanges();


                tbl_emp_officaial_sec tbl_emp_officaial = (from a in _context.tbl_emp_officaial_sec select a).Where(x => x.employee_id == SWeekOff.employee_id && x.is_deleted == 0).OrderByDescending(x => x.emp_official_section_id).FirstOrDefault();
                if (tbl_emp_officaial != null)
                {
                    //tbl_emp_officaial.is_fixed_weekly_off = SWeekOff.is_fixed_weekly_off;

                    _context.tbl_emp_officaial_sec.Attach(tbl_emp_officaial);
                    _context.Entry(tbl_emp_officaial).State = EntityState.Modified;
                    await _context.SaveChangesAsync();
                }


                if (SWeekOff.is_fixed_weekly_off == 2)
                {
                    ////Create new obj of tbl_shift_details table for log                    
                    //var tbl_shift_week_off = _context.tbl_shift_week_off.Where(x => x.emp_id == SWeekOff.employee_id && _clsCurrentUser.CompanyId.Contains(x.company_id)).ToList();

                    //if (tbl_shift_week_off != null)
                    //{
                    //    tbl_shift_week_off.ForEach(m => m.is_active = 0);
                    //    _context.SaveChanges();
                    //}

                    //Save in weekly Off
                    //loop and insert records
                    foreach (ShiftWeekOff sWeekOf in SWeekOff.ShiftWeekOff)
                    {
                        tbl_shift_week_off ShiftWeekOf = new tbl_shift_week_off();
                        ShiftWeekOf.company_id = sWeekOf.company_id;
                        ShiftWeekOf.week_day = sWeekOf.week_day;
                        ShiftWeekOf.days = sWeekOf.days;
                        ShiftWeekOf.emp_id = SWeekOff.employee_id;
                        ShiftWeekOf.emp_weekoff_id = tew.emp_weekoff_id;
                        ShiftWeekOf.is_active = sWeekOf.is_active;
                        ShiftWeekOf.created_by = sWeekOf.created_by;
                        ShiftWeekOf.last_modified_by = sWeekOf.last_modified_by;
                        ShiftWeekOf.created_date = DateTime.Now;
                        ShiftWeekOf.last_modified_date = DateTime.Now;

                        _context.tbl_shift_week_off.Add(ShiftWeekOf);
                    }

                    await _context.SaveChangesAsync();
                }
                objResult.StatusCode = 1;
                objResult.Message = "Employee weekoff details submitted successfully...!";

                return Ok(objResult);

            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }

        [Route("DeleteEmpWeekOff/{weekoffId}/{loginid}")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EmpAllocation))]
        public async Task<IActionResult> DeleteEmpWeekOff([FromRoute] int weekoffId, int loginid)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {


                var tbl_emp_weekoff_ = _context.tbl_emp_weekoff.Where(p => p.emp_weekoff_id == weekoffId && p.is_deleted == 0).FirstOrDefault();
                if (tbl_emp_weekoff_ != null)
                {
                    tbl_emp_weekoff_.modifed_by = loginid;
                    tbl_emp_weekoff_.modifed_date = DateTime.Now;
                    tbl_emp_weekoff_.is_deleted = 1;
                    _context.tbl_emp_weekoff.Update(tbl_emp_weekoff_);
                    _context.SaveChanges();
                    objResult.StatusCode = 1;
                    objResult.Message = "weekoff deleted successfully...!";
                    return Ok(objResult);
                }
                else
                {
                    objResult.Message = "Invalid data";
                    return Ok(objResult);
                }

            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }

        [HttpGet("GetEmployeeWeekOff/{employee}")]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> GetEmployeeWeekOff([FromRoute] int employee)
        {
            ResponseMsg objResult = new ResponseMsg();

            var data = _clEmployeeDetail.EmpPermissionExists(new int[] { employee });
            if (!data.Key)
            {
                objResult.StatusCode = 1;
                objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                return Ok(objResult);
            }

            try
            {

                int shiftdetailId = 0;
                List<tbl_shift_week_off> tswo = new List<tbl_shift_week_off>();
                List<empWeekoffModel> returnObject = new List<empWeekoffModel>();
                var Datas = _context.tbl_emp_weekoff.Where(p => p.employee_id == employee && p.is_deleted == 0).OrderByDescending(p => p.effective_from_date);
                foreach (var d1 in Datas)
                {
                    tswo.Clear();
                    empWeekoffModel empWeekoffModel_ = new empWeekoffModel();
                    empWeekoffModel_.emp_weekoff_id = d1.emp_weekoff_id;
                    empWeekoffModel_.created_date = d1.created_date;
                    empWeekoffModel_.effectiveFromDt = d1.effective_from_date;
                    empWeekoffModel_.weeklyOff = (d1.is_fixed_weekly_off == 2 ? "Dynamic" : "Fixed");
                    empWeekoffModel_.mondayOff = "";
                    empWeekoffModel_.tuesdayOff = "";
                    empWeekoffModel_.wednessdayOff = "";
                    empWeekoffModel_.thursdayOff = "";
                    empWeekoffModel_.fridayOff = "";
                    empWeekoffModel_.saturdayOff = "";
                    empWeekoffModel_.sundayOff = "";
                    if (d1.is_fixed_weekly_off != 2)
                    {
                        var EmpShift = _context.tbl_emp_shift_allocation.Where(p => p.employee_id == employee && p.applicable_from_date < empWeekoffModel_.effectiveFromDt).OrderByDescending(p => p.applicable_from_date).FirstOrDefault();
                        if (EmpShift != null)
                        {
                            shiftdetailId = _context.tbl_shift_details.Where(p => p.shift_id == EmpShift.shift_id && p.is_deleted == 0).First().shift_details_id;
                            tswo.AddRange(_context.tbl_shift_week_off.Where(p => p.shift_detail_id == shiftdetailId && p.is_active == 1));
                        }

                    }
                    else
                    {
                        tswo.AddRange(_context.tbl_shift_week_off.Where(p => p.emp_weekoff_id == d1.emp_weekoff_id && p.is_active == 1));
                    }
                    for (int index = 1; index < 8; index++)
                    {
                        if (tswo.Any(p => p.week_day == index && p.days == 1) &&
                            tswo.Any(p => p.week_day == index && p.days == 2) &&
                            tswo.Any(p => p.week_day == index && p.days == 3) &&
                            tswo.Any(p => p.week_day == index && p.days == 4) &&
                            tswo.Any(p => p.week_day == index && p.days == 5)
                            )
                        {
                            switch (index)
                            {
                                case 1: empWeekoffModel_.mondayOff = "All"; break;
                                case 2: empWeekoffModel_.tuesdayOff = "All"; break;
                                case 3: empWeekoffModel_.wednessdayOff = "All"; break;
                                case 4: empWeekoffModel_.thursdayOff = "All"; break;
                                case 5: empWeekoffModel_.fridayOff = "All"; break;
                                case 6: empWeekoffModel_.saturdayOff = "All"; break;
                                case 7: empWeekoffModel_.sundayOff = "All"; break;
                            }
                        }
                        else
                        {
                            for (int innerindex = 1; innerindex < 6; innerindex++)
                            {
                                if (tswo.Any(p => p.week_day == index && p.days == innerindex))
                                {
                                    switch (index)
                                    {
                                        case 1: empWeekoffModel_.mondayOff = empWeekoffModel_.mondayOff + innerindex + ", "; break;
                                        case 2: empWeekoffModel_.tuesdayOff = empWeekoffModel_.tuesdayOff + innerindex + ", "; break;
                                        case 3: empWeekoffModel_.wednessdayOff = empWeekoffModel_.wednessdayOff + innerindex + ", "; break;
                                        case 4: empWeekoffModel_.thursdayOff = empWeekoffModel_.thursdayOff + innerindex + ", "; break;
                                        case 5: empWeekoffModel_.fridayOff = empWeekoffModel_.fridayOff + innerindex + ", "; break;
                                        case 6: empWeekoffModel_.saturdayOff = empWeekoffModel_.saturdayOff + innerindex + ", "; break;
                                        case 7: empWeekoffModel_.sundayOff = empWeekoffModel_.sundayOff + innerindex + ", "; break;
                                    }
                                }

                            }
                        }
                    }

                    if (empWeekoffModel_.mondayOff == "") empWeekoffModel_.mondayOff = "-";
                    if (empWeekoffModel_.tuesdayOff == "") empWeekoffModel_.tuesdayOff = "-";
                    if (empWeekoffModel_.wednessdayOff == "") empWeekoffModel_.wednessdayOff = "-";
                    if (empWeekoffModel_.thursdayOff == "") empWeekoffModel_.thursdayOff = "-";
                    if (empWeekoffModel_.fridayOff == "") empWeekoffModel_.fridayOff = "-";
                    if (empWeekoffModel_.saturdayOff == "") empWeekoffModel_.saturdayOff = "-";
                    if (empWeekoffModel_.sundayOff == "") empWeekoffModel_.sundayOff = "-";

                    returnObject.Add(empWeekoffModel_);

                }



                //tbl_emp_officaial_sec tbl_emp_officaial = (from a in _context.tbl_emp_officaial_sec select a).Where(x => x.employee_id == employee && x.is_deleted == 0).OrderByDescending(x => x.emp_official_section_id).FirstOrDefault();


                //EmployeeOfficaialSection SWeekOff = new EmployeeOfficaialSection();

                //// Get Data From  Shift Week off 
                //List<tbl_shift_week_off> ShiftWeekOff_ = _context.tbl_shift_week_off.Where(a => a.emp_id == employee && _clsCurrentUser.DownlineEmpId.Contains(a.emp_id ?? 0) && _clsCurrentUser.CompanyId.Contains(a.company_id) && a.is_active == 1).ToList();
                //DateTime d = ShiftWeekOff_.Select(x => x.last_modified_date).OrderByDescending(y => y).FirstOrDefault();

                //ShiftWeekOff_ = ShiftWeekOff_.Where(x => x.last_modified_date == d).ToList();

                //List<ShiftWeekOff> sWO = new List<ShiftWeekOff>();

                ////loop and insert records
                //foreach (tbl_shift_week_off shiftLoc in ShiftWeekOff_)
                //{
                //    sWO.Add(new ShiftWeekOff
                //    {
                //        week_day = shiftLoc.week_day,
                //        days = shiftLoc.days,
                //        shift_detail_id = Convert.ToInt32(shiftLoc.shift_detail_id),
                //        company_id = shiftLoc.company_id
                //    });
                //}
                //SWeekOff.is_fixed_weekly_off = tbl_emp_officaial != null ? tbl_emp_officaial.is_fixed_weekly_off : 0;
                //SWeekOff.ShiftWeekOff = sWO;

                return Ok(returnObject);
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }

        }


        [Route("EmployeeGradeAllocation")]
        [HttpPost]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.EmpAllocation))]
        public async Task<IActionResult> EmployeeGradeAllocation(tbl_emp_grade_allocation tbl_emp_grade_allocation)
        {
            ResponseMsg objResult = new ResponseMsg();

            var data = _clEmployeeDetail.EmpPermissionExists(new int[] { tbl_emp_grade_allocation.employee_id ?? 0 });
            if (!data.Key)
            {
                objResult.StatusCode = 1;
                objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                return Ok(objResult);
            }

            try
            {


                //start check designation exist between from and to date 08-05-2020
                if (DateTime.Compare(tbl_emp_grade_allocation.applicable_from_date.Date, tbl_emp_grade_allocation.applicable_to_date.Date) > 0)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "From Date must be less than to date";
                    return Ok(objResult);
                }

                //var exist = _context.tbl_emp_grade_allocation.OrderByDescending(y => y.emp_grade_id).Where(x => x.employee_id == tbl_emp_grade_allocation.employee_id && x.grade_id != null && _clsCurrentUser.DownlineEmpId.Contains(x.employee_id??0) &&
                //  ((x.applicable_from_date.Date <= tbl_emp_grade_allocation.applicable_from_date.Date && tbl_emp_grade_allocation.applicable_from_date.Date <= x.applicable_to_date.Date) ||
                //  (x.applicable_from_date.Date <= tbl_emp_grade_allocation.applicable_to_date.Date && tbl_emp_grade_allocation.applicable_to_date.Date <= x.applicable_to_date.Date)
                //      || (tbl_emp_grade_allocation.applicable_from_date.Date <= x.applicable_from_date.Date && x.applicable_to_date.Date <= tbl_emp_grade_allocation.applicable_to_date.Date))
                //).FirstOrDefault();

                //if (exist != null)
                //{
                //    objResult.StatusCode = 1;
                //    objResult.Message = "Grade between from and to date already exist, if you want to change Grade than please change from and to Date";
                //    return Ok(objResult);
                //}
                //end check designation exist between from and to date






                tbl_emp_grade_allocation grade_allocation = new tbl_emp_grade_allocation();

                grade_allocation.employee_id = tbl_emp_grade_allocation.employee_id;
                grade_allocation.applicable_from_date = tbl_emp_grade_allocation.applicable_from_date;
                grade_allocation.applicable_to_date = tbl_emp_grade_allocation.applicable_to_date;
                grade_allocation.grade_id = tbl_emp_grade_allocation.grade_id;


                _context.tbl_emp_grade_allocation.Attach(grade_allocation);
                _context.Entry(grade_allocation).State = EntityState.Added;

                await _context.SaveChangesAsync();


                objResult.StatusCode = 1;
                objResult.Message = "Employee Grade details submitted successfully...!";


                return Ok(objResult);
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }

        [HttpGet("GetEmployeeGradeAllocation/{employee_id}")]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> GetEmployeeGradeAllocation([FromRoute] int employee_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { employee_id });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }

                tbl_emp_grade_allocation grade_allocation = (from a in _context.tbl_emp_grade_allocation select a).Where(x => x.employee_id == employee_id).OrderByDescending(x => x.emp_grade_id).FirstOrDefault();
                if (grade_allocation != null)
                {
                    return Ok(grade_allocation);
                }
                else
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Grade not alloted";
                    return Ok(objResult);
                }

            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }


        [Route("EmployeeDesignationAllocation")]
        [HttpPost]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.EmpAllocation))]
        public async Task<IActionResult> EmployeeDesignationAllocation(tbl_emp_desi_allocation tbl_emp_desi_allocation)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {

                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { tbl_emp_desi_allocation.employee_id ?? 0 });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }


                var company_map = _context.tbl_employee_company_map.Where(x => x.is_deleted == 0 && x.employee_id == tbl_emp_desi_allocation.employee_id && _clsCurrentUser.CompanyId.Contains(x.company_id ?? 0)).FirstOrDefault();
                if (company_map == null)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Employee not exist in selected company...!";
                    return Ok(objResult);
                }

                //start check designation exist between from and to date 06-05-2020
                if (DateTime.Compare(tbl_emp_desi_allocation.applicable_from_date.Date, tbl_emp_desi_allocation.applicable_to_date.Date) > 0)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "From Date must be less than to date";
                    return Ok(objResult);
                }

                //var exist = _context.tbl_emp_desi_allocation.OrderByDescending(y => y.emp_grade_id).Where(x => x.employee_id == tbl_emp_desi_allocation.employee_id && x.desig_id != null && _clsCurrentUser.DownlineEmpId.Contains(x.employee_id??0) &&
                //  ((x.applicable_from_date.Date <= tbl_emp_desi_allocation.applicable_from_date.Date && tbl_emp_desi_allocation.applicable_from_date.Date <= x.applicable_to_date.Date) ||
                //  (x.applicable_from_date.Date <= tbl_emp_desi_allocation.applicable_to_date.Date && tbl_emp_desi_allocation.applicable_to_date.Date <= x.applicable_to_date.Date)
                //      || (tbl_emp_desi_allocation.applicable_from_date.Date <= x.applicable_from_date.Date && x.applicable_to_date.Date <= tbl_emp_desi_allocation.applicable_to_date.Date))
                //).FirstOrDefault();

                //if (exist != null)
                //{
                //    objResult.StatusCode = 1;
                //    objResult.Message = "Designation between from and to date already exist, if you want to change designation than please change from and to Date";
                //    return Ok(objResult);
                //}
                //end check designation exist between from and to date

                tbl_emp_desi_allocation desi_allocation = new tbl_emp_desi_allocation();

                desi_allocation.employee_id = tbl_emp_desi_allocation.employee_id;
                desi_allocation.applicable_from_date = tbl_emp_desi_allocation.applicable_from_date;
                desi_allocation.applicable_to_date = tbl_emp_desi_allocation.applicable_to_date;
                desi_allocation.desig_id = tbl_emp_desi_allocation.desig_id;


                _context.tbl_emp_desi_allocation.Attach(desi_allocation);
                _context.Entry(desi_allocation).State = EntityState.Added;

                await _context.SaveChangesAsync();


                objResult.StatusCode = 1;
                objResult.Message = "Employee designation details submitted successfully...!";


                return Ok(objResult);
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }


        [HttpGet("GetEmployeeDesignationAllocation/{employee_id}")]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> GetEmployeeDesignationAllocation([FromRoute] int employee_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { employee_id });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }

                tbl_emp_desi_allocation desi_allocation = (from a in _context.tbl_emp_desi_allocation select a).Where(x => x.employee_id == employee_id).OrderByDescending(x => x.emp_grade_id).FirstOrDefault();
                if (desi_allocation == null)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Designation not alloted to selected employee...!";
                    return Ok(objResult);
                }
                return Ok(desi_allocation);
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }

        [Route("EmployeeManagerAllocation")]
        [HttpPost]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.EmpAllocation))]
        public async Task<IActionResult> EmployeeManagerAllocation(EmployeeManager EmployeeManager)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { EmployeeManager.employee_id });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }

                if (EmployeeManager.m_one_id == EmployeeManager.employee_id || EmployeeManager.m_two_id == EmployeeManager.employee_id || EmployeeManager.m_three_id == EmployeeManager.employee_id)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Employee and manager cannot be same";
                    return Ok(objResult);
                }

                if (EmployeeManager.m_one_id > 0)
                {
                    if (EmployeeManager.m_one_id == EmployeeManager.m_two_id || EmployeeManager.m_one_id == EmployeeManager.m_three_id)
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = "Managers 1 or Manager 2 or Manager 3 cannot be same on each level";
                        return Ok(objResult);
                    }
                }
                if (EmployeeManager.m_two_id > 0)
                {
                    if (EmployeeManager.m_two_id == EmployeeManager.m_three_id)
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = "Manager 2 or Manager 3 cannot be same on each level";
                        return Ok(objResult);
                    }
                }
                //if((EmployeeManager.m_one_id == EmployeeManager.employee_id || EmployeeManager.m_two_id == EmployeeManager.employee_id || EmployeeManager.m_three_id == EmployeeManager.employee_id) || (EmployeeManager.m_one_id == EmployeeManager.m_two_id || EmployeeManager.m_one_id == EmployeeManager.m_three_id || EmployeeManager.m_two_id == EmployeeManager.m_three_id))
                //{
                //     objResult.StatusCode = 1;
                //     objResult.Message = "Please select another manager";
                //     return Ok(objResult);

                // }





                //var invalid_manager = _context.tbl_emp_manager.Where(x => x.tem.tbl_employee_company_map.FirstOrDefault(y => y.is_deleted == 0).company_id == EmployeeManager.company_id && x.is_deleted == 0
                //  && ((x.m_one_id == EmployeeManager.employee_id || x.m_two_id == EmployeeManager.employee_id || x.m_three_id == EmployeeManager.employee_id) || (EmployeeManager.m_one_id == EmployeeManager.m_two_id || EmployeeManager.m_one_id == EmployeeManager.m_three_id || EmployeeManager.m_two_id == EmployeeManager.m_three_id))).ToList();

                //if (invalid_manager.Count > 0)
                //{
                //    objResult.StatusCode = 1;
                //    objResult.Message = "Please select another manager";
                //    return Ok(objResult);
                //}


                tbl_emp_manager emp_manager = new tbl_emp_manager();

                var exist_dtl = _context.tbl_emp_manager.Where(a => a.employee_id == EmployeeManager.employee_id && _clsCurrentUser.DownlineEmpId.Contains(a.employee_id ?? 0)).ToList();

                if (exist_dtl.Count > 0)
                {

                    _context.tbl_emp_manager.Where(x => x.employee_id == EmployeeManager.employee_id).ToList().ForEach(x =>
                    {
                        x.is_deleted = 1;
                    });

                    _context.SaveChanges();
                }



                emp_manager.employee_id = EmployeeManager.employee_id;
                emp_manager.m_one_id = EmployeeManager.m_one_id;

                emp_manager.final_approval = Convert.ToByte(EmployeeManager.final_approval);

                emp_manager.applicable_from_date = new DateTime(2000, 01, 01); //EmployeeManager.applicable_from_date1;
                emp_manager.applicable_to_date = new DateTime(2500, 01, 01);//EmployeeManager.applicable_to_date1;

                if (EmployeeManager.m_two_id != 0)
                {
                    emp_manager.m_two_id = EmployeeManager.m_two_id;
                }
                else
                {
                    emp_manager.m_two_id = null;
                }
                //emp_manager.applicable_from_date = EmployeeManager.applicable_from_date2;
                //emp_manager.applicable_to_date = EmployeeManager.applicable_to_date2;

                if (EmployeeManager.m_three_id != 0)
                {
                    emp_manager.m_three_id = EmployeeManager.m_three_id;
                }
                else
                {
                    emp_manager.m_three_id = null;
                }
                //emp_manager.applicable_from_date = EmployeeManager.applicable_from_date3;
                //emp_manager.applicable_to_date = EmployeeManager.applicable_to_date3;
                emp_manager.is_deleted = 0;
                emp_manager.notify_manager_1 = EmployeeManager.notify_manager_1;
                emp_manager.notify_manager_2 = EmployeeManager.notify_manager_2;
                emp_manager.notify_manager_3 = EmployeeManager.notify_manager_3;

                _context.tbl_emp_manager.Attach(emp_manager);
                _context.Entry(emp_manager).State = EntityState.Added;

                //await _context.SaveChangesAsync();


                List<tbl_employee_company_map> _compmap = new List<tbl_employee_company_map>();
                var comp_map = _context.tbl_employee_company_map.Where(x => x.is_deleted == 0 &&
                  (x.employee_id == EmployeeManager.m_one_id || x.employee_id == EmployeeManager.m_two_id || x.employee_id == EmployeeManager.m_three_id)).Select(p => new
                  {
                      p.employee_id,
                      p.company_id
                  }).ToList();

                if (EmployeeManager.m_one_id > 0 && !comp_map.Any(x => x.employee_id == EmployeeManager.m_one_id && x.company_id == EmployeeManager.company_id))
                {
                    _compmap.Add(new tbl_employee_company_map
                    {

                        employee_id = EmployeeManager.m_one_id,
                        company_id = EmployeeManager.company_id,
                        created_date = DateTime.Now,
                        created_by = _clsCurrentUser.EmpId,
                        last_modified_by = 0,
                        last_modified_date = new DateTime(2000, 01, 01),
                        is_default = false
                    });
                }

                if (EmployeeManager.m_two_id > 0 && !comp_map.Any(x => x.employee_id == EmployeeManager.m_two_id && x.company_id == EmployeeManager.company_id))
                {
                    _compmap.Add(new tbl_employee_company_map
                    {
                        employee_id = EmployeeManager.m_two_id,
                        company_id = EmployeeManager.company_id,
                        created_date = DateTime.Now,
                        created_by = _clsCurrentUser.EmpId,
                        last_modified_by = 0,
                        last_modified_date = new DateTime(2000, 01, 01),
                        is_default = false
                    });
                }

                if (EmployeeManager.m_three_id > 0 && !comp_map.Any(x => x.employee_id == EmployeeManager.m_three_id && x.company_id == EmployeeManager.company_id))
                {
                    _compmap.Add(new tbl_employee_company_map
                    {
                        employee_id = EmployeeManager.m_three_id,
                        company_id = EmployeeManager.company_id,
                        created_date = DateTime.Now,
                        created_by = _clsCurrentUser.EmpId,
                        last_modified_by = 0,
                        last_modified_date = new DateTime(2000, 01, 01),
                        is_default = false
                    });
                }

                _context.tbl_employee_company_map.AttachRange(_compmap);

                await _context.SaveChangesAsync();


                objResult.StatusCode = 1;
                objResult.Message = "Employee manager details submitted successfully...!";


                return Ok(objResult);
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }



        [HttpGet("GetEmployeeManagerAllocation/{employee_id}")]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> GetEmployeeManagerAllocation([FromRoute] int employee_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { employee_id });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }



                var emp_manager = (from a in _context.tbl_emp_manager select a).Where(x => x.employee_id == employee_id && x.is_deleted == 0).OrderByDescending(x => x.emp_mgr_id).ToList();
                return Ok(emp_manager);
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }


        [Route("EmployeeShiftAllocation")]
        [HttpPost]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.EmpAllocation))]
        public async Task<IActionResult> EmployeeShiftAllocation(tbl_emp_shift_allocation tbl_emp_shift_allocation)
        {
            ResponseMsg objResult = new ResponseMsg();

            var data = _clEmployeeDetail.EmpPermissionExists(new int[] { tbl_emp_shift_allocation.employee_id ?? 0 });
            if (!data.Key)
            {
                objResult.StatusCode = 1;
                objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                return Ok(objResult);
            }



            try
            {
                //added by Anil
                var previous_del = _context.tbl_emp_shift_allocation.Where(x => x.employee_id == tbl_emp_shift_allocation.employee_id).ToList();

                if (previous_del.Count > 0)
                {

                    _context.tbl_emp_shift_allocation.Where(x => x.employee_id == tbl_emp_shift_allocation.employee_id).ToList().ForEach(x =>
                    {
                        x.is_deleted = 1;
                    });

                    _context.SaveChanges();
                }
                ///////////////////////////////////

                tbl_emp_shift_allocation shift_allocation = new tbl_emp_shift_allocation();

                shift_allocation.employee_id = tbl_emp_shift_allocation.employee_id;
                shift_allocation.applicable_from_date = tbl_emp_shift_allocation.applicable_from_date;
                shift_allocation.created_date = DateTime.Now; //tbl_emp_shift_allocation.applicable_to_date;
                shift_allocation.shift_id = tbl_emp_shift_allocation.shift_id;


                _context.tbl_emp_shift_allocation.Attach(shift_allocation);
                _context.Entry(shift_allocation).State = EntityState.Added;

                await _context.SaveChangesAsync();


                objResult.StatusCode = 1;
                objResult.Message = "Employee shift details submitted successfully...!";


                return Ok(objResult);
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }


        [HttpGet("GetEmployeeShiftAllocation/{employee_id}")]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> GetEmployeeShiftAllocation([FromRoute] int employee_id)
        {
            ResponseMsg objResult = new ResponseMsg();

            var data = _clEmployeeDetail.EmpPermissionExists(new int[] { employee_id });
            if (!data.Key)
            {
                objResult.StatusCode = 1;
                objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                return Ok(objResult);
            }


            try
            {
                //tbl_emp_shift_allocation shift_allocation = (from a in _context.tbl_emp_shift_allocation select a).Where(x => x.employee_id == employee_id).OrderByDescending(x => x.emp_shift_id).FirstOrDefault();

                var shiftData = _context.tbl_emp_shift_allocation.Where(x => x.employee_id == employee_id && x.is_deleted == 0)
                    .OrderByDescending(x => x.created_date).Select(p => new
                    {
                        employee_id = p.employee_id,
                        emp_shift_id = p.emp_shift_id,
                        shift_id = p.shift_id,
                        applicable_from_date = p.applicable_from_date,
                        created_date = p.created_date,
                        is_deleted = p.is_deleted,
                        shift_code = p.tbl_shift_master.shift_code ?? "",
                        shift_name = p.tbl_shift_master.tbl_shift_details.FirstOrDefault(q => q.is_deleted == 0).shift_name
                    })
                    .ToList();

                var shift_allocation = new
                {
                    employee_id = shiftData.FirstOrDefault()?.employee_id ?? 0,
                    emp_shift_id = shiftData.FirstOrDefault()?.emp_shift_id ?? 0,
                    shift_id = shiftData.FirstOrDefault()?.shift_id ?? 0,
                    applicable_from_date = shiftData.FirstOrDefault()?.applicable_from_date ?? DateTime.Now,
                    applicable_to_date = DateTime.Now,
                    created_date = shiftData.FirstOrDefault()?.created_date ?? DateTime.Now,
                    is_deleted = shiftData.FirstOrDefault()?.is_deleted ?? 0,
                    shift_Data = shiftData
                };


                return Ok(shift_allocation);
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }


        [Route("EmployeePersonalDetails")]
        [HttpPost]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.PersonalDetails))]
        public async Task<IActionResult> EmployeePersonalDetails()
        {
            ResponseMsg objResult = new ResponseMsg();

            var files = HttpContext.Request.Form.Files;
            var a = HttpContext.Request.Form["AllData"];
            if (a.ToString() == null)
            {
                objResult.StatusCode = 1;
                objResult.Message = "Invalid data !!";
                return Ok(objResult);
            }

            CommonClass com = new CommonClass();
            tbl_emp_personal_sec tbl_emp_personal_sec = new tbl_emp_personal_sec();
            tbl_emp_personal_sec = com.ToObjectFromJSON<tbl_emp_personal_sec>(a.ToString());

            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { tbl_emp_personal_sec.employee_id ?? 0 });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }
                //check if already pending request is exists
                var Exist_pending_req = _context.tbl_emp_personal_sec.Where(x => x.employee_id == tbl_emp_personal_sec.employee_id && x.is_deleted == 2).FirstOrDefault();
                if (Exist_pending_req != null)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "There is aleady a pending request for approval!";
                    return Ok(objResult);
                }

                tbl_emp_personal_sec emp_personal_sec = new tbl_emp_personal_sec();

                tbl_emp_personal_sec tbl_emp_personal = _context.tbl_emp_personal_sec.OrderByDescending(x => x.emp_personal_section_id).Where(x => x.employee_id == tbl_emp_personal_sec.employee_id && x.is_deleted == 0).FirstOrDefault();
                if (tbl_emp_personal != null)
                {
                    tbl_emp_personal.is_deleted = 1;

                    _context.tbl_emp_personal_sec.Update(tbl_emp_personal);
                    // _context.Entry(tbl_emp_personal).State = EntityState.Modified;
                    //  await _context.SaveChangesAsync();
                }
                //else
                //{
                //    //emp_personal_sec.pan_card_image = tbl_emp_personal_sec.pan_card_image;
                //    //emp_personal_sec.aadha_card_image = tbl_emp_personal_sec.aadha_card_image;
                //    emp_personal_sec.blood_group_doc = tbl_emp_personal_sec.blood_group_doc;
                //    emp_personal_sec.corresponding_address_proof_document = tbl_emp_personal_sec.corresponding_address_proof_document;
                //    emp_personal_sec.emergency_contact_address_proof_document = tbl_emp_personal_sec.emergency_contact_address_proof_document;
                //}
                //tbl_emp_personal_sec tbl_emp_personal = (from a in _context.tbl_emp_personal_sec select a).Where(x => x.employee_id == tbl_emp_personal_sec.employee_id && x.is_deleted == 0).OrderByDescending(x => x.emp_personal_section_id).FirstOrDefault();



    #region /////////////////////////////// start blood_group_doc ///////////////////////////////////////////

                if (!string.IsNullOrEmpty(tbl_emp_personal_sec.blood_group_doc) && tbl_emp_personal.blood_group_doc != tbl_emp_personal_sec.blood_group_doc)
                {
                    var allowedExtensions = new[] { ".Jpg", ".png", ".jpg", "jpeg", ".pdf", ".doc" };
                    var ext = Path.GetExtension(files[0].FileName); //getting the extension

                    if (allowedExtensions.Contains(ext.ToLower())) //check what type of extension  
                    {
                        string name = "EmpId_" + (tbl_emp_personal_sec.employee_id).ToString();//getting file name without extension  
                        string MyFileName = name + ext;

                        var webRoot = _hostingEnvironment.WebRootPath;

                        if (!Directory.Exists(webRoot + "/EmployeeDocs/BloodGroup/" + tbl_emp_personal_sec.employee_id + "/"))
                        {
                            Directory.CreateDirectory(webRoot + "/EmployeeDocs/BloodGroup/" + tbl_emp_personal_sec.employee_id + "/");
                        }

                        var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDocs/BloodGroup/" + tbl_emp_personal_sec.employee_id + "/");

                        //save file
                        using (var fileStream = new FileStream(Path.Combine(path, MyFileName), FileMode.Create))
                        {
                            files[0].CopyTo(fileStream);
                            // objhealthcard.health_card_path = "/wwwroot/HealthCard/" + currentyearmonth + "/" + get_emp_name_code.emp_code + "/" + MyFileName;
                            emp_personal_sec.blood_group_doc = "/EmployeeDocs/BloodGroup/" + tbl_emp_personal_sec.employee_id + "/" + MyFileName;
                        }
                    }
                }
                else
                {
                    //  emp_personal_sec.blood_group_doc = tbl_emp_personal_sec.blood_group_doc;
                    emp_personal_sec.blood_group_doc = tbl_emp_personal.blood_group_doc;
                }
    #endregion





                emp_personal_sec.corresponding_address_proof_document = tbl_emp_personal_sec.corresponding_address_proof_document;

                emp_personal_sec.emergency_contact_address_proof_document = tbl_emp_personal_sec.emergency_contact_address_proof_document;

                emp_personal_sec.employee_id = tbl_emp_personal_sec.employee_id;
                //emp_personal_sec.pan_card_name = tbl_emp_personal_sec.pan_card_name;
                //emp_personal_sec.pan_card_number = tbl_emp_personal_sec.pan_card_number;

                //emp_personal_sec.aadha_card_name = tbl_emp_personal_sec.aadha_card_name;
                //emp_personal_sec.aadha_card_number = tbl_emp_personal_sec.aadha_card_number;
                emp_personal_sec.blood_group = tbl_emp_personal_sec.blood_group;
                emp_personal_sec.primary_contact_number = tbl_emp_personal_sec.primary_contact_number;
                emp_personal_sec.secondary_contact_number = tbl_emp_personal_sec.secondary_contact_number;
                emp_personal_sec.primary_email_id = tbl_emp_personal_sec.primary_email_id;
                emp_personal_sec.secondary_email_id = tbl_emp_personal_sec.secondary_email_id;
                emp_personal_sec.permanent_address_line_one = tbl_emp_personal_sec.permanent_address_line_one;
                emp_personal_sec.permanent_address_line_two = tbl_emp_personal_sec.permanent_address_line_two;
                emp_personal_sec.permanent_country = tbl_emp_personal_sec.permanent_country;
                emp_personal_sec.permanent_state = tbl_emp_personal_sec.permanent_state;
                emp_personal_sec.permanent_city = tbl_emp_personal_sec.permanent_city;
                emp_personal_sec.permanent_pin_code = tbl_emp_personal_sec.permanent_pin_code;
                emp_personal_sec.permanent_document_type = tbl_emp_personal_sec.permanent_document_type;

                emp_personal_sec.corresponding_address_line_one = tbl_emp_personal_sec.corresponding_address_line_one;
                emp_personal_sec.corresponding_address_line_two = tbl_emp_personal_sec.corresponding_address_line_two;
                emp_personal_sec.corresponding_country = tbl_emp_personal_sec.corresponding_country;
                emp_personal_sec.corresponding_state = tbl_emp_personal_sec.corresponding_state;
                emp_personal_sec.corresponding_city = tbl_emp_personal_sec.corresponding_city;
                emp_personal_sec.corresponding_pin_code = tbl_emp_personal_sec.corresponding_pin_code;
                emp_personal_sec.corresponding_document_type = tbl_emp_personal_sec.corresponding_document_type;


                emp_personal_sec.emergency_contact_name = tbl_emp_personal_sec.emergency_contact_name;
                emp_personal_sec.emergency_contact_relation = tbl_emp_personal_sec.emergency_contact_relation;
                emp_personal_sec.emergency_contact_mobile_number = tbl_emp_personal_sec.emergency_contact_mobile_number;
                emp_personal_sec.emergency_contact_line_one = tbl_emp_personal_sec.emergency_contact_line_one;
                emp_personal_sec.emergency_contact_line_two = tbl_emp_personal_sec.emergency_contact_line_two;
                emp_personal_sec.emergency_contact_country = tbl_emp_personal_sec.emergency_contact_country;
                emp_personal_sec.emergency_contact_state = tbl_emp_personal_sec.emergency_contact_state;
                emp_personal_sec.emergency_contact_city = tbl_emp_personal_sec.emergency_contact_city;
                emp_personal_sec.emergency_contact_pin_code = tbl_emp_personal_sec.emergency_contact_pin_code;
                emp_personal_sec.emergency_contact_document_type = tbl_emp_personal_sec.emergency_contact_document_type;
                emp_personal_sec.created_by = _clsCurrentUser.EmpId;
                emp_personal_sec.created_date = DateTime.Now;
                emp_personal_sec.is_deleted = 2;


    #region ** start by supriya on 10-02-2020,Account Details **

                //emp_personal_sec.bank_acc = tbl_emp_personal_sec.bank_acc;
                //emp_personal_sec.ifsc_code = tbl_emp_personal_sec.ifsc_code;
                //emp_personal_sec.bank_id = tbl_emp_personal_sec.bank_id;
                //emp_personal_sec.uan = tbl_emp_personal_sec.uan;
                //emp_personal_sec.esic = tbl_emp_personal_sec.esic;
                //emp_personal_sec.pf_applicable = tbl_emp_personal_sec.pf_applicable;
                //if (tbl_emp_personal_sec.pf_applicable != 0)
                //{
                //    emp_personal_sec.pf_number = tbl_emp_personal_sec.pf_number;
                //    emp_personal_sec.pf_group = tbl_emp_personal_sec.pf_group;
                //    emp_personal_sec.pf_ceilling = tbl_emp_personal_sec.pf_ceilling;

                //}
                //else
                //{
                //    emp_personal_sec.pf_number = "";
                //    emp_personal_sec.pf_group = 0;
                //    emp_personal_sec.pf_ceilling = 0;

                //}


    #endregion ** end by supriya on 10-02-2020,Account Details **


                _context.tbl_emp_personal_sec.Attach(emp_personal_sec);
                _context.Entry(emp_personal_sec).State = EntityState.Added;

                await _context.SaveChangesAsync();


                objResult.StatusCode = 1;
                objResult.Message = "Employee personal detail request sent to checker for approval...!";


                return Ok(objResult);
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }

        [Route("EmployeePersonal_changes/{employee_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Qualification))]
        public IActionResult EmployeePersonal_changes([FromRoute] int employee_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                tbl_emp_personal_sec obj_changes = new tbl_emp_personal_sec();

                var data = _context.tbl_emp_personal_sec.Where(x => x.employee_id == employee_id
                           && x.is_deleted == 2).OrderByDescending(x => x.emp_personal_section_id).FirstOrDefault();

                var data_exists = _context.tbl_emp_personal_sec.Where(x => x.employee_id == employee_id
                          && x.is_deleted == 0).OrderByDescending(x => x.emp_personal_section_id).FirstOrDefault();

                if (data_exists != null)
                {
                    if (data.blood_group != data_exists.blood_group)
                    {
                        obj_changes.blood_group = data.blood_group;
                    }
                    if (data.primary_contact_number != data_exists.primary_contact_number)
                    {
                        obj_changes.primary_contact_number = data.primary_contact_number;
                    }
                    if (data.secondary_contact_number != data_exists.secondary_contact_number)
                    {
                        obj_changes.secondary_contact_number = data.secondary_contact_number;
                    }
                    if (data.primary_email_id != data_exists.primary_email_id)
                    {
                        obj_changes.primary_email_id = data.primary_email_id;
                    }
                    if (data.secondary_email_id != data_exists.secondary_email_id)
                    {
                        obj_changes.secondary_email_id = data.secondary_email_id;
                    }
                    if (data.permanent_address_line_one != data_exists.permanent_address_line_one)
                    {
                        obj_changes.permanent_address_line_one = data.permanent_address_line_one;
                    }
                    if (data.permanent_address_line_two != data_exists.permanent_address_line_two)
                    {
                        obj_changes.permanent_address_line_two = data.permanent_address_line_two;
                    }
                    if (data.permanent_country != data_exists.permanent_country)
                    {
                        obj_changes.permanent_country = data.permanent_country;
                    }
                    if (data.permanent_state != data_exists.permanent_state)
                    {
                        obj_changes.permanent_state = data.permanent_state;
                    }
                    if (data.permanent_city != data_exists.permanent_city)
                    {
                        obj_changes.permanent_city = data.permanent_city;
                    }
                    if (data.permanent_pin_code != data_exists.permanent_pin_code)
                    {
                        obj_changes.permanent_pin_code = data.permanent_pin_code;
                    }
                    if (data.corresponding_address_line_one != data_exists.corresponding_address_line_one)
                    {
                        obj_changes.corresponding_address_line_one = data.corresponding_address_line_one;
                    }
                    if (data.corresponding_address_line_two != data_exists.corresponding_address_line_two)
                    {
                        obj_changes.corresponding_address_line_two = data.corresponding_address_line_two;
                    }
                    if (data.corresponding_country != data_exists.corresponding_country)
                    {
                        obj_changes.corresponding_country = data.corresponding_country;
                    }
                    if (data.corresponding_state != data_exists.corresponding_state)
                    {
                        obj_changes.corresponding_state = data.corresponding_state;
                    }
                    if (data.corresponding_city != data_exists.corresponding_city)
                    {
                        obj_changes.corresponding_city = data.corresponding_city;
                    }
                    if (data.corresponding_pin_code != data_exists.corresponding_pin_code)
                    {
                        obj_changes.corresponding_pin_code = data.corresponding_pin_code;
                    }
                    if (data.emergency_contact_name != data_exists.emergency_contact_name)
                    {
                        obj_changes.emergency_contact_name = data.emergency_contact_name;
                    }
                    if (data.emergency_contact_relation != data_exists.emergency_contact_relation)
                    {
                        obj_changes.emergency_contact_relation = data.emergency_contact_relation;
                    }
                    if (data.emergency_contact_mobile_number != data_exists.emergency_contact_mobile_number)
                    {
                        obj_changes.emergency_contact_mobile_number = data.emergency_contact_mobile_number;
                    }
                    if (data.emergency_contact_line_one != data_exists.emergency_contact_line_one)
                    {
                        obj_changes.emergency_contact_line_one = data.emergency_contact_line_one;
                    }
                    if (data.emergency_contact_line_two != data_exists.emergency_contact_line_two)
                    {
                        obj_changes.emergency_contact_line_two = data.emergency_contact_line_two;
                    }

                    if (data.emergency_contact_country != data_exists.emergency_contact_country)
                    {
                        obj_changes.emergency_contact_country = data.emergency_contact_country;
                    }
                    if (data.emergency_contact_state != data_exists.emergency_contact_state)
                    {
                        obj_changes.emergency_contact_state = data.emergency_contact_state;
                    }
                    if (data.emergency_contact_city != data_exists.emergency_contact_city)
                    {
                        obj_changes.emergency_contact_city = data.emergency_contact_city;
                    }
                    if (data.emergency_contact_pin_code != data_exists.emergency_contact_pin_code)
                    {
                        obj_changes.emergency_contact_pin_code = data.emergency_contact_pin_code;
                    }


                    return Ok(obj_changes);
                }
                else
                {
                    return Ok(data);
                }
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }


        [HttpGet("GetEmployeePersonalDetailsReq")]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.PersonalDetails))]
        public async Task<IActionResult> GetEmployeePersonalDetailsReq()
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {
                var personal_sec = (from eps in _context.tbl_emp_personal_sec
                                    join em in _context.tbl_employee_master on eps.employee_id equals em.employee_id
                                    join ofs in _context.tbl_emp_officaial_sec on eps.employee_id equals ofs.employee_id
                                    join pc in _context.tbl_country on eps.permanent_country equals pc.country_id
                                    join cc in _context.tbl_country on eps.corresponding_country equals cc.country_id
                                    join ec in _context.tbl_country on eps.emergency_contact_country equals ec.country_id
                                    join ps in _context.tbl_state on eps.permanent_state equals ps.state_id
                                    join cs in _context.tbl_state on eps.corresponding_state equals cs.state_id
                                    join es in _context.tbl_state on eps.emergency_contact_state equals es.state_id
                                    join pct in _context.tbl_city on eps.permanent_state equals pct.city_id
                                    join cct in _context.tbl_city on eps.corresponding_state equals cct.city_id
                                    join ect in _context.tbl_city on eps.emergency_contact_state equals ect.city_id
                                    where eps.is_deleted == 2 && ofs.is_deleted == 0
                                    select new
                                    {
                                        employeePersonalDetailData = eps,
                                        emp_code_ = em.emp_code,
                                        emp_name = ofs.employee_first_name + ' ' + ofs.employee_middle_name + ' ' + ofs.employee_last_name,
                                        permanentCountry = pc.name,
                                        permanentState = ps.name,
                                        permanentCity = pct.name,
                                        correspondingCountry = cc.name,
                                        correspondingState = cs.name,
                                        correspondingCity = cct.name,
                                        emergencyCountry = ec.name,
                                        emergencyState = es.name,
                                        emergencyCity = ect.name,

                                    }).Distinct().ToList();

                //var personal_sec = _context.tbl_emp_personal_sec.Join(_context.tbl_country, eps => eps.permanent_country, pc => pc.country_id, (eps, pc) => new { eps, pc }).OrderByDescending(x => x.emp_personal_section_id).Where(x => x.is_deleted == 2).ToList();
                if (personal_sec != null)
                {
                    return Ok(personal_sec);
                }
                else
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "No personal details availble or details are pending for approval at checker...!!";
                    return Ok(objResult);
                }
            }
            catch (Exception ex)
            {

                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }


        [Route("ApproveEmpPersonalSecRequests")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.PersonalDetails))]
        public IActionResult ApproveEmpPersonalSecRequests([FromBody] EmployeePersonalSection objPSec)
        {
            Response_Msg objResult = new Response_Msg();
            try
            {
                using (var tran = _context.Database.BeginTransaction())
                {
                    try
                    {
                        for (int i = 0; i < objPSec.requests_ids.Count; i++)
                        {

                            //check req exist or not
                            var req = _context.tbl_emp_personal_sec.Where(x => x.emp_personal_section_id == Convert.ToInt32(objPSec.requests_ids[i]) && x.is_deleted == 2).FirstOrDefault();

                            if (req == null)
                            {
                                objResult.StatusCode = 1;
                                objResult.Message = "Selected Personal Section Request already approved or not exist. Please Retry after refreshing the page!!";
                                return Ok(objResult);
                            }
                            else
                            {
                                req.is_deleted = 0;
                                _context.tbl_emp_personal_sec.UpdateRange(req);
                            }
                        }

                        _context.SaveChanges();
                        tran.Commit();

                        objResult.StatusCode = 0;
                        objResult.Message = objPSec.is_deleted == 0 ? "Employee Personal Section Requests Approved Successfully !!" : "Employee Personal Section Requests Rejected Successfully !!";
                        return Ok(objResult);
                    }
                    catch (Exception ex)
                    {
                        tran.Rollback();
                        objResult.StatusCode = 2;
                        objResult.Message = ex.Message;
                        return Ok(objResult);
                    }
                }
            }
            catch (Exception ex)
            {

                objResult.StatusCode = 2;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }




        [HttpGet("GetEmployeePersonalDetails/{employee_id}")]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.PersonalDetails))]
        public async Task<IActionResult> GetEmployeePersonalDetails([FromRoute] int employee_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { employee_id });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }


                tbl_emp_personal_sec personal_sec = _context.tbl_emp_personal_sec.OrderByDescending(x => x.emp_personal_section_id).Where(x => x.employee_id == employee_id && x.is_deleted == 0).FirstOrDefault();
                if (personal_sec != null)
                {
                    return Ok(personal_sec);
                }
                else
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "No personal details availble or details are pending for approval at checker...!!";
                    return Ok(objResult);
                }
                // tbl_emp_personal_sec personal_sec = (from a in _context.tbl_emp_personal_sec select a).Where(x => x.employee_id == employee_id && x.is_deleted == 0).OrderByDescending(x => x.emp_personal_section_id).First();

            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }

        [Route("EmployeeQualification")]
        [HttpPost]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.Qualification))]
        public async Task<IActionResult> EmployeeQualification(tbl_emp_qualification_sec obj_tbl_emp_qualification_sec)
        {

            Response_Msg objResult = new Response_Msg();
            tbl_emp_qualification_sec Obj_tbl_qualification = new tbl_emp_qualification_sec();
            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { obj_tbl_emp_qualification_sec.employee_id ?? 0 });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }

                var company_map = _context.tbl_employee_company_map.Where(x => x.is_deleted == 0 && _clsCurrentUser.CompanyId.Contains(x.company_id ?? 0) && x.employee_id == obj_tbl_emp_qualification_sec.employee_id).ToList();
                if (company_map.Count == 0)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Company Not mapped with selected employee";
                    return Ok(objResult);
                }
                bool rexists = false;
                //check if already PENDING REQUEST exists

                var Exist_ = _context.tbl_emp_qualification_sec.Where(a => a.employee_id == obj_tbl_emp_qualification_sec.employee_id && a.is_deleted == 2).ToList();
                if (Exist_.Count > 0)
                {
                    foreach (var itm in Exist_)
                    {
                        if (itm.stream != null && obj_tbl_emp_qualification_sec.stream != null)
                        {
                            if (itm.stream.ToUpper().Trim() == obj_tbl_emp_qualification_sec.stream.Trim().ToUpper())
                            {
                                rexists = true;
                                objResult.StatusCode = 1;
                                objResult.Message = "There is aleady a pending request for approval!";
                                return Ok(objResult);
                            }
                        }
                    }
                }
                var Exist = _context.tbl_emp_qualification_sec.Where(a => a.employee_id == obj_tbl_emp_qualification_sec.employee_id && a.is_deleted == 0).ToList();
                if (Exist.Count > 0)
                {
                    foreach (var itm in Exist)
                    {
                        if (itm.stream != null && obj_tbl_emp_qualification_sec.stream != null)
                        {
                            if (itm.stream.ToUpper().Trim() == obj_tbl_emp_qualification_sec.stream.Trim().ToUpper())
                            {
                                rexists = true;
                                objResult.StatusCode = 1;
                                objResult.Message = "Qualification already exist for this employee...!";
                                return Ok(objResult);
                            }
                        }
                    }
                }

                if (rexists == false)
                {
                    string[] replaceThese = { "data:image/png;base64,", "data:image/jpeg;base64,", "data:image/jpg;base64," };
                    string img_data = obj_tbl_emp_qualification_sec.document_image;

                    if (img_data != null && img_data != "")
                    {
                        foreach (string curr in replaceThese)
                        {
                            img_data = img_data.Replace(curr, string.Empty);
                        }

                        byte[] imageBytes = System.Convert.FromBase64String(img_data);
                        string imageName = obj_tbl_emp_qualification_sec.document_image + ".jpg";

                        var allowedExtensions = new[] { ".Jpg", ".png", ".jpg", "jpeg" };

                        var ext = ".jpg"; //getting the extension
                        if (allowedExtensions.Contains(ext.ToLower())) //check what type of extension  
                        {
                            string name = "EmpId_" + (obj_tbl_emp_qualification_sec.employee_id).ToString();//getting file name without extension  
                            string MyFileName = name + ext;

                            var webRoot = _hostingEnvironment.WebRootPath;

                            if (!Directory.Exists(webRoot + "/EmployeeDocs/Qualification/" + obj_tbl_emp_qualification_sec.title + "/"))
                            {
                                Directory.CreateDirectory(webRoot + "/EmployeeDocs/Qualification/" + obj_tbl_emp_qualification_sec.title + "/");
                            }

                            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDocs/Qualification/" + obj_tbl_emp_qualification_sec.title + "/", MyFileName);
                            System.IO.File.WriteAllBytes(path, imageBytes);//save image file
                                                                           //update file name
                            Obj_tbl_qualification.document_image = "/EmployeeDocs/Qualification/" + obj_tbl_emp_qualification_sec.title + "/" + MyFileName;
                        }
                    }



                    Obj_tbl_qualification.employee_id = obj_tbl_emp_qualification_sec.employee_id;
                    Obj_tbl_qualification.title = obj_tbl_emp_qualification_sec.title;
                    Obj_tbl_qualification.board_or_university = obj_tbl_emp_qualification_sec.board_or_university;
                    Obj_tbl_qualification.institute_or_school = obj_tbl_emp_qualification_sec.institute_or_school;
                    Obj_tbl_qualification.passing_year = obj_tbl_emp_qualification_sec.passing_year;
                    Obj_tbl_qualification.stream = obj_tbl_emp_qualification_sec.stream;
                    Obj_tbl_qualification.education_type = obj_tbl_emp_qualification_sec.education_type;
                    Obj_tbl_qualification.marks_division_cgpa = obj_tbl_emp_qualification_sec.marks_division_cgpa;
                    Obj_tbl_qualification.remark = obj_tbl_emp_qualification_sec.remark;
                    Obj_tbl_qualification.is_deleted = 2;
                    Obj_tbl_qualification.created_by = _clsCurrentUser.EmpId;
                    Obj_tbl_qualification.created_date = DateTime.Now;
                    Obj_tbl_qualification.last_modified_by = obj_tbl_emp_qualification_sec.last_modified_by;
                    Obj_tbl_qualification.last_modified_date = DateTime.Now;
                    Obj_tbl_qualification.education_level = obj_tbl_emp_qualification_sec.education_level;


                    _context.Entry(Obj_tbl_qualification).State = EntityState.Added;
                    _context.SaveChanges();

                    objResult.StatusCode = 0;
                    objResult.Message = "Qualification Request sent to checker for Approval...!";
                    return Ok(objResult);
                }
                return Ok(objResult);

            }
            catch (Exception ex)
            {
                objResult.StatusCode = 2;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }

        }


        //get grade master data
        [Route("GetEmployeeQualificationReq")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Qualification))]
        public IActionResult GetEmployeeQualificationReq()
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                var data = _context.tbl_emp_qualification_sec.Where(x => x.is_deleted == 2).Select(p => new
                {
                    p.tbl_employee_id_details.emp_code,
                    emp_name = _context.tbl_emp_officaial_sec.Where(x => x.employee_id == p.employee_id && x.is_deleted == 0).FirstOrDefault().employee_first_name,//+' '+ _context.tbl_emp_officaial_sec.Where(x => x.employee_id == p.employee_id && x.is_deleted == 0).FirstOrDefault().employee_middle_name + ' ' + _context.tbl_emp_officaial_sec.Where(x => x.employee_id == p.employee_id && x.is_deleted == 0).FirstOrDefault().employee_last_name),
                    p.emp_qualification_section_id,
                    p.employee_id,
                    p.board_or_university,
                    p.institute_or_school,
                    p.passing_year,
                    p.stream,
                    p.title,
                    p.education_type,
                    education_type_ = p.education_type == 1 ? "Regular" : p.education_type == 2 ? "Part Time" : p.education_type == 3 ? "Distance" : "",
                    p.education_level,
                    //education_level_ = Enum.GetName(typeof(EducationLevel), Convert.ToInt16(p.education_level)),// p.education_level == 1 ? "Not Educated" : p.education_level == 2 ? "Primary Education" : p.education_level == 3 ? "Secondary Education" : p.education_level == 4 ? "Sr. Secondary Education" : p.education_level == 5 ? "Graduation" : p.education_level == 6 ? "Post Graduation" : p.education_level == 7 ? "Doctorate" : "",
                    education_level_ = p.education_level == 1 ? "Not Educated" : p.education_level == 2 ? "Primary Education" : p.education_level == 3 ? "Secondary Education" : p.education_level == 4 ? "Sr. Secondary" : p.education_level == 5 ? "Graduation" : p.education_level == 6 ? "Post Graduation" : p.education_level == 7 ? "Doctorate" : p.education_level == 8 ? "Diploma" : p.education_level == 9 ? "Certificate" : "",
                    p.marks_division_cgpa,
                    p.remark,
                    p.document_image,
                    p.is_deleted,
                    p.created_by,
                    p.created_date,
                    p.last_modified_by,
                    p.last_modified_date

                }).ToList();
                return Ok(data);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }

        [Route("EmployeeQualification_changes/{employee_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Qualification))]
        public IActionResult EmployeeQualification_changes([FromRoute] int employee_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                tbl_emp_qualification_sec obj_quali = new tbl_emp_qualification_sec();

                var data_changes = _context.tbl_emp_qualification_sec.Where(a => a.employee_id == employee_id && a.is_deleted == 2)
                             .OrderByDescending(x => x.emp_qualification_section_id).FirstOrDefault();
                if (data_changes != null)
                {
                    if (data_changes.stream != null)
                    {
                        var current_data = _context.tbl_emp_qualification_sec.Where(a => a.stream.ToUpper().Trim() == data_changes.stream.ToUpper().Trim() && a.employee_id == employee_id && a.is_deleted == 0).FirstOrDefault();
                        if (current_data != null)
                        {
                            if (current_data.board_or_university != data_changes.board_or_university)
                            {
                                obj_quali.board_or_university = data_changes.board_or_university;
                            }
                            if (current_data.institute_or_school != data_changes.institute_or_school)
                            {
                                obj_quali.institute_or_school = data_changes.institute_or_school;
                            }
                            if (current_data.passing_year != data_changes.passing_year)
                            {
                                obj_quali.passing_year = data_changes.passing_year;
                            }
                            if (current_data.stream != data_changes.stream)
                            {
                                obj_quali.stream = data_changes.stream;
                            }
                            if (current_data.education_type != data_changes.education_type)
                            {
                                obj_quali.education_type = data_changes.education_type;
                            }
                            if (current_data.education_level != data_changes.education_level)
                            {
                                obj_quali.education_level = data_changes.education_level;
                            }
                            return Ok(obj_quali);
                        }
                        else
                        {
                            return Ok(data_changes);
                        }
                    }
                }

                return Ok(obj_quali);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }

        [Route("ApproveEmpQualificationRequests")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Qualification))]
        public IActionResult ApproveEmpQualificationRequests([FromBody] EmployeeQualificationSection objQSec)
        {
            Response_Msg objResult = new Response_Msg();

            List<ApplicatonMailDetails> app_mail_lst = new List<ApplicatonMailDetails>();
            //tbl_leave_request obkleavereq = new tbl_leave_request();
            try
            {
                using (var tran = _context.Database.BeginTransaction())
                {
                    try
                    {
                        for (int i = 0; i < objQSec.q_ids.Count; i++)
                        {

                            //check req exist or not
                            var req = _context.tbl_emp_qualification_sec.Where(x => x.emp_qualification_section_id == Convert.ToInt32(objQSec.q_ids[i]) && x.is_deleted == 2).FirstOrDefault();

                            if (req == null)
                            {
                                objResult.StatusCode = 1;
                                objResult.Message = "Selected Qualification Request already approved or not exist. Please Retry after refreshing the page!!";
                                return Ok(objResult);
                            }
                            else
                            {
                                req.is_deleted = 0;
                                _context.tbl_emp_qualification_sec.UpdateRange(req);
                            }
                        }

                        _context.SaveChanges();
                        tran.Commit();

                        objResult.StatusCode = 0;
                        objResult.Message = objQSec.is_deleted == 0 ? "Employee Qualification Section Requests approved successfully !!" : "Employee Qualification Section Requests Rejected successfully !!";
                        return Ok(objResult);
                    }
                    catch (Exception ex)
                    {
                        tran.Rollback();
                        objResult.StatusCode = 2;
                        objResult.Message = ex.Message;
                        return Ok(objResult);
                    }
                }
            }
            catch (Exception ex)
            {

                objResult.StatusCode = 2;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }


        //get grade master data
        [Route("GetEmployeeQualification/{employee_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Qualification))]
        public IActionResult GetEmployeeQualification([FromRoute] int employee_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                var datare = _clEmployeeDetail.EmpPermissionExists(new int[] { employee_id });
                if (!datare.Key)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = string.Format("Unauthorize Access for ({0})...!", datare.Value);
                    return Ok(objresponse);
                }

                var data = _context.tbl_emp_qualification_sec.Where(x => x.employee_id == employee_id && x.is_deleted == 0).Select(p => new
                {

                    p.emp_qualification_section_id,
                    p.employee_id,
                    p.board_or_university,
                    p.institute_or_school,
                    p.passing_year,
                    p.stream,
                    p.title,
                    p.education_type,
                    education_type_ = p.education_type == 1 ? "Regular" : p.education_type == 2 ? "Part Time" : p.education_type == 3 ? "Distance" : "",
                    p.education_level,
                    education_level_ = Enum.GetName(typeof(EducationLevel), Convert.ToInt16(p.education_level)),// p.education_level == 1 ? "Not Educated" : p.education_level == 2 ? "Primary Education" : p.education_level == 3 ? "Secondary Education" : p.education_level == 4 ? "Sr. Secondary Education" : p.education_level == 5 ? "Graduation" : p.education_level == 6 ? "Post Graduation" : p.education_level == 7 ? "Doctorate" : "",
                    p.marks_division_cgpa,
                    p.remark,
                    p.document_image,
                    p.is_deleted,
                    p.created_by,
                    p.created_date,
                    p.last_modified_by,
                    p.last_modified_date

                }).ToList();
                return Ok(data);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }


        //get grade master data
        [Route("GetEditEmployeeQualification/{qualification_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Qualification))]
        public IActionResult GetEditEmployeeQualification([FromRoute] int qualification_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                var data = _context.tbl_emp_qualification_sec.Where(x => x.emp_qualification_section_id == qualification_id && x.is_deleted == 0).FirstOrDefault();

                if (data == null)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access...!";
                    return Ok(objresponse);
                }


                return Ok(data);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }


        }

        //Update Data Of Employee Qualifaction
        [Route("UpdateEmployeeQualification/{id}")]
        [HttpPost]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.Qualification))]
        public async Task<IActionResult> UpdateEmployeeQualification([FromRoute] int id, [FromBody]  tbl_emp_qualification_sec tbl_emp_qualification_sec)
        {

            Response_Msg objResult = new Response_Msg();

            try
            {

                //Create new obj of tbl_company_master table               
                tbl_emp_qualification_sec tbl_com_master = new tbl_emp_qualification_sec();

                tbl_emp_qualification_sec tbl_com_master1 = (from a in _context.tbl_emp_qualification_sec select a).Where(x => x.employee_id == tbl_emp_qualification_sec.employee_id && x.is_deleted == 0).OrderByDescending(x => x.emp_qualification_section_id).First();
                tbl_com_master1.is_deleted = 1;

                _context.tbl_emp_qualification_sec.Attach(tbl_com_master1);
                _context.Entry(tbl_com_master1).State = EntityState.Modified;
                await _context.SaveChangesAsync();

    #region  //////////////////////////////// start document_image //////////////////////////////////////


                if (tbl_com_master1.document_image != tbl_emp_qualification_sec.document_image)
                {
                    string[] replaceThese = { "data:image/png;base64,", "data:image/jpeg;base64,", "data:image/jpg;base64," };
                    string img_data = tbl_emp_qualification_sec.document_image;



                    if (img_data != null && img_data != "")
                    {
                        foreach (string curr in replaceThese)
                        {
                            img_data = img_data.Replace(curr, string.Empty);
                        }

                        byte[] imageBytes = System.Convert.FromBase64String(img_data);
                        string imageName = tbl_emp_qualification_sec.document_image + ".jpg";

                        var allowedExtensions = new[] { ".Jpg", ".png", ".jpg", "jpeg" };

                        var ext = ".jpg"; //getting the extension
                        if (allowedExtensions.Contains(ext.ToLower())) //check what type of extension  
                        {
                            string name = "EmpId_" + (tbl_emp_qualification_sec.employee_id).ToString();//getting file name without extension  
                            string MyFileName = name + ext;

                            var webRoot = _hostingEnvironment.WebRootPath;

                            if (!Directory.Exists(webRoot + "/EmployeeDocs/Qualification/" + tbl_emp_qualification_sec.title + "/"))
                            {
                                Directory.CreateDirectory(webRoot + "/EmployeeDocs/Qualification/" + tbl_emp_qualification_sec.title + "/");
                            }

                            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDocs/Qualification/" + tbl_emp_qualification_sec.title + "/", MyFileName);
                            System.IO.File.WriteAllBytes(path, imageBytes);//save image file
                                                                           //update file name
                            tbl_com_master.document_image = "/EmployeeDocs/Qualification/" + tbl_emp_qualification_sec.title + "/" + MyFileName;
                        }
                    }

                }
                else
                {
                    tbl_com_master.document_image = tbl_emp_qualification_sec.document_image;
                }

    #endregion


                tbl_com_master.employee_id = tbl_emp_qualification_sec.employee_id;
                tbl_com_master.title = tbl_emp_qualification_sec.title;
                tbl_com_master.board_or_university = tbl_emp_qualification_sec.board_or_university;
                tbl_com_master.institute_or_school = tbl_emp_qualification_sec.institute_or_school;
                tbl_com_master.passing_year = tbl_emp_qualification_sec.passing_year;
                tbl_com_master.stream = tbl_emp_qualification_sec.stream;
                tbl_com_master.education_type = tbl_emp_qualification_sec.education_type;
                tbl_com_master.marks_division_cgpa = tbl_emp_qualification_sec.marks_division_cgpa;
                tbl_com_master.remark = tbl_emp_qualification_sec.remark;
                tbl_com_master.is_deleted = 2;
                tbl_com_master.created_by = tbl_emp_qualification_sec.created_by;
                tbl_com_master.created_date = DateTime.Now;
                tbl_com_master.last_modified_by = tbl_emp_qualification_sec.last_modified_by;
                tbl_com_master.last_modified_date = DateTime.Now;
                tbl_com_master.education_level = tbl_emp_qualification_sec.education_level;

                _context.tbl_emp_qualification_sec.Attach(tbl_com_master);
                _context.Entry(tbl_com_master).State = EntityState.Added;
                await _context.SaveChangesAsync();


                objResult.StatusCode = 0;
                objResult.Message = "Qualification details updated successfully...!";
                return Ok(objResult);


                //}

            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }

        }


        [Route("FamilySection")]
        [HttpPost]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.EmpFamily))]
        public async Task<IActionResult> FamilySection(tbl_emp_family_sec tbl_emp_family_sec)
        {

            Response_Msg objResult = new Response_Msg();
            tbl_emp_family_sec Obj_tbl_family_sec = new tbl_emp_family_sec();
            try
            {
                //check if already pending request is exists
                var Exist_pending_req = _context.tbl_emp_family_sec.Where(a => a.relation.Trim().ToUpper() == tbl_emp_family_sec.relation.Trim().ToUpper() && a.employee_id == tbl_emp_family_sec.employee_id && a.is_deleted == 2).FirstOrDefault();
                if (Exist_pending_req != null)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "There is aleady a pending request for approval!";
                    return Ok(objResult);
                }

                // First Check Relation and  Name

                var Exist = (from a in _context.tbl_emp_family_sec.Where(x => x.employee_id == tbl_emp_family_sec.employee_id && x.relation.Trim().ToUpper() == tbl_emp_family_sec.relation.Trim().ToUpper() && x.is_deleted == 0) select a).FirstOrDefault();
                if (Exist != null)
                {
                    if (Exist.relation.Trim().ToUpper() != "BROTHER" && Exist.relation.Trim().ToUpper() != "SISTER" && Exist.relation.Trim().ToUpper() != "CHILD")
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = "Family Member already exist for this employee...!";
                        return Ok(objResult);
                    }

                }


                bool adhar_exist = false;
                var tead = _context.tbl_emp_adhar_details.Where(x => x.is_deleted == 0 && x.aadha_card_number == tbl_emp_family_sec.aadhar_card_no && x.aadha_card_number != "").FirstOrDefault();
                if (tead != null)
                {
                    adhar_exist = true;
                }
                else
                {
                    var tefs = _context.tbl_emp_family_sec.Where(x => x.is_deleted == 0 && x.aadhar_card_no == tbl_emp_family_sec.aadhar_card_no && x.aadhar_card_no != "").FirstOrDefault();


                    //   var tefs = _context.tbl_emp_family_sec.Where(x=>x.is_deleted==0).ToList().GroupBy(x => x.aadhar_card_no).Any(y => y.Count() > 1);
                    if (tefs != null)
                    {
                        adhar_exist = true;
                    }
                }
                if (adhar_exist)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Adhar card no already exist...";
                    return Ok(objResult);
                }
                string[] replaceThese = { "data:image/png;base64,", "data:image/jpeg;base64,", "data:image/jpg;base64," };
                string img_data = tbl_emp_family_sec.document_image;



                if (img_data != null && img_data != "")
                {
                    foreach (string curr in replaceThese)
                    {
                        img_data = img_data.Replace(curr, string.Empty);
                    }

                    byte[] imageBytes = System.Convert.FromBase64String(img_data);
                    string imageName = tbl_emp_family_sec.document_image + ".jpg";

                    var allowedExtensions = new[] { ".Jpg", ".png", ".jpg", "jpeg" };

                    var ext = ".jpg"; //getting the extension
                    if (allowedExtensions.Contains(ext.ToLower())) //check what type of extension  
                    {
                        string name = "EmpId_" + (tbl_emp_family_sec.employee_id).ToString();//getting file name without extension  
                        string MyFileName = name + ext;

                        var webRoot = _hostingEnvironment.WebRootPath;

                        if (!Directory.Exists(webRoot + "/EmployeeDocs/Family/" + tbl_emp_family_sec.name_as_per_aadhar_card + "/"))
                        {
                            Directory.CreateDirectory(webRoot + "/EmployeeDocs/Family/" + tbl_emp_family_sec.name_as_per_aadhar_card + "/");
                        }

                        var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDocs/Family/" + tbl_emp_family_sec.name_as_per_aadhar_card + "/", MyFileName);
                        System.IO.File.WriteAllBytes(path, imageBytes);//save image file
                                                                       //update file name
                        Obj_tbl_family_sec.document_image = "/EmployeeDocs/Family/" + tbl_emp_family_sec.name_as_per_aadhar_card + "/" + MyFileName;
                    }
                }


                Obj_tbl_family_sec.employee_id = tbl_emp_family_sec.employee_id;
                Obj_tbl_family_sec.relation = tbl_emp_family_sec.relation;
                Obj_tbl_family_sec.occupation = tbl_emp_family_sec.occupation;
                Obj_tbl_family_sec.name_as_per_aadhar_card = tbl_emp_family_sec.name_as_per_aadhar_card;
                Obj_tbl_family_sec.date_of_birth = tbl_emp_family_sec.date_of_birth;
                Obj_tbl_family_sec.gender = tbl_emp_family_sec.gender;
                Obj_tbl_family_sec.dependent = tbl_emp_family_sec.dependent;
                Obj_tbl_family_sec.remark = tbl_emp_family_sec.remark;
                Obj_tbl_family_sec.is_nominee = tbl_emp_family_sec.is_nominee;
                Obj_tbl_family_sec.nominee_percentage = tbl_emp_family_sec.nominee_percentage;
                Obj_tbl_family_sec.is_deleted = 2;
                Obj_tbl_family_sec.created_by = tbl_emp_family_sec.created_by;
                Obj_tbl_family_sec.created_date = DateTime.Now;
                Obj_tbl_family_sec.last_modified_by = tbl_emp_family_sec.last_modified_by;
                Obj_tbl_family_sec.last_modified_date = DateTime.Now;
                Obj_tbl_family_sec.aadhar_card_no = tbl_emp_family_sec.aadhar_card_no;

                _context.Entry(Obj_tbl_family_sec).State = EntityState.Added;


                if (Obj_tbl_family_sec.relation == "Father" || Obj_tbl_family_sec.relation == "Husband")
                {
                    var empdata = _context.tbl_emp_officaial_sec.Where(p => p.employee_id == Obj_tbl_family_sec.employee_id && p.is_deleted == 0).FirstOrDefault();
                    if (empdata != null)
                    {
                        empdata.emp_father_name = Obj_tbl_family_sec.name_as_per_aadhar_card;
                        _context.tbl_emp_officaial_sec.Update(empdata);
                    }
                }
                _context.SaveChanges();


                objResult.StatusCode = 0;
                objResult.Message = "Family details Request sent to checker for approval...!";
                return Ok(objResult);

            }
            catch (Exception ex)
            {
                objResult.StatusCode = 2;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }


        }


        //get grade master data
        [Route("GetFamilySectionReq")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.EmpFamily))]
        public IActionResult GetFamilySectionReq()
        {
            try
            {
                ResponseMsg objResult = new ResponseMsg();
                var data = (from em in _context.tbl_emp_family_sec
                            join e_m in _context.tbl_employee_master on em.employee_id equals e_m.employee_id
                            join e_of in _context.tbl_emp_officaial_sec on em.employee_id equals e_of.employee_id
                            where em.is_deleted == 2 && e_of.is_deleted == 0
                            select new
                            {
                                em,
                                emp_code_ = e_m.emp_code,
                                emp_name = e_of.employee_first_name + ' ' + e_of.employee_middle_name + ' ' + e_of.employee_last_name
                            }).Distinct().ToList();


                //_context.tbl_emp_family_sec.Join().Where(x => x.is_deleted == 2).ToList();
                return Ok(data);

            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }


        [Route("ApproveEmpFamilySecRequests")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EmpFamily))]
        public IActionResult ApproveEmpFamilySecRequests([FromBody] EmployeeFamilySection objFSec)
        {
            Response_Msg objResult = new Response_Msg();

            try
            {
                using (var tran = _context.Database.BeginTransaction())
                {
                    try
                    {
                        for (int i = 0; i < objFSec.request_ids.Count; i++)
                        {

                            //check req exist or not
                            var req = _context.tbl_emp_family_sec.Where(x => x.emp_family_section_id == Convert.ToInt32(objFSec.request_ids[i]) && x.is_deleted == 2).FirstOrDefault();

                            if (req == null)
                            {
                                objResult.StatusCode = 1;
                                objResult.Message = "Selected Family Section Request already approved or not exist. Please Retry after refreshing the page!!";
                                return Ok(objResult);
                            }
                            else
                            {
                                req.is_deleted = 0;
                                _context.tbl_emp_family_sec.UpdateRange(req);
                            }
                        }

                        _context.SaveChanges();
                        tran.Commit();

                        objResult.StatusCode = 0;
                        objResult.Message = objFSec.is_deleted == 0 ? "Employee Family Section Section Requests approved successfully !!" : "Employee Family Section Requests Rejected successfully !!";
                        return Ok(objResult);
                    }
                    catch (Exception ex)
                    {
                        tran.Rollback();
                        objResult.StatusCode = 2;
                        objResult.Message = ex.Message;
                        return Ok(objResult);
                    }
                }
            }
            catch (Exception ex)
            {

                objResult.StatusCode = 2;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }


        //get grade master data
        [Route("GetFamilySection/{employee_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.EmpFamily))]
        public IActionResult GetFamilySection([FromRoute] int employee_id)
        {
            try
            {
                ResponseMsg objResult = new ResponseMsg();
                var data = _context.tbl_emp_family_sec.Where(x => x.employee_id == employee_id && x.is_deleted == 0).ToList();
                return Ok(data);

            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }
        [Route("Employee_family_changes/{employee_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Qualification))]
        public IActionResult Employee_family_changes([FromRoute] int employee_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                tbl_emp_family_sec obj_family = new tbl_emp_family_sec();

                var data_changes = _context.tbl_emp_family_sec.Where(a => a.employee_id == employee_id && a.is_deleted == 2)
                             .OrderByDescending(x => x.emp_family_section_id).FirstOrDefault();
                if (data_changes != null)
                {
                    if (data_changes.relation != null)
                    {
                        var current_data = _context.tbl_emp_family_sec.Where(a => a.relation.ToUpper() == data_changes.relation && a.employee_id == employee_id && a.is_deleted == 0).FirstOrDefault();
                        if (current_data != null)
                        {
                            if (current_data.occupation != data_changes.occupation)
                            {
                                obj_family.occupation = data_changes.occupation;
                            }
                            if (current_data.name_as_per_aadhar_card != data_changes.name_as_per_aadhar_card)
                            {
                                obj_family.name_as_per_aadhar_card = data_changes.name_as_per_aadhar_card;
                            }
                            if (current_data.aadhar_card_no != data_changes.aadhar_card_no)
                            {
                                obj_family.aadhar_card_no = data_changes.aadhar_card_no;
                            }
                            if (current_data.date_of_birth != data_changes.date_of_birth)
                            {
                                obj_family.date_of_birth = data_changes.date_of_birth;
                            }
                            if (current_data.gender != data_changes.gender)
                            {
                                obj_family.gender = data_changes.gender;
                            }
                            if (current_data.dependent != data_changes.dependent)
                            {
                                obj_family.dependent = data_changes.dependent;
                            }
                            if (current_data.is_nominee != data_changes.is_nominee)
                            {
                                obj_family.is_nominee = data_changes.is_nominee;
                            }
                            return Ok(obj_family);
                        }
                        else
                        {
                            return Ok(data_changes);
                        }
                    }
                }
                return Ok(data_changes);
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }


        //get GetNomineePercentage
        [Route("GetNomineePercentage/{employee_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.EmpFamily))]
        public IActionResult GetNomineePercentage([FromRoute] int employee_id)
        {
            try
            {
                ResponseMsg objResult = new ResponseMsg();


                var data = _context.tbl_emp_family_sec.Where(x => x.employee_id == employee_id && x.is_deleted == 0).ToList();

                double Total = 0;

                if (data != null)
                {
                    for (int i = 0; i < data.Count; i++)
                    {
                        Total += Convert.ToDouble(data[i].nominee_percentage);
                    }
                }


                return Ok(new { total = Total });

            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }

        //get grade master data
        [Route("GetEditFamilySection/{emp_family_section_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.EmpFamily))]
        public IActionResult GetEditFamilySection([FromRoute] int emp_family_section_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                var data = _context.tbl_emp_family_sec.Where(x => x.emp_family_section_id == emp_family_section_id && x.is_deleted == 0 && _clsCurrentUser.DownlineEmpId.Contains(x.employee_id ?? 0)).FirstOrDefault();
                if (data == null)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Invalid ID or Unauthorize access";
                    return Ok(objresponse);
                }
                return Ok(data);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }


        }



        //Update Data Of Employee Qualifaction
        [Route("UpdateFamilySection/{id}")]
        [HttpPost]
        ////[Authorize]
        [Authorize(Policy = nameof(enmMenuMaster.EmpFamily))]
        public async Task<IActionResult> UpdateFamilySection([FromRoute] int id, [FromBody]  tbl_emp_family_sec tbl_emp_family_sec)
        {

            Response_Msg objResult = new Response_Msg();

            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { tbl_emp_family_sec.employee_id ?? 0 });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }


                var Exist = (from a in _context.tbl_emp_family_sec.Where(x => x.emp_family_section_id != id && x.employee_id == tbl_emp_family_sec.employee_id && x.relation == tbl_emp_family_sec.relation && x.is_deleted == 0) select a).FirstOrDefault();
                if (Exist != null)
                {
                    if (Exist.relation.Trim().ToUpper() != "BROTHER" && Exist.relation.Trim().ToUpper() != "SISTER" && Exist.relation.Trim().ToUpper() != "CHILD")
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = "Family Member already exist for this employee...!";
                        return Ok(objResult);
                    }

                }


                bool adhar_exist = false;
                var tead = _context.tbl_emp_adhar_details.Where(x => x.is_deleted == 0 && x.aadha_card_number == tbl_emp_family_sec.aadhar_card_no && x.aadha_card_number != "").FirstOrDefault();
                if (tead != null)
                {
                    adhar_exist = true;
                }
                else
                {
                    var tefs = _context.tbl_emp_family_sec.Where(x => x.emp_family_section_id != id && x.is_deleted == 0 && x.aadhar_card_no == tbl_emp_family_sec.aadhar_card_no && x.aadhar_card_no != "").FirstOrDefault();
                    if (tefs != null)
                    {
                        adhar_exist = true;
                    }
                }
                if (adhar_exist)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Adhar card no already exist...";
                    return Ok(objResult);
                }


                //check if exist
                //var Exist = (from a in _context.tbl_emp_qualification_sec.Where(x => x.title == tbl_emp_qualification_sec.title && x.employee_id == tbl_emp_qualification_sec.employee_id) select a).FirstOrDefault();

                //if (Exist != null)
                //{
                //    objResult.StatusCode = 1;
                //    objResult.Message = "Qualification already exist for this employee...!";
                //    return Ok(objResult);
                //}
                //else
                //{
                //Create new obj of tbl_company_master table               
                tbl_emp_family_sec tbl_com_master = new tbl_emp_family_sec();

                tbl_emp_family_sec tbl_com_master1 = _context.tbl_emp_family_sec.Where(x => x.emp_family_section_id == id && x.employee_id == tbl_emp_family_sec.employee_id && x.is_deleted == 0).FirstOrDefault();
                if (tbl_com_master1 != null)
                {
                    tbl_com_master1.is_deleted = 1;

                    _context.tbl_emp_family_sec.Attach(tbl_com_master1);
                    _context.Entry(tbl_com_master1).State = EntityState.Modified;
                    await _context.SaveChangesAsync();



                    tbl_com_master.employee_id = tbl_emp_family_sec.employee_id;
                    tbl_com_master.relation = tbl_emp_family_sec.relation;
                    tbl_com_master.occupation = tbl_emp_family_sec.occupation;
                    tbl_com_master.name_as_per_aadhar_card = tbl_emp_family_sec.name_as_per_aadhar_card;
                    tbl_com_master.date_of_birth = tbl_emp_family_sec.date_of_birth;
                    tbl_com_master.gender = tbl_emp_family_sec.gender;
                    tbl_com_master.dependent = tbl_emp_family_sec.dependent;
                    tbl_com_master.remark = tbl_emp_family_sec.remark;
                    tbl_com_master.is_nominee = tbl_emp_family_sec.is_nominee;
                    tbl_com_master.nominee_percentage = tbl_emp_family_sec.nominee_percentage;
                    tbl_com_master.is_deleted = 2;
                    tbl_com_master.created_by = tbl_emp_family_sec.created_by;
                    tbl_com_master.created_date = DateTime.Now;
                    tbl_com_master.last_modified_by = tbl_emp_family_sec.last_modified_by;
                    tbl_com_master.last_modified_date = DateTime.Now;
                    tbl_com_master.aadhar_card_no = tbl_emp_family_sec.aadhar_card_no;
                    tbl_com_master.document_image = "";

                    _context.tbl_emp_family_sec.Attach(tbl_com_master);
                    _context.Entry(tbl_com_master).State = EntityState.Added;
                    await _context.SaveChangesAsync();


                    objResult.StatusCode = 0;
                    objResult.Message = "Family details updated successfully...!";
                    return Ok(objResult);
                }
                else
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Invalid Request";
                    return Ok(objResult);
                }


    #region  //////////////////////////////// start document_image //////////////////////////////////////


                //if (!string.IsNullOrEmpty(tbl_emp_family_sec.document_image) && tbl_com_master1.document_image != tbl_emp_family_sec.document_image)
                //{
                //    string[] replaceThese = { "data:image/png;base64,", "data:image/jpeg;base64,", "data:image/jpg;base64," };
                //    string img_data = tbl_emp_family_sec.document_image;



                //    if (img_data != null && img_data != "")
                //    {
                //        foreach (string curr in replaceThese)
                //        {
                //            img_data = img_data.Replace(curr, string.Empty);
                //        }

                //        byte[] imageBytes = System.Convert.FromBase64String(img_data);
                //        string imageName = tbl_emp_family_sec.document_image + ".jpg";

                //        var allowedExtensions = new[] { ".Jpg", ".png", ".jpg", "jpeg" };

                //        var ext = ".jpg"; //getting the extension
                //        if (allowedExtensions.Contains(ext.ToLower())) //check what type of extension  
                //        {
                //            string name = "EmpId_" + (tbl_emp_family_sec.employee_id).ToString();//getting file name without extension  
                //            string MyFileName = name + ext;

                //            var webRoot = _hostingEnvironment.WebRootPath;

                //            if (!Directory.Exists(webRoot + "/EmployeeDocs/Family/" + tbl_emp_family_sec.name_as_per_aadhar_card + "/"))
                //            {
                //                Directory.CreateDirectory(webRoot + "/EmployeeDocs/Family/" + tbl_emp_family_sec.name_as_per_aadhar_card + "/");
                //            }

                //            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDocs/Family/" + tbl_emp_family_sec.name_as_per_aadhar_card + "/", MyFileName);
                //            System.IO.File.WriteAllBytes(path, imageBytes);//save image file
                //                                                           //update file name
                //            tbl_com_master.document_image = "/EmployeeDocs/Family/" + tbl_emp_family_sec.name_as_per_aadhar_card + "/" + MyFileName;
                //        }
                //    }

                //}
                //else
                //{
                // tbl_com_master.document_image = ""; //tbl_emp_family_sec.document_image;
                //}

    #endregion



                //}

            }
            catch (Exception ex)
            {
                objResult.StatusCode = 2;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }

        }


        //get grade master data
        [Route("GetAllEmployee")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Employee))]
        public IActionResult GetAllEmployee()
        {
            try
            {
                ResponseMsg objResult = new ResponseMsg();


                var result = (from em in _context.tbl_employee_master
                              join e_of in _context.tbl_emp_officaial_sec on em.employee_id equals e_of.employee_id
                              join um in _context.tbl_user_master on em.employee_id equals um.employee_id
                              join cm in _context.tbl_company_master on um.default_company_id equals cm.company_id
                              where em.is_active == 1 && e_of.is_deleted == 0 && _clsCurrentUser.DownlineEmpId.Contains(em.employee_id)
                              select new
                              {
                                  employee_id = em.employee_id,
                                  employee_code = em.emp_code,
                                  employee_first_name = e_of.employee_first_name,
                                  employee_middle_name = e_of.employee_middle_name,
                                  employee_last_name = e_of.employee_last_name,
                                  card_number = e_of.card_number,
                                  //date_of_joining = e_of.date_of_joining,
                                  //date_of_birth = e_of.date_of_birth,
                                  official_email_id = e_of.official_email_id,
                                  username = um.username,
                                  password = um.password,
                                  company_name = cm.company_name,
                                  created_date = em.created_date,
                                  emp_name_code = string.Format("{0} {1} {2} ({3})", e_of.employee_first_name, e_of.employee_middle_name, e_of.last_modified_by, em.emp_code),
                                  //e_of.tbl_department_master.department_name,
                                  e_of.tbl_employee_id_details.tbl_emp_desi_allocation.OrderByDescending(x => x.emp_grade_id).FirstOrDefault(x => x.applicable_from_date.Date <= DateTime.Now.Date && DateTime.Now.Date <= x.applicable_to_date.Date).tbl_designation_master.designation_name,
                                  e_of.tbl_employee_id_details.tbl_emp_grade_allocation.OrderByDescending(x => x.emp_grade_id).FirstOrDefault(x => x.applicable_from_date.Date <= DateTime.Now.Date && DateTime.Now.Date <= x.applicable_to_date.Date).tbl_grade_master.grade_name,

                              }).Distinct().ToList();


                if (result == null)
                {
                    objResult.Message = "Record Not Found...!";
                    objResult.StatusCode = 0;
                    return Ok(objResult);
                }
                else
                {
                    return Ok(result);
                }

            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }

        //get all employee data
        [Route("GetAllEmployee/{empType}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Employee))]
        public IActionResult GetAllEmployee(int empType)
        {
            try
            {
                ResponseMsg objResult = new ResponseMsg();


                var result = (from em in _context.tbl_employee_master
                              join e_of in _context.tbl_emp_officaial_sec on em.employee_id equals e_of.employee_id
                              join um in _context.tbl_user_master on em.employee_id equals um.employee_id
                              join cm in _context.tbl_company_master on um.default_company_id equals cm.company_id
                              where em.is_active == empType && e_of.is_deleted == 0 && (empType == 1 ? _clsCurrentUser.DownlineEmpId.Contains(em.employee_id) : true)
                              select new
                              {
                                  employee_id = em.employee_id,
                                  employee_code = em.emp_code,
                                  employee_first_name = e_of.employee_first_name,
                                  employee_middle_name = e_of.employee_middle_name,
                                  employee_last_name = e_of.employee_last_name,
                                  card_number = e_of.card_number,
                                  //date_of_joining = e_of.date_of_joining,
                                  //date_of_birth = e_of.date_of_birth,
                                  official_email_id = e_of.official_email_id,
                                  username = um.username,
                                  password = um.password,
                                  company_name = cm.company_name,
                                  created_date = em.created_date,
                                  emp_name_code = string.Format("{0} {1} {2} ({3})", e_of.employee_first_name, e_of.employee_middle_name, e_of.last_modified_by, em.emp_code),
                                  //e_of.tbl_department_master.department_name,
                                  e_of.tbl_employee_id_details.tbl_emp_desi_allocation.OrderByDescending(x => x.emp_grade_id).FirstOrDefault(x => x.applicable_from_date.Date <= DateTime.Now.Date && DateTime.Now.Date <= x.applicable_to_date.Date).tbl_designation_master.designation_name,
                                  e_of.tbl_employee_id_details.tbl_emp_grade_allocation.OrderByDescending(x => x.emp_grade_id).FirstOrDefault(x => x.applicable_from_date.Date <= DateTime.Now.Date && DateTime.Now.Date <= x.applicable_to_date.Date).tbl_grade_master.grade_name,

                              }).Distinct().ToList();


                if (result == null)
                {
                    objResult.Message = "Record Not Found...!";
                    objResult.StatusCode = 0;
                    return Ok(objResult);
                }
                else
                {
                    return Ok(result);
                }

            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }

        [Route("GetEmployeeDumpData")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EmployeeDump))]
        public IActionResult GetEmployeeDumpData([FromBody] LeaveReport objmodel)
        {
            ResponseMsg objResult = new ResponseMsg();

            try
            {

                objmodel.empdtl.RemoveAll(p => Convert.ToInt32(p) < 0 || Convert.ToInt32(p) == 0);

                foreach (var ids in objmodel.empdtl)
                {

                    if (!_clsCurrentUser.DownlineEmpId.Contains(Convert.ToInt32(ids)))
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = "Unauthorize Access....!!";
                        return Ok(objResult);
                    }

                    //int id = Convert.ToInt32(ids);
                }

                var id_list = String.Join(",", objmodel.empdtl);


                List<EmployeeDumpData> data = new List<EmployeeDumpData>();

                using (MySqlConnection connection = new MySqlConnection(_context._connectionString))
                {
                    using (MySqlCommand cmd = new MySqlCommand("proc_get_emp_dump_data", connection))
                    {

                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new MySqlParameter("proc_type", 0));
                        cmd.Parameters.Add(new MySqlParameter("employee_ids", id_list));
                        connection.Open();
                        MySqlDataReader rd = cmd.ExecuteReader();
                        while (rd.Read())
                        {
                            data.Add(new EmployeeDumpData()
                            {

                                company_name = Convert.ToString(rd["Company Name"]),
                                employee_code = Convert.ToString(rd["Employee Code"]),
                                status = Convert.ToString(rd["Status"]),
                                salutation = Convert.ToString(rd["Salutation"]),
                                employee_name = Convert.ToString(rd["Employee Name"]),
                                card_number = Convert.ToString(rd["Card Number"]),
                                gender = Convert.ToString(rd["Gender"]),
                                group_joining_date = Convert.ToString(rd["Group Joining Date"]),
                                date_of_joining = Convert.ToString(rd["Date of joining"]),
                                date_of_birth = Convert.ToString(rd["Date of Birth"]),
                                department_joining_date = Convert.ToString(rd["Department Joining Date"]),
                                religion = Convert.ToString(rd["Religion"]),
                                marital_status = Convert.ToString(rd["Marital Status"]),
                                official_email_id = Convert.ToString(rd["Official Email Id"]),
                                location_name = Convert.ToString(rd["Location Name"]),
                                sub_location = Convert.ToString(rd["Sub Location"]),
                                department_name = Convert.ToString(rd["Department Name"]),
                                sub_department = Convert.ToString(rd["Sub Department"]),
                                nationality = Convert.ToString(rd["Nationality"]),
                                ot_allowed = Convert.ToString(rd["OT Allowed"]),
                                compoff_allwoed = Convert.ToString(rd["Compoff Allwoed"]),
                                punch_type = Convert.ToString(rd["Punch Type"]),
                                role_name = Convert.ToString(rd["Role Name"]),
                                weekoff = Convert.ToString(rd["WeekOff"]),
                                current_employment_type = Convert.ToString(rd["Current Employment Type"]),
                                last_working_date = Convert.ToString(rd["Last working Date"]),
                                blood_group = Convert.ToString(rd["Blood Group"]),
                                primary_contact_no = Convert.ToString(rd["Primary Contact No."]),
                                secondary_contact_no = Convert.ToString(rd["Secondary Contact No."]),
                                primary_email_id = Convert.ToString(rd["Primary Email ID"]),
                                secondary_email_id = Convert.ToString(rd["Secondary Email ID"]),
                                permanent_address_line1 = Convert.ToString(rd["Permanent Address Line 1"]),
                                permanent_address_line2 = Convert.ToString(rd["Permanent Address Line 2"]),
                                permanent_pin_code = Convert.ToString(rd["Permanent PIN Code"]),
                                permanent_country = Convert.ToString(rd["Permanent Country"]),
                                permanent_state = Convert.ToString(rd["Permanent State"]),
                                permanent_city = Convert.ToString(rd["Permanent City"]),
                                permanent_document_type = Convert.ToString(rd["Permanent Document Type"]),
                                corresponding_address_line1 = Convert.ToString(rd["Corresponding Address Line 1"]),
                                corresponding_address_line2 = Convert.ToString(rd["Corresponding Address Line 2"]),
                                corresponding_pin_code = Convert.ToString(rd["Corresponding PIN Code"]),
                                corresponding_country = Convert.ToString(rd["Corresponding Country"]),
                                corresponding_state = Convert.ToString(rd["Corresponding State"]),
                                corresponding_city = Convert.ToString(rd["Corresponding City"]),
                                corresponding_document_type = Convert.ToString(rd["Corresponding Document Type"]),
                                emergency_contact_name = Convert.ToString(rd["Emergency Contact Name"]),
                                emergency_contact_relation = Convert.ToString(rd["Emergency Contact Relation"]),
                                emergency_contact_mobile_no = Convert.ToString(rd["Emergency Contact Mobile No."]),
                                emergency_address_line1 = Convert.ToString(rd["Emergency Address Line 1"]),
                                emergency_address_line2 = Convert.ToString(rd["Emergency Address Line 2"]),
                                emergency_pin_code = Convert.ToString(rd["Emergency PIN Code"]),
                                emergency_country = Convert.ToString(rd["Emergency Country"]),
                                emergency_state = Convert.ToString(rd["Emergency State"]),
                                emergency_city = Convert.ToString(rd["Emergency City"]),
                                emergency_document_type = Convert.ToString(rd["Emergency Document Type"]),
                                uan_number = Convert.ToString(rd["UAN Number"]),
                                pf_applicable = Convert.ToString(rd["PF Applicable"]),
                                pf_number = Convert.ToString(rd["PF Number"]),
                                pf_group = Convert.ToString(rd["PF Group"]),
                                pf_ceiling = Convert.ToString(rd["PF Ceiling"]),
                                is_vpf_applicable = Convert.ToString(rd["IS VPF Applicable"]),
                                vpf_group = Convert.ToString(rd["VPF Group"]),
                                vpf_amount = Convert.ToString(rd["VPF Amount"]),
                                eps_applicable = Convert.ToString(rd["EPS Applicable"]),
                                is_esic_applicable = Convert.ToString(rd["IS ESIC Applicable"]),
                                esic_no = Convert.ToString(rd["ESIC No."]),
                                pan_card_name = Convert.ToString(rd["PAN Card Name"]),
                                pan_card_no = Convert.ToString(rd["PAN Card No."]),
                                aadhar_card_name = Convert.ToString(rd["Aadhar Card Name"]),
                                aadhar_card_no = Convert.ToString(rd["Aadhar Card No."]),
                                bank_name = Convert.ToString(rd["Bank Name"]),
                                account_no = Convert.ToString(rd["Account No."]),
                                ifsc_code = Convert.ToString(rd["IFSC Code"]),
                                branch_name = Convert.ToString(rd["Branch Name"]),
                                payment_mode = Convert.ToString(rd["Payment Mode"]),
                                manager_code = Convert.ToString(rd["Manager Code"]),
                                manager_name = Convert.ToString(rd["Manager Name"]),
                                confirmation_date = Convert.ToString(rd["Confirmation Date"]),
                                grade_name = Convert.ToString(rd["grade_name"]),
                                designation_name = Convert.ToString(rd["designation_name"]),
                                notice_period = Convert.ToString(rd["notice_period"]),
                                emp_type = Convert.ToString(rd["emp_type"]),
                            });
                        }
                        rd.Close();
                        connection.Close();
                    }
                }



                return Ok(data);
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }


        [Route("GetAttendenceSummaryReport")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EmployeeDump))]
        public IActionResult GetAttendenceSummaryReport([FromBody] LeaveReport objmodel)
        {
            ResponseMsg objResult = new ResponseMsg();

            try
            {

                objmodel.empdtl.RemoveAll(p => Convert.ToInt32(p) < 0 || Convert.ToInt32(p) == 0);

                foreach (var ids in objmodel.empdtl)
                {

                    if (!_clsCurrentUser.DownlineEmpId.Contains(Convert.ToInt32(ids)))
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = "Unauthorize Access....!!";
                        return Ok(objResult);
                    }

                    //int id = Convert.ToInt32(ids);
                }

                var id_list = String.Join(",", objmodel.empdtl);


                List<GetAttendenceSummaryReport> data = new List<GetAttendenceSummaryReport>();

                using (MySqlConnection connection = new MySqlConnection(_context._connectionString))
                {
                    using (MySqlCommand cmd = new MySqlCommand("proc_get_attendance_summary_report", connection))
                    {

                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new MySqlParameter("proc_type", 0));
                        cmd.Parameters.Add(new MySqlParameter("employee_ids", id_list));
                        cmd.Parameters.Add(new MySqlParameter("v_from_date", DateTime.Parse(objmodel.from_date)));
                        cmd.Parameters.Add(new MySqlParameter("v_to_date", DateTime.Parse(objmodel.to_date)));
                        connection.Open();
                        MySqlDataReader rd = cmd.ExecuteReader();
                        while (rd.Read())
                        {
                            data.Add(new GetAttendenceSummaryReport()
                            {

                                company_name = Convert.ToString(rd["Company Name"]),
                                employee_code = Convert.ToString(rd["Employee Code"]),
                                employee_name = Convert.ToString(rd["Employee Name"]),
                                location_name = Convert.ToString(rd["Location Name"]),
                                department_name = Convert.ToString(rd["Department Name"]),
                                designation_name = Convert.ToString(rd["Designation Name"]),
                                manager_code = Convert.ToString(rd["Manager Code"]),
                                manager_name = Convert.ToString(rd["Manager Name"]),
                                date_of_joining = Convert.ToString(rd["Date of joining"]),

                                no_of_working_Days = Convert.ToString(rd["No_of_working_Days"]),
                                no_of_days_worked = Convert.ToString(rd["No_of_days_worked"]),
                                no_of_Week_off = Convert.ToString(rd["No_of_Week_off"]),
                                no_of_Holidays = Convert.ToString(rd["No_of_Holidays"]),
                                no_of_leaves_taken = Convert.ToString(rd["No_of_leaves_taken"]),
                                no_of_Half_days_leave_Applied = Convert.ToString(rd["No_of_Half_days_leave_Applied"]),
                                no_of_days_worked_less_than_8_hours = Convert.ToString(rd["No_of_days_worked_less_that_8_hours"]),
                                no_of_days_worked_for_more_than_8_hours_but_less_than_9_hours = Convert.ToString(rd["No_of_days_worked_for_more_than_8_hours_but_less_than_9_hours"]),
                                no_of_day_applied_on_Date_Outdoor = Convert.ToString(rd["No_of_day_applied_on_Date_Outdoor"]),
                                no_of_Regularised_Days = Convert.ToString(rd["No_of_Regularised_Days"]),
                                comp_off_Availed = Convert.ToString(rd["Comp_off_Availed"]),
                                optional_Holiday_Availed = Convert.ToString(rd["Optional_Holiday_Availed"]),
                                no_Of_absent_day_Unapplied_leaves = Convert.ToString(rd["No_Of_absent_day_Unapplied_leaves"]),
                                average_Working_hours = rd["Average_Working_hours"] != DBNull.Value ? Convert.ToString(Math.Round(decimal.Parse(rd["Average_Working_hours"].ToString()), 2)) : ""
                            });
                        }
                        rd.Close();
                        connection.Close();
                    }
                }



                return Ok(data);
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }

        [Route("GetEmployeeLeaveAdjustReport")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EmployeeLeaveAdjustReport))]
        public IActionResult GetEmployeeLeaveAdjustReport([FromBody] LeaveReport objmodel)
        {
            ResponseMsg objResult = new ResponseMsg();

            try
            {

                objmodel.empdtl.RemoveAll(p => Convert.ToInt32(p) < 0 || Convert.ToInt32(p) == 0);

                foreach (var ids in objmodel.empdtl)
                {

                    if (!_clsCurrentUser.DownlineEmpId.Contains(Convert.ToInt32(ids)))
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = "Unauthorize Access....!!";
                        return Ok(objResult);
                    }

                    //int id = Convert.ToInt32(ids);
                }

                var id_list = String.Join(",", objmodel.empdtl);


                List<EmployeeLeaveAdjustReport> data = new List<EmployeeLeaveAdjustReport>();

                using (MySqlConnection connection = new MySqlConnection(_context._connectionString))
                {
                    using (MySqlCommand cmd = new MySqlCommand("proc_leave_adjust_report", connection))
                    {

                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new MySqlParameter("proc_type", 0));
                        cmd.Parameters.Add(new MySqlParameter("employee_ids", id_list));
                        cmd.Parameters.Add(new MySqlParameter("from_date", DateTime.Parse(objmodel.from_date)));
                        cmd.Parameters.Add(new MySqlParameter("to_date", DateTime.Parse(objmodel.to_date)));
                        connection.Open();
                        MySqlDataReader rd = cmd.ExecuteReader();
                        while (rd.Read())
                        {
                            data.Add(new EmployeeLeaveAdjustReport()
                            {
                                company_name = Convert.ToString(rd["Company Name"]),
                                employee_code = Convert.ToString(rd["Employee Code"]),
                                employee_name = Convert.ToString(rd["Employee Name"]),
                                location_name = Convert.ToString(rd["Location Name"]),
                                department_name = Convert.ToString(rd["Department Name"]),
                                designation_name = Convert.ToString(rd["Designation Name"]),
                                leave_type = Convert.ToString(rd["Leave Type"]),
                                adjustment_type = Convert.ToString(rd["Adjustment Type"]),
                                particular = Convert.ToString(rd["Particular"]),
                                value = Convert.ToString(rd["Value"]),
                                created_by = Convert.ToString(rd["created_by"]),
                                remark = Convert.ToString(rd["Remark"]),
                                action_date = Convert.ToString(rd["Action Date"]),
                            });
                        }
                        rd.Close();
                        connection.Close();
                    }
                }

                for (int i = 0; i < data.Count; i++)
                {
                    data[i].created_by = string.Format("{0} {1} {2}", _context.tbl_emp_officaial_sec.Where(x => x.employee_id == Convert.ToInt32(data[i].created_by) && x.is_deleted == 0).FirstOrDefault().employee_first_name, _context.tbl_emp_officaial_sec.Where(x => x.employee_id == Convert.ToInt32(data[i].created_by) && x.is_deleted == 0).FirstOrDefault().employee_middle_name, _context.tbl_emp_officaial_sec.Where(x => x.employee_id == Convert.ToInt32(data[i].created_by) && x.is_deleted == 0).FirstOrDefault().employee_last_name);
                }

                return Ok(data);
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }

        [Route("GetEmployee_Attendance_InOut_Report")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EmployeeAttendanceInOutReport))]
        public IActionResult GetEmployee_Attendance_InOut_Report([FromBody] LeaveReport objmodel)
        {
            ResponseMsg objResult = new ResponseMsg();

            try
            {

                objmodel.empdtl.RemoveAll(p => Convert.ToInt32(p) < 0 || Convert.ToInt32(p) == 0);

                foreach (var ids in objmodel.empdtl)
                {

                    if (!_clsCurrentUser.DownlineEmpId.Contains(Convert.ToInt32(ids)))
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = "Unauthorize Access....!!";
                        return Ok(objResult);
                    }

                    //int id = Convert.ToInt32(ids);
                }
                var id_list = String.Join(",", objmodel.empdtl);

                List<AttendanceInOutReport> data = new List<AttendanceInOutReport>();

                using (MySqlConnection connection = new MySqlConnection(_context._connectionString))
                {
                    using (MySqlCommand cmd = new MySqlCommand("proc_attendance_inout_report", connection))
                    {

                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new MySqlParameter("employee_ids", id_list));
                        cmd.Parameters.Add(new MySqlParameter("from_date", DateTime.Parse(objmodel.from_date)));
                        cmd.Parameters.Add(new MySqlParameter("to_date", DateTime.Parse(objmodel.to_date)));
                        connection.Open();
                        MySqlDataReader rd = cmd.ExecuteReader();

                        ExcelPackage pck = new ExcelPackage();

                        //Create the worksheet 
                        ExcelWorksheet ws = pck.Workbook.Worksheets.Add("Sheet1");

                        // Sets Headers

                        ws.Cells[1, 1].Value = "Employee Code";
                        ws.Cells[1, 2].Value = "Employee Name";
                        ws.Cells[1, 3].Value = "Company Name";
                        ws.Cells[1, 4].Value = "Branch Name";
                        ws.Cells[1, 5].Value = "Department Name";
                        ws.Cells[1, 6].Value = "Date of Joining";
                        ws.Cells[1, 7].Value = "Shift Type";
                        ws.Cells[1, 8].Value = "Shift Timing";
                        ws.Cells[1, 9].Value = "Shift Hrs";

                        ws.Cells["A1:A2"].Merge = true;
                        ws.Cells["B1:B2"].Merge = true;
                        ws.Cells["C1:C2"].Merge = true;
                        ws.Cells["D1:D2"].Merge = true;
                        ws.Cells["E1:E2"].Merge = true;
                        ws.Cells["F1:F2"].Merge = true;
                        ws.Cells["G1:G2"].Merge = true;
                        ws.Cells["H1:H2"].Merge = true;
                        ws.Cells["I1:I2"].Merge = true;
                        // Inserts Data
                        int ik = 0;

                        int cl = 6;
                        int clmonth = 10;
                        int clm = 9;
                        int clmdatewise = 9;
                        bool headermake = false;
                        while (rd.Read())
                        {
                            ws.Cells[ik + 3, 1].Value = Convert.ToString(rd["emp_code"]);
                            ws.Cells[ik + 3, 2].Value = Convert.ToString(rd["emp_name"]);
                            ws.Cells[ik + 3, 3].Value = Convert.ToString(rd["company_name"]);
                            ws.Cells[ik + 3, 4].Value = Convert.ToString(rd["branch_name"]);
                            ws.Cells[ik + 3, 5].Value = Convert.ToString(rd["dept_name"]);
                            ws.Cells[ik + 3, 6].Value = Convert.ToString(rd["doj"]);
                            ws.Cells[ik + 3, 7].Value = Convert.ToString(rd["shift_type"]);
                            ws.Cells[ik + 3, 8].Value = Convert.ToString(rd["shift_timing"]);
                            ws.Cells[ik + 3, 9].Value = Convert.ToString(rd["shift_hrs"]);

                            string empdata = Convert.ToString(rd["empdata"]);
                            string[] datewise = empdata.Split(",");

                            if (headermake == false)
                            {
                                for (var i = 0; i < datewise.Length; i++)
                                {

                                    var daymnth = datewise[i].Split(";")[0];
                                    ws.Cells[1, clmonth, 1, clmonth + 3].Merge = true;
                                    clmonth = clmonth + 4;
                                    var atdate = daymnth.Split("-");
                                    var attdate = atdate[2] + "-" + atdate[1] + "-" + atdate[0];
                                    ws.Cells[1, cl + 4].Value = attdate;

                                    ws.Cells[2, clm + 1].Value = "In Time";
                                    clm++;
                                    ws.Cells[2, clm + 1].Value = "Out Time";
                                    clm++;
                                    ws.Cells[2, clm + 1].Value = "Total Hrs";
                                    clm++;
                                    ws.Cells[2, clm + 1].Value = "Status";
                                    clm++;

                                    cl = cl + 4;
                                    headermake = true;
                                }
                            }
                            clmdatewise = 9;
                            for (var i = 0; i < datewise.Length; i++)
                            {
                                var inout = datewise[i].Split(";")[1];
                                var inoutcol = inout.Split("|");
                                var outtime = inoutcol[2];
                                var intime = inoutcol[3];
                                var totalhrs = "";
                                if (outtime != "" && intime != "")
                                {
                                    totalhrs = (Convert.ToDecimal(outtime) - Convert.ToDecimal(intime)).ToString();
                                }
                                if (totalhrs != "")
                                {
                                    totalhrs = totalhrs.Replace(".", ":");
                                }
                                ws.Cells[ik + 3, clmdatewise + 1].Value = inoutcol[0];
                                clmdatewise++;
                                ws.Cells[ik + 3, clmdatewise + 1].Value = inoutcol[1];
                                clmdatewise++;
                                ws.Cells[ik + 3, clmdatewise + 1].Value = totalhrs;
                                clmdatewise++;
                                ws.Cells[ik + 3, clmdatewise + 1].Value = inoutcol[4];
                                clmdatewise++;
                            }

                            ik++;
                            // ik_datewise++;
                        }
                        string rootFolder = _hostingEnvironment.WebRootPath + "/excelexport/";
                        string fileName = rootFolder + "AttendanceInOutReport.xlsx";

                        //Save the file in the given path.
                        Stream excelstream = System.IO.File.Create(Path.GetFullPath(fileName));
                        pck.SaveAs(excelstream);
                        excelstream.Dispose();
                        rd.Close();
                        connection.Close();
                    }
                }

                return Ok(data);
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }

        [Route("GetMonthlySummaryReport")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EmployeeMonthlySummaryReport))]
        public IActionResult GetMonthlySummaryReport([FromBody] LeaveReport objmodel)
        {
            ResponseMsg objResult = new ResponseMsg();

            try
            {

                objmodel.empdtl.RemoveAll(p => Convert.ToInt32(p) < 0 || Convert.ToInt32(p) == 0);

                foreach (var ids in objmodel.empdtl)
                {

                    if (!_clsCurrentUser.DownlineEmpId.Contains(Convert.ToInt32(ids)))
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = "Unauthorize Access....!!";
                        return Ok(objResult);
                    }

                    //int id = Convert.ToInt32(ids);
                }

                var id_list = String.Join(",", objmodel.empdtl);


                List<MonthlySummaryReport> data = new List<MonthlySummaryReport>();

                using (MySqlConnection connection = new MySqlConnection(_context._connectionString))
                {
                    using (MySqlCommand cmd = new MySqlCommand("proc_monthly_attendance_summary_report", connection))
                    {

                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new MySqlParameter("proc_type", 0));
                        cmd.Parameters.Add(new MySqlParameter("employee_ids", id_list));
                        cmd.Parameters.Add(new MySqlParameter("from_date", DateTime.Parse(objmodel.from_date)));
                        cmd.Parameters.Add(new MySqlParameter("to_date", DateTime.Parse(objmodel.to_date)));
                        connection.Open();
                        MySqlDataReader rd = cmd.ExecuteReader();
                        while (rd.Read())
                        {
                            data.Add(new MonthlySummaryReport()
                            {

                                company_name = Convert.ToString(rd["Company Name"]),
                                employee_code = Convert.ToString(rd["Employee Code"]),
                                employee_name = Convert.ToString(rd["Employee Name"]),
                                location_name = Convert.ToString(rd["Location Name"]),
                                department_name = Convert.ToString(rd["Department Name"]),
                                designation_name = Convert.ToString(rd["Designation Name"]),
                                present_count = Convert.ToString(rd["present_count"]),
                                absent_count = Convert.ToString(rd["absent_count"]),
                                leave_count = Convert.ToString(rd["leave_count"]),
                                unpaid_leave = Convert.ToString(rd["unpaid_leave"]),
                                total = Convert.ToString(rd["total"]),
                                weekly_off_count = Convert.ToString(rd["weekly_off_count"]),
                                comp_off_count = Convert.ToString(rd["comp_off_count"]),
                                holidays = Convert.ToString(rd["holidays"]),
                                total_working_days = Convert.ToString(rd["total_working_days"]),
                                total_days = Convert.ToString(rd["total_days"]),

                            });
                        }
                        rd.Close();
                        connection.Close();
                    }
                }



                return Ok(data);
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }

        [Route("GetEmployeeAttendanceMonthlyReport")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EmployeeAttendanceMonthlyReport))]
        public IActionResult GetEmployeeAttendanceMonthlyReport([FromBody] LeaveReport objmodel)
        {
            ResponseMsg objResult = new ResponseMsg();

            try
            {

                objmodel.empdtl.RemoveAll(p => Convert.ToInt32(p) < 0 || Convert.ToInt32(p) == 0);

                foreach (var ids in objmodel.empdtl)
                {

                    if (!_clsCurrentUser.DownlineEmpId.Contains(Convert.ToInt32(ids)))
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = "Unauthorize Access....!!";
                        return Ok(objResult);
                    }

                    //int id = Convert.ToInt32(ids);
                }
                string frm_month = "0";
                int frm_year = 0;
                //var id_list = String.Join(",", objmodel.empdtl);
                if (DateTime.Parse(objmodel.from_date).Month == 1)
                {
                    frm_month = "Dec";
                    frm_year = DateTime.Parse(objmodel.from_date).Year - 1;
                }
                else
                {
                    frm_month = (DateTime.Parse(objmodel.from_date).Month - 1).ToString("MMM");
                    frm_year = DateTime.Parse(objmodel.from_date).Year;
                }


                DateTime from_date = Convert.ToDateTime("26/" + frm_month + "/" + frm_year);

                if (DateTime.Parse(objmodel.from_date).Month == 1)
                {
                    frm_year = frm_year + 1;
                }
                DateTime from_to = Convert.ToDateTime("25/" + DateTime.Parse(objmodel.from_date).ToString("MMM") + "/" + frm_year);

                var data = (
                  from d in _context.tbl_daily_attendance
                  join em in _context.tbl_employee_master on d.emp_id equals em.employee_id
                  join e in _context.tbl_user_master on em.employee_id equals e.employee_id
                  join o in _context.tbl_emp_officaial_sec on d.emp_id equals o.employee_id
                  join a in _context.tbl_department_master on o.department_id equals a.department_id
                  join b in _context.tbl_location_master on o.location_id equals b.location_id
                  where
                  d.attendance_dt >= from_date && d.attendance_dt <= from_to &&
                  em.is_active == 1 && e.is_active == 1 && o.is_deleted == 0 && objmodel.empdtl.Contains(e.employee_id ?? 0)
                  select new
                  {
                      e.employee_id,
                      em.emp_code,
                      emp_name = string.Format("{0} {1} {2}", o.employee_first_name, o.employee_middle_name, o.employee_last_name),
                      a.department_name,
                      b.location_name,
                      date_of_joining = o.date_of_joining,//DateTime.Parse(o.date_of_joining.ToString("dd-MM-yyyy")),
                      d.attendance_dt,
                      d.day_status,
                      d.is_weekly_off,
                      d.is_holiday,
                      d.is_comp_off,
                      d.is_outdoor
                  }).ToList();




                List<InputRows> list = data.Select(p => new InputRows
                {
                    empID = p.employee_id ?? 0,
                    EmpCode = p.emp_code,
                    employee_first_name = p.emp_name,
                    department_name = p.department_name,
                    location_name = p.location_name,
                    date_of_joining = p.date_of_joining,
                    attendance_dt = p.attendance_dt,
                    attendancday = Convert.ToString(p.attendance_dt.Day),
                    attendancstatus = p.day_status == 1 ? "<span style='color:#8b8be8'>P</span>" : p.is_weekly_off == 1 ? "<span style='color:#b3aeae'>W/O</span>" : p.is_holiday == 1 ? "<span style='color:#9dea27'>H</span>" : p.day_status == 2 ? "<span style='color:#ef925e'>A</span>" : p.day_status == 3 ? "<span style='color:#e46ee4'>L</span>" : p.day_status == 4 ? "<span style='color:#ef925e'>Half Day</span>" : p.day_status == 5 ? "<span style='color:#e46ee4'>Half Day</span>" : p.day_status == 6 ? "<span style='color:#ef925e'>Half Day</span>" : "<span style='color:red'>A</span>",
                    is_weekly_off = p.is_weekly_off,
                    is_holiday = p.is_holiday,
                    is_comp_off = p.is_comp_off,
                    is_outdoor = p.is_outdoor,
                    day_status = p.day_status
                }).ToList();

                var present_count_list = (from t in list
                                          where t.day_status == 1
                                          group t by new { t.empID, t.day_status } into g
                                          orderby g.Count() descending
                                          select new { empID = g.Key.empID, present_count = g.Count() }).ToList();

                var absent_count_list = (from t in list
                                         where t.day_status == 2
                                         group t by new { t.empID, t.day_status } into g
                                         orderby g.Count() descending
                                         select new { empID = g.Key.empID, absent_count = g.Count() }).ToList();
                var absent_count_list_half = (from t in list
                                              where t.day_status == 4 || t.day_status == 6
                                              group t by new { t.empID, t.day_status } into g
                                              orderby g.Count() descending
                                              select new { empID = g.Key.empID, absent_count = g.Count() }).ToList();

                var paid_leave_count_list = (from t in list
                                             where t.day_status == 3
                                             group t by new { t.empID, t.day_status } into g
                                             orderby g.Count() descending
                                             select new { empID = g.Key.empID, paid_leave_count = g.Count() }).ToList();
                var paid_leave_count_list_helf = (from t in list
                                                  where t.day_status == 5 || t.day_status == 6
                                                  group t by new { t.empID, t.day_status } into g
                                                  orderby g.Count() descending
                                                  select new { empID = g.Key.empID, paid_leave_count = g.Count() }).ToList();

                var week_off_count_list = (from t in list
                                           where t.is_weekly_off == 1
                                           group t by new { t.empID, t.is_weekly_off } into g
                                           orderby g.Count() descending
                                           select new { empID = g.Key.empID, weekly_off_count = g.Count() }).ToList();
                var holiday_count_list = (from t in list
                                          where t.is_holiday == 1
                                          group t by new { t.empID, t.is_holiday } into g
                                          orderby g.Count() descending
                                          select new { empID = g.Key.empID, holiday_count = g.Count() }).ToList();
                var comp_off_count_list = (from t in list
                                           where t.is_comp_off == 1
                                           group t by new { t.empID, t.is_comp_off } into g
                                           orderby g.Count() descending
                                           select new { empID = g.Key.empID, comp_off_count = g.Count() }).ToList();
                var outdoor_count_list = (from t in list
                                          where t.is_outdoor == 1
                                          group t by new { t.empID, t.is_outdoor } into g
                                          orderby g.Count() descending
                                          select new { empID = g.Key.empID, outdoor_count = g.Count() }).ToList();

                foreach (InputRows obj_list in list)
                {
                    for (int i = 0; i < present_count_list.Count; i++)
                    {
                        if (obj_list.empID == present_count_list[i].empID)
                        {
                            var halfdaypresent_data = list.Where(p => p.empID == present_count_list[i].empID).ToList();
                            int halfdaypresent = halfdaypresent_data.Where(p => p.day_status == 4 || p.day_status == 5).Count();
                            decimal totalhalfday = Convert.ToDecimal(halfdaypresent * (0.5));
                            obj_list.present_count = present_count_list[i].present_count + totalhalfday;
                            break;
                        }
                    }

                    for (int i = 0; i < absent_count_list.Count; i++)
                    {
                        if (obj_list.empID == absent_count_list[i].empID)
                        {
                            var halfdayabsent_data = list.Where(p => p.empID == absent_count_list[i].empID).ToList();
                            int halfdayabsent = halfdayabsent_data.Where(p => p.day_status == 4 || p.day_status == 6).Count();
                            decimal totalhalfdayabsent = Convert.ToDecimal(halfdayabsent * 0.5);
                            obj_list.absent_count = absent_count_list[i].absent_count + totalhalfdayabsent;
                            break;
                        }
                    }
                    for (int i = 0; i < absent_count_list_half.Count; i++)
                    {
                        if (obj_list.empID == absent_count_list_half[i].empID)
                        {
                            var halfdayabsent_data = list.Where(p => p.empID == absent_count_list_half[i].empID).ToList();
                            int halfdayabsent = halfdayabsent_data.Where(p => p.day_status == 4 || p.day_status == 6).Count();
                            decimal totalhalfdayabsent = Convert.ToDecimal(halfdayabsent * 0.5);
                            obj_list.absent_count = obj_list.absent_count + totalhalfdayabsent;
                            break;
                        }
                    }
                    for (int i = 0; i < paid_leave_count_list.Count; i++)
                    {
                        if (obj_list.empID == paid_leave_count_list[i].empID)
                        {
                            var halfdayleave_data = list.Where(p => p.empID == paid_leave_count_list[i].empID).ToList();
                            int halfdayleave = halfdayleave_data.Where(p => p.day_status == 5 || p.day_status == 6).Count();
                            decimal totalhalfdayleave = Convert.ToDecimal(halfdayleave * 0.5);
                            obj_list.leave_count = paid_leave_count_list[i].paid_leave_count + totalhalfdayleave;
                            break;
                        }
                    }
                    for (int i = 0; i < paid_leave_count_list_helf.Count; i++)
                    {
                        if (obj_list.empID == paid_leave_count_list_helf[i].empID)
                        {
                            var halfdayleave_data = list.Where(p => p.empID == paid_leave_count_list_helf[i].empID).ToList();
                            int halfdayleave = halfdayleave_data.Where(p => p.day_status == 5 || p.day_status == 6).Count();
                            decimal totalhalfdayleave = Convert.ToDecimal(halfdayleave * 0.5);
                            obj_list.leave_count = obj_list.leave_count + totalhalfdayleave;
                            break;
                        }
                    }
                    for (int i = 0; i < week_off_count_list.Count; i++)
                    {
                        if (obj_list.empID == week_off_count_list[i].empID)
                        {
                            obj_list.weekly_off_count = week_off_count_list[i].weekly_off_count;
                            break;
                        }
                    }
                    for (int i = 0; i < holiday_count_list.Count; i++)
                    {
                        if (obj_list.empID == holiday_count_list[i].empID)
                        {
                            obj_list.holidays_count = holiday_count_list[i].holiday_count;
                            break;
                        }
                    }
                    for (int i = 0; i < comp_off_count_list.Count; i++)
                    {
                        if (obj_list.empID == comp_off_count_list[i].empID)
                        {
                            obj_list.comp_off_count = comp_off_count_list[i].comp_off_count;
                            break;
                        }
                    }
                    for (int i = 0; i < outdoor_count_list.Count; i++)
                    {
                        if (obj_list.empID == outdoor_count_list[i].empID)
                        {
                            obj_list.outdoor_count = outdoor_count_list[i].outdoor_count;
                            break;
                        }
                    }
                }

                //TimeSpan ts = objmodel.to_date - objmodel.from_date;
                //double DaysInMonth = ts.TotalDays + 1;

                int day_of_month = 25;


                int days_from_month = 0;

                if (DateTime.Parse(objmodel.from_date).Month == 1)
                {
                    days_from_month = DateTime.DaysInMonth(DateTime.Parse(objmodel.from_date).Year, DateTime.Parse(objmodel.from_date).Month);
                }
                else
                {
                    days_from_month = DateTime.DaysInMonth(DateTime.Parse(objmodel.from_date).Year, DateTime.Parse(objmodel.from_date).Month - 1);
                }



                //       int days_to_month = DateTime.DaysInMonth(objmodel.to_date.Year, objmodel.to_date.Month);


                if (days_from_month == 28)
                {
                    var result = list.Select(x => new
                    {
                        //convert cols to list of rows
                        RowData = new List<Tuple<int, string, string>>()
                        {
                        System.Tuple.Create(x.empID ,x.attendancday, x.attendancstatus),
                    }
                        //convert cols to list of rows

                    }) //get one result list
                        .SelectMany(x => x.RowData)
                        //group data by year
                        .GroupBy(x => x.Item1)
                        //finally get pivoted data != null ? Leave.TotalCredit : 0
                        .Select((grp, counter) => new
                        {
                            employee_code = list.FirstOrDefault(a => a.empID == grp.Key).EmpCode,
                            department_name = list.FirstOrDefault(a => a.empID == grp.Key).department_name,
                            location_name = list.FirstOrDefault(a => a.empID == grp.Key).location_name,
                            employee_first_name = list.FirstOrDefault(a => a.empID == grp.Key).employee_first_name,
                            present_count = list.FirstOrDefault(a => a.empID == grp.Key).present_count,
                            absent_count = list.FirstOrDefault(a => a.empID == grp.Key).absent_count,
                            leave_count = list.FirstOrDefault(a => a.empID == grp.Key).leave_count,
                            weekly_off_count = list.FirstOrDefault(a => a.empID == grp.Key).weekly_off_count,
                            holidays_count = list.FirstOrDefault(a => a.empID == grp.Key).holidays_count,
                            comp_off_count = list.FirstOrDefault(a => a.empID == grp.Key).comp_off_count,
                            outdoor_count = list.FirstOrDefault(a => a.empID == grp.Key).outdoor_count,
                            date_of_joining = list.FirstOrDefault(a => a.empID == grp.Key).date_of_joining,
                            day_in_month = days_from_month,
                            total_working_days = (list.FirstOrDefault(a => a.empID == grp.Key).present_count + list.FirstOrDefault(a => a.empID == grp.Key).leave_count + list.FirstOrDefault(a => a.empID == grp.Key).weekly_off_count + list.FirstOrDefault(a => a.empID == grp.Key).holidays_count),
                            unpaid_leaves = 0,
                            day1 = grp.Where(y => y.Item2 == (day_of_month + 1).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day2 = grp.Where(y => y.Item2 == (day_of_month + 2).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day3 = grp.Where(y => y.Item2 == (day_of_month + 3).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day4 = grp.Where(y => y.Item2 == "1").Select(y => y.Item3).FirstOrDefault(),
                            day5 = grp.Where(y => y.Item2 == "2").Select(y => y.Item3).FirstOrDefault(),
                            day6 = grp.Where(y => y.Item2 == "3").Select(y => y.Item3).FirstOrDefault(),
                            day7 = grp.Where(y => y.Item2 == "4").Select(y => y.Item3).FirstOrDefault(),
                            day8 = grp.Where(y => y.Item2 == "5").Select(y => y.Item3).FirstOrDefault(),
                            day9 = grp.Where(y => y.Item2 == "6").Select(y => y.Item3).FirstOrDefault(),
                            day10 = grp.Where(y => y.Item2 == "7").Select(y => y.Item3).FirstOrDefault(),
                            day11 = grp.Where(y => y.Item2 == "8").Select(y => y.Item3).FirstOrDefault(),
                            day12 = grp.Where(y => y.Item2 == "9").Select(y => y.Item3).FirstOrDefault(),
                            day13 = grp.Where(y => y.Item2 == "10").Select(y => y.Item3).FirstOrDefault(),
                            day14 = grp.Where(y => y.Item2 == "11").Select(y => y.Item3).FirstOrDefault(),
                            day15 = grp.Where(y => y.Item2 == "12").Select(y => y.Item3).FirstOrDefault(),
                            day16 = grp.Where(y => y.Item2 == "13").Select(y => y.Item3).FirstOrDefault(),
                            day17 = grp.Where(y => y.Item2 == "14").Select(y => y.Item3).FirstOrDefault(),
                            day18 = grp.Where(y => y.Item2 == "15").Select(y => y.Item3).FirstOrDefault(),
                            day19 = grp.Where(y => y.Item2 == "16").Select(y => y.Item3).FirstOrDefault(),
                            day20 = grp.Where(y => y.Item2 == "17").Select(y => y.Item3).FirstOrDefault(),
                            day21 = grp.Where(y => y.Item2 == "18").Select(y => y.Item3).FirstOrDefault(),
                            day22 = grp.Where(y => y.Item2 == "19").Select(y => y.Item3).FirstOrDefault(),
                            day23 = grp.Where(y => y.Item2 == "20").Select(y => y.Item3).FirstOrDefault(),
                            day24 = grp.Where(y => y.Item2 == "21").Select(y => y.Item3).FirstOrDefault(),
                            day25 = grp.Where(y => y.Item2 == "22").Select(y => y.Item3).FirstOrDefault(),
                            day26 = grp.Where(y => y.Item2 == "23").Select(y => y.Item3).FirstOrDefault(),
                            day27 = grp.Where(y => y.Item2 == "24").Select(y => y.Item3).FirstOrDefault(),
                            day28 = grp.Where(y => y.Item2 == "25").Select(y => y.Item3).FirstOrDefault(),
                        });


                    List<object> column = new List<object>();
                    column.Add(new { title = "Employee Code", data = "employee_code" });
                    column.Add(new { title = "Employee Name", data = "employee_first_name" });
                    column.Add(new { title = "Department Name", data = "department_name" });
                    column.Add(new { title = "Location Name", data = "location_name" });
                    column.Add(new { title = "Date Of Joining", data = "date_of_joining" });


                    for (int i = 1, j = 1; i <= days_from_month; i++)
                    {
                        int title = 0;

                        if (i + day_of_month <= days_from_month)
                        {
                            title = i + day_of_month;
                        }
                        else
                        {
                            title = j;
                            j++;
                        }

                        column.Add(new
                        {
                            title = title,
                            data = "day" + i
                        });
                    }

                    column.Add(new { title = "PR", data = "present_count" });
                    column.Add(new { title = "AB", data = "absent_count" });
                    column.Add(new { title = "LV", data = "leave_count" });
                    column.Add(new { title = "WO", data = "weekly_off_count" });
                    column.Add(new { title = "HO", data = "holidays_count" });
                    column.Add(new { title = "CO", data = "comp_off_count" });
                    column.Add(new { title = "Unpaid Leaves", data = "unpaid_leaves" });

                    List<int> HalfDayStatus = new List<int>();
                    HalfDayStatus.Add(4);
                    HalfDayStatus.Add(5);
                    HalfDayStatus.Add(6);



                    column.Add(new { title = "Total Working Days", data = "total_working_days" });
                    column.Add(new { title = "Days In Month", data = "day_in_month" });

                    var d2 = new { list = result, column };

                    return Ok(d2);
                }
                else if (days_from_month == 29)
                {
                    var result = list.Select(x => new
                    {
                        //convert cols to list of rows
                        RowData = new List<Tuple<int, string, string>>()
                        {
                        System.Tuple.Create(x.empID ,x.attendancday, x.attendancstatus),
                    }
                        //convert cols to list of rows

                    }) //get one result list
                        .SelectMany(x => x.RowData)
                        //group data by year
                        .GroupBy(x => x.Item1)
                        //finally get pivoted data != null ? Leave.TotalCredit : 0
                        .Select((grp, counter) => new
                        {
                            employee_code = list.FirstOrDefault(a => a.empID == grp.Key).EmpCode,
                            department_name = list.FirstOrDefault(a => a.empID == grp.Key).department_name,
                            location_name = list.FirstOrDefault(a => a.empID == grp.Key).location_name,
                            employee_first_name = list.FirstOrDefault(a => a.empID == grp.Key).employee_first_name,
                            present_count = list.FirstOrDefault(a => a.empID == grp.Key).present_count,
                            absent_count = list.FirstOrDefault(a => a.empID == grp.Key).absent_count,
                            leave_count = list.FirstOrDefault(a => a.empID == grp.Key).leave_count,
                            weekly_off_count = list.FirstOrDefault(a => a.empID == grp.Key).weekly_off_count,
                            holidays_count = list.FirstOrDefault(a => a.empID == grp.Key).holidays_count,
                            comp_off_count = list.FirstOrDefault(a => a.empID == grp.Key).comp_off_count,
                            outdoor_count = list.FirstOrDefault(a => a.empID == grp.Key).outdoor_count,
                            date_of_joining = list.FirstOrDefault(a => a.empID == grp.Key).date_of_joining,
                            day_in_month = days_from_month,
                            total_working_days = (list.FirstOrDefault(a => a.empID == grp.Key).present_count + list.FirstOrDefault(a => a.empID == grp.Key).leave_count + list.FirstOrDefault(a => a.empID == grp.Key).weekly_off_count + list.FirstOrDefault(a => a.empID == grp.Key).holidays_count),
                            unpaid_leaves = 0,
                            day1 = grp.Where(y => y.Item2 == (day_of_month + 1).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day2 = grp.Where(y => y.Item2 == (day_of_month + 2).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day3 = grp.Where(y => y.Item2 == (day_of_month + 3).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day4 = grp.Where(y => y.Item2 == (day_of_month + 4).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day5 = grp.Where(y => y.Item2 == "1").Select(y => y.Item3).FirstOrDefault(),
                            day6 = grp.Where(y => y.Item2 == "2").Select(y => y.Item3).FirstOrDefault(),
                            day7 = grp.Where(y => y.Item2 == "3").Select(y => y.Item3).FirstOrDefault(),
                            day8 = grp.Where(y => y.Item2 == "4").Select(y => y.Item3).FirstOrDefault(),
                            day9 = grp.Where(y => y.Item2 == "5").Select(y => y.Item3).FirstOrDefault(),
                            day10 = grp.Where(y => y.Item2 == "6").Select(y => y.Item3).FirstOrDefault(),
                            day11 = grp.Where(y => y.Item2 == "7").Select(y => y.Item3).FirstOrDefault(),
                            day12 = grp.Where(y => y.Item2 == "8").Select(y => y.Item3).FirstOrDefault(),
                            day13 = grp.Where(y => y.Item2 == "9").Select(y => y.Item3).FirstOrDefault(),
                            day14 = grp.Where(y => y.Item2 == "10").Select(y => y.Item3).FirstOrDefault(),
                            day15 = grp.Where(y => y.Item2 == "11").Select(y => y.Item3).FirstOrDefault(),
                            day16 = grp.Where(y => y.Item2 == "12").Select(y => y.Item3).FirstOrDefault(),
                            day17 = grp.Where(y => y.Item2 == "13").Select(y => y.Item3).FirstOrDefault(),
                            day18 = grp.Where(y => y.Item2 == "14").Select(y => y.Item3).FirstOrDefault(),
                            day19 = grp.Where(y => y.Item2 == "15").Select(y => y.Item3).FirstOrDefault(),
                            day20 = grp.Where(y => y.Item2 == "16").Select(y => y.Item3).FirstOrDefault(),
                            day21 = grp.Where(y => y.Item2 == "17").Select(y => y.Item3).FirstOrDefault(),
                            day22 = grp.Where(y => y.Item2 == "18").Select(y => y.Item3).FirstOrDefault(),
                            day23 = grp.Where(y => y.Item2 == "19").Select(y => y.Item3).FirstOrDefault(),
                            day24 = grp.Where(y => y.Item2 == "20").Select(y => y.Item3).FirstOrDefault(),
                            day25 = grp.Where(y => y.Item2 == "21").Select(y => y.Item3).FirstOrDefault(),
                            day26 = grp.Where(y => y.Item2 == "22").Select(y => y.Item3).FirstOrDefault(),
                            day27 = grp.Where(y => y.Item2 == "23").Select(y => y.Item3).FirstOrDefault(),
                            day28 = grp.Where(y => y.Item2 == "24").Select(y => y.Item3).FirstOrDefault(),
                            day29 = grp.Where(y => y.Item2 == "25").Select(y => y.Item3).FirstOrDefault(),

                        });


                    List<object> column = new List<object>();
                    column.Add(new { title = "Employee Code", data = "employee_code" });
                    column.Add(new { title = "Employee Name", data = "employee_first_name" });
                    column.Add(new { title = "Department Name", data = "department_name" });
                    column.Add(new { title = "Location Name", data = "location_name" });
                    column.Add(new { title = "Date Of Joining", data = "date_of_joining" });


                    for (int i = 1, j = 1; i <= days_from_month; i++)
                    {
                        int title = 0;

                        if (i + day_of_month <= days_from_month)
                        {
                            title = i + day_of_month;
                        }
                        else
                        {
                            title = j;
                            j++;
                        }

                        column.Add(new
                        {
                            title = title,
                            data = "day" + i
                        });
                    }

                    column.Add(new { title = "PR", data = "present_count" });
                    column.Add(new { title = "AB", data = "absent_count" });
                    column.Add(new { title = "LV", data = "leave_count" });
                    column.Add(new { title = "WO", data = "weekly_off_count" });
                    column.Add(new { title = "HO", data = "holidays_count" });
                    column.Add(new { title = "CO", data = "comp_off_count" });
                    column.Add(new { title = "Unpaid Leaves", data = "unpaid_leaves" });

                    List<int> HalfDayStatus = new List<int>();
                    HalfDayStatus.Add(4);
                    HalfDayStatus.Add(5);
                    HalfDayStatus.Add(6);



                    column.Add(new { title = "Total Working Days", data = "total_working_days" });
                    column.Add(new { title = "Days In Month", data = "day_in_month" });

                    var d2 = new { list = result, column };

                    return Ok(d2);
                }
                else if (days_from_month == 30)
                {
                    var result = list.Select(x => new
                    {
                        //convert cols to list of rows
                        RowData = new List<Tuple<int, string, string>>()
                        {
                        System.Tuple.Create(x.empID ,x.attendancday, x.attendancstatus),
                    }
                        //convert cols to list of rows

                    }) //get one result list
                        .SelectMany(x => x.RowData)
                        //group data by year
                        .GroupBy(x => x.Item1)
                        //finally get pivoted data != null ? Leave.TotalCredit : 0
                        .Select((grp, counter) => new
                        {
                            employee_code = list.FirstOrDefault(a => a.empID == grp.Key).EmpCode,
                            department_name = list.FirstOrDefault(a => a.empID == grp.Key).department_name,
                            location_name = list.FirstOrDefault(a => a.empID == grp.Key).location_name,
                            employee_first_name = list.FirstOrDefault(a => a.empID == grp.Key).employee_first_name,
                            present_count = list.FirstOrDefault(a => a.empID == grp.Key).present_count,
                            absent_count = list.FirstOrDefault(a => a.empID == grp.Key).absent_count,
                            leave_count = list.FirstOrDefault(a => a.empID == grp.Key).leave_count,
                            weekly_off_count = list.FirstOrDefault(a => a.empID == grp.Key).weekly_off_count,
                            holidays_count = list.FirstOrDefault(a => a.empID == grp.Key).holidays_count,
                            comp_off_count = list.FirstOrDefault(a => a.empID == grp.Key).comp_off_count,
                            outdoor_count = list.FirstOrDefault(a => a.empID == grp.Key).outdoor_count,
                            date_of_joining = list.FirstOrDefault(a => a.empID == grp.Key).date_of_joining,
                            day_in_month = days_from_month,
                            total_working_days = (list.FirstOrDefault(a => a.empID == grp.Key).present_count + list.FirstOrDefault(a => a.empID == grp.Key).leave_count + list.FirstOrDefault(a => a.empID == grp.Key).weekly_off_count + list.FirstOrDefault(a => a.empID == grp.Key).holidays_count),
                            unpaid_leaves = 0,
                            day1 = grp.Where(y => y.Item2 == (day_of_month + 1).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day2 = grp.Where(y => y.Item2 == (day_of_month + 2).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day3 = grp.Where(y => y.Item2 == (day_of_month + 3).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day4 = grp.Where(y => y.Item2 == (day_of_month + 4).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day5 = grp.Where(y => y.Item2 == (day_of_month + 5).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day6 = grp.Where(y => y.Item2 == "1").Select(y => y.Item3).FirstOrDefault(),
                            day7 = grp.Where(y => y.Item2 == "2").Select(y => y.Item3).FirstOrDefault(),
                            day8 = grp.Where(y => y.Item2 == "3").Select(y => y.Item3).FirstOrDefault(),
                            day9 = grp.Where(y => y.Item2 == "4").Select(y => y.Item3).FirstOrDefault(),
                            day10 = grp.Where(y => y.Item2 == "5").Select(y => y.Item3).FirstOrDefault(),
                            day11 = grp.Where(y => y.Item2 == "6").Select(y => y.Item3).FirstOrDefault(),
                            day12 = grp.Where(y => y.Item2 == "7").Select(y => y.Item3).FirstOrDefault(),
                            day13 = grp.Where(y => y.Item2 == "8").Select(y => y.Item3).FirstOrDefault(),
                            day14 = grp.Where(y => y.Item2 == "9").Select(y => y.Item3).FirstOrDefault(),
                            day15 = grp.Where(y => y.Item2 == "10").Select(y => y.Item3).FirstOrDefault(),
                            day16 = grp.Where(y => y.Item2 == "11").Select(y => y.Item3).FirstOrDefault(),
                            day17 = grp.Where(y => y.Item2 == "12").Select(y => y.Item3).FirstOrDefault(),
                            day18 = grp.Where(y => y.Item2 == "13").Select(y => y.Item3).FirstOrDefault(),
                            day19 = grp.Where(y => y.Item2 == "14").Select(y => y.Item3).FirstOrDefault(),
                            day20 = grp.Where(y => y.Item2 == "15").Select(y => y.Item3).FirstOrDefault(),
                            day21 = grp.Where(y => y.Item2 == "16").Select(y => y.Item3).FirstOrDefault(),
                            day22 = grp.Where(y => y.Item2 == "17").Select(y => y.Item3).FirstOrDefault(),
                            day23 = grp.Where(y => y.Item2 == "18").Select(y => y.Item3).FirstOrDefault(),
                            day24 = grp.Where(y => y.Item2 == "19").Select(y => y.Item3).FirstOrDefault(),
                            day25 = grp.Where(y => y.Item2 == "20").Select(y => y.Item3).FirstOrDefault(),
                            day26 = grp.Where(y => y.Item2 == "21").Select(y => y.Item3).FirstOrDefault(),
                            day27 = grp.Where(y => y.Item2 == "22").Select(y => y.Item3).FirstOrDefault(),
                            day28 = grp.Where(y => y.Item2 == "23").Select(y => y.Item3).FirstOrDefault(),
                            day29 = grp.Where(y => y.Item2 == "24").Select(y => y.Item3).FirstOrDefault(),
                            day30 = grp.Where(y => y.Item2 == "25").Select(y => y.Item3).FirstOrDefault(),

                        });


                    List<object> column = new List<object>();
                    column.Add(new { title = "Employee Code", data = "employee_code" });
                    column.Add(new { title = "Employee Name", data = "employee_first_name" });
                    column.Add(new { title = "Department Name", data = "department_name" });
                    column.Add(new { title = "Location Name", data = "location_name" });
                    column.Add(new { title = "Date Of Joining", data = "date_of_joining" });


                    for (int i = 1, j = 1; i <= days_from_month; i++)
                    {
                        int title = 0;

                        if (i + day_of_month <= days_from_month)
                        {
                            title = i + day_of_month;
                        }
                        else
                        {
                            title = j;
                            j++;
                        }

                        column.Add(new
                        {
                            title = title,
                            data = "day" + i
                        });
                    }

                    column.Add(new { title = "PR", data = "present_count" });
                    column.Add(new { title = "AB", data = "absent_count" });
                    column.Add(new { title = "LV", data = "leave_count" });
                    column.Add(new { title = "WO", data = "weekly_off_count" });
                    column.Add(new { title = "HO", data = "holidays_count" });
                    column.Add(new { title = "CO", data = "comp_off_count" });
                    column.Add(new { title = "Unpaid Leaves", data = "unpaid_leaves" });

                    List<int> HalfDayStatus = new List<int>();
                    HalfDayStatus.Add(4);
                    HalfDayStatus.Add(5);
                    HalfDayStatus.Add(6);



                    column.Add(new { title = "Total Working Days", data = "total_working_days" });
                    column.Add(new { title = "Days In Month", data = "day_in_month" });

                    var d2 = new { list = result, column };

                    return Ok(d2);
                }
                else
                {
                    var result = list.Select(x => new
                    {
                        //convert cols to list of rows
                        RowData = new List<Tuple<int, string, string>>()
                        {
                        System.Tuple.Create(x.empID ,x.attendancday, x.attendancstatus),
                    }
                        //convert cols to list of rows

                    }) //get one result list
                        .SelectMany(x => x.RowData)
                        //group data by year
                        .GroupBy(x => x.Item1)
                        //finally get pivoted data != null ? Leave.TotalCredit : 0
                        .Select((grp, counter) => new
                        {
                            employee_code = list.FirstOrDefault(a => a.empID == grp.Key).EmpCode,
                            department_name = list.FirstOrDefault(a => a.empID == grp.Key).department_name,
                            location_name = list.FirstOrDefault(a => a.empID == grp.Key).location_name,
                            employee_first_name = list.FirstOrDefault(a => a.empID == grp.Key).employee_first_name,
                            present_count = list.FirstOrDefault(a => a.empID == grp.Key).present_count,
                            absent_count = list.FirstOrDefault(a => a.empID == grp.Key).absent_count,
                            leave_count = list.FirstOrDefault(a => a.empID == grp.Key).leave_count,
                            weekly_off_count = list.FirstOrDefault(a => a.empID == grp.Key).weekly_off_count,
                            holidays_count = list.FirstOrDefault(a => a.empID == grp.Key).holidays_count,
                            comp_off_count = list.FirstOrDefault(a => a.empID == grp.Key).comp_off_count,
                            outdoor_count = list.FirstOrDefault(a => a.empID == grp.Key).outdoor_count,
                            date_of_joining = list.FirstOrDefault(a => a.empID == grp.Key).date_of_joining,
                            day_in_month = days_from_month,
                            total_working_days = (list.FirstOrDefault(a => a.empID == grp.Key).present_count + list.FirstOrDefault(a => a.empID == grp.Key).leave_count + list.FirstOrDefault(a => a.empID == grp.Key).weekly_off_count + list.FirstOrDefault(a => a.empID == grp.Key).holidays_count),
                            unpaid_leaves = 0,
                            day1 = grp.Where(y => y.Item2 == (day_of_month + 1).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day2 = grp.Where(y => y.Item2 == (day_of_month + 2).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day3 = grp.Where(y => y.Item2 == (day_of_month + 3).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day4 = grp.Where(y => y.Item2 == (day_of_month + 4).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day5 = grp.Where(y => y.Item2 == (day_of_month + 5).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day6 = grp.Where(y => y.Item2 == (day_of_month + 6).ToString()).Select(y => y.Item3).FirstOrDefault(),
                            day7 = grp.Where(y => y.Item2 == "1").Select(y => y.Item3).FirstOrDefault(),
                            day8 = grp.Where(y => y.Item2 == "2").Select(y => y.Item3).FirstOrDefault(),
                            day9 = grp.Where(y => y.Item2 == "3").Select(y => y.Item3).FirstOrDefault(),
                            day10 = grp.Where(y => y.Item2 == "4").Select(y => y.Item3).FirstOrDefault(),
                            day11 = grp.Where(y => y.Item2 == "5").Select(y => y.Item3).FirstOrDefault(),
                            day12 = grp.Where(y => y.Item2 == "6").Select(y => y.Item3).FirstOrDefault(),
                            day13 = grp.Where(y => y.Item2 == "7").Select(y => y.Item3).FirstOrDefault(),
                            day14 = grp.Where(y => y.Item2 == "8").Select(y => y.Item3).FirstOrDefault(),
                            day15 = grp.Where(y => y.Item2 == "9").Select(y => y.Item3).FirstOrDefault(),
                            day16 = grp.Where(y => y.Item2 == "10").Select(y => y.Item3).FirstOrDefault(),
                            day17 = grp.Where(y => y.Item2 == "11").Select(y => y.Item3).FirstOrDefault(),
                            day18 = grp.Where(y => y.Item2 == "12").Select(y => y.Item3).FirstOrDefault(),
                            day19 = grp.Where(y => y.Item2 == "13").Select(y => y.Item3).FirstOrDefault(),
                            day20 = grp.Where(y => y.Item2 == "14").Select(y => y.Item3).FirstOrDefault(),
                            day21 = grp.Where(y => y.Item2 == "15").Select(y => y.Item3).FirstOrDefault(),
                            day22 = grp.Where(y => y.Item2 == "16").Select(y => y.Item3).FirstOrDefault(),
                            day23 = grp.Where(y => y.Item2 == "17").Select(y => y.Item3).FirstOrDefault(),
                            day24 = grp.Where(y => y.Item2 == "18").Select(y => y.Item3).FirstOrDefault(),
                            day25 = grp.Where(y => y.Item2 == "19").Select(y => y.Item3).FirstOrDefault(),
                            day26 = grp.Where(y => y.Item2 == "20").Select(y => y.Item3).FirstOrDefault(),
                            day27 = grp.Where(y => y.Item2 == "21").Select(y => y.Item3).FirstOrDefault(),
                            day28 = grp.Where(y => y.Item2 == "22").Select(y => y.Item3).FirstOrDefault(),
                            day29 = grp.Where(y => y.Item2 == "23").Select(y => y.Item3).FirstOrDefault(),
                            day30 = grp.Where(y => y.Item2 == "24").Select(y => y.Item3).FirstOrDefault(),
                            day31 = grp.Where(y => y.Item2 == "25").Select(y => y.Item3).FirstOrDefault(),

                        });


                    List<object> column = new List<object>();
                    column.Add(new { title = "Employee Code", data = "employee_code" });
                    column.Add(new { title = "Employee Name", data = "employee_first_name" });
                    column.Add(new { title = "Department Name", data = "department_name" });
                    column.Add(new { title = "Location Name", data = "location_name" });
                    column.Add(new { title = "Date Of Joining", data = "date_of_joining" });


                    for (int i = 1, j = 1; i <= days_from_month; i++)
                    {
                        int title = 0;

                        if (i + day_of_month <= days_from_month)
                        {
                            title = i + day_of_month;
                        }
                        else
                        {
                            title = j;
                            j++;
                        }

                        column.Add(new
                        {
                            title = title,
                            data = "day" + i
                        });
                    }

                    column.Add(new { title = "PR", data = "present_count" });
                    column.Add(new { title = "AB", data = "absent_count" });
                    column.Add(new { title = "LV", data = "leave_count" });
                    column.Add(new { title = "WO", data = "weekly_off_count" });
                    column.Add(new { title = "HO", data = "holidays_count" });
                    column.Add(new { title = "CO", data = "comp_off_count" });
                    column.Add(new { title = "Unpaid Leaves", data = "unpaid_leaves" });

                    List<int> HalfDayStatus = new List<int>();
                    HalfDayStatus.Add(4);
                    HalfDayStatus.Add(5);
                    HalfDayStatus.Add(6);



                    column.Add(new { title = "Total Working Days", data = "total_working_days" });
                    column.Add(new { title = "Days In Month", data = "day_in_month" });

                    var d2 = new { list = result, column };

                    return Ok(d2);
                }
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }


    #region ** HEALTH CARD, STARTED BY SUPRIYA ON 16-07-2019 **
        [Route("Save_HealthCard")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.HelthCard))]
        public async Task<IActionResult> Save_HealthCard()
        {
            try
            {
                Response_Msg objreponse = new Response_Msg();
                var files = HttpContext.Request.Form.Files;
                var a = HttpContext.Request.Form["AllData"];
                if (a.ToString() == null)
                {
                    objreponse.StatusCode = 1;
                    objreponse.Message = "Invalid data !!";
                    return Ok(objreponse);
                }



                CommonClass com = new CommonClass();
                tbl_health_card_master objhealthcard = new tbl_health_card_master();

                objhealthcard = com.ToObjectFromJSON<tbl_health_card_master>(a.ToString());



                if (!_clsCurrentUser.CompanyId.Any(p => p == objhealthcard.company_id))
                {
                    objreponse.StatusCode = 1;
                    objreponse.Message = "Unauthorize Company Access...!";
                    return Ok(objreponse);
                }

                //string remarksRegex = @"^[a-zA-Z0-9'\s]{1,200}$";
                //Regex re = new Regex(remarksRegex);
                //if (!re.IsMatch(objhealthcard.remarks))
                //{
                //    objreponse.StatusCode = 1;
                //    objreponse.Message = "Invalid Remarks";
                //    return Ok(objreponse);
                //}




                var exist = _context.tbl_health_card_master.Where(x => x.company_id == objhealthcard.company_id && x.is_active == 1 && x.employee_id == objhealthcard.employee_id).FirstOrDefault();
                if (exist != null)
                {
                    objreponse.StatusCode = 1;
                    objreponse.Message = "Health Card Already Exists";
                    return Ok(objreponse);
                }
                else
                {

                    var get_emp_name_code = _context.tbl_emp_officaial_sec.Where(x => x.employee_id == objhealthcard.employee_id && x.is_deleted == 0).Select(p => new
                    {
                        emp_name = string.Format("{0} {1} {2}", p.employee_first_name, p.employee_middle_name, p.employee_last_name),
                        p.tbl_employee_id_details.emp_code
                    }).FirstOrDefault();



                    //file upload logic
                    if (files.Count > 0)
                    {
                        foreach (var FileData in files)
                        {
                            if (FileData != null && FileData.Length > 0)
                            {



                                var allowedExtensions = new[] { ".Jpg", ".png", ".jpg", "jpeg", ".JPG", ".PNG", ".JPG", "JPEG", ".pdf", ".PDF" };

                                var ext = Path.GetExtension(FileData.FileName); //getting the extension
                                if (allowedExtensions.Contains(ext.ToLower())) //check what type of extension  
                                {
                                    string name = Path.GetFileNameWithoutExtension(FileData.FileName); //getting file name without extension  
                                    string MyFileName = "hel" + DateTime.Now.ToString("ddMMyyyyhhmmss") + ext; //Guid.NewGuid().ToString().Replace("-", "") +


                                    var webRoot = _hostingEnvironment.WebRootPath;

                                    string currentmonth = Convert.ToString(DateTime.Now.Month).Length.ToString() == "1" ? "0" + Convert.ToString(DateTime.Now.Month) : Convert.ToString(DateTime.Now.Month);

                                    var currentyearmonth = Convert.ToString(DateTime.Now.Year) + currentmonth;


                                    if (!Directory.Exists(webRoot + "/HealthCards/" + currentyearmonth + "/"))
                                    {
                                        Directory.CreateDirectory(webRoot + "/HealthCards/" + currentyearmonth + "/");

                                    }


                                    if (!Directory.Exists(webRoot + "/HealthCards/" + currentyearmonth + "/" + get_emp_name_code.emp_code + "/"))
                                    {
                                        Directory.CreateDirectory(webRoot + "/HealthCards/" + currentyearmonth + "/" + get_emp_name_code.emp_code + "/");
                                    }

                                    var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/HealthCards/" + currentyearmonth + "/" + get_emp_name_code.emp_code + "/");

                                    //var path = Path.Combine(Directory.GetCurrentDirectory(), "/wwwroot/HealthCard/" + currentyearmonth + "/" + get_emp_name_code.emp_code + "/" + get_emp_name_code.emp_name + extension);

                                    // var path = Path.Combine(Directory.GetCurrentDirectory(), "/HealthCard/" + currentyearmonth + "/" + get_emp_name_code.emp_code + "/");
                                    //save file
                                    using (var fileStream = new FileStream(Path.Combine(path, MyFileName), FileMode.Create))
                                    {
                                        FileData.CopyTo(fileStream);
                                        // objhealthcard.health_card_path = "/wwwroot/HealthCard/" + currentyearmonth + "/" + get_emp_name_code.emp_code + "/" + MyFileName;
                                        objhealthcard.health_card_path = "/HealthCards/" + currentyearmonth + "/" + get_emp_name_code.emp_code + "/" + MyFileName;
                                    }

                                    objhealthcard.created_by = _clsCurrentUser.EmpId;
                                    objhealthcard.created_dt = DateTime.Now;
                                    objhealthcard.is_active = 1;

                                    _context.Entry(objhealthcard).State = EntityState.Added;
                                    _context.SaveChanges();

                                    objreponse.StatusCode = 0;
                                    objreponse.Message = "Health Card Successfully Uploaded";
                                }
                                else
                                {
                                    objreponse.StatusCode = 1;
                                    objreponse.Message = "Please Upload Image .jpg";
                                }
                            }
                            else
                            {
                                objreponse.StatusCode = 1;
                                objreponse.Message = "Please attach Health card";

                            }
                        }
                    }
                    else
                    {
                        objreponse.StatusCode = 1;
                        objreponse.Message = "Please select a file to upload!!!";
                        return Ok(objreponse);
                    }
                    return Ok(objreponse);


                }


            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }

        [Route("Get_health_card_master/{type}/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Get_health_card_master([FromRoute] int type, int emp_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {


                var datares = _clEmployeeDetail.EmpPermissionExists(new int[] { emp_id });
                if (!datares.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", datares.Value);
                    return Ok(objResult);
                }

                if (emp_id > 0)
                {
                    // for open employee document
                    var healthcard_path = "";
                    var data = _context.tbl_health_card_master.Where(x => x.employee_id == emp_id && _clsCurrentUser.CompanyId.Contains(x.company_id) && x.is_active == 1).Select(p => new
                    {
                        p.health_card_id,
                        p.company_id,
                        company_name = p.tbl_emp_master.tbl_employee_company_map.FirstOrDefault(q => q.is_deleted == 0).tbl_company_master.company_name,
                        p.health_card_path,
                        emp_name_code = string.Format("{0} {1} {2} ({3})", p.tbl_emp_master.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_first_name,
                                            p.tbl_emp_master.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_middle_name,
                                            p.tbl_emp_master.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_last_name,
                                            p.tbl_emp_master.emp_code),
                        p.created_dt,
                        p.remarks,
                        p.employee_id,
                    }).FirstOrDefault();


                    if (type == 0) // only detail
                    {
                        return Ok(data);
                    }
                    else if (type == 1) // open document
                    {
                        var webRoot = _hostingEnvironment.WebRootPath;

                        // string path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, data.health_card_path);

                        healthcard_path = string.Format("{0}{1}", Convert.ToString(_config["domain_url"]), data.health_card_path);

                        //healthcard_path = string.Format("{0}{1}", Convert.ToString(_config["domain_url"]), data.health_card_path);
                        var result = new { healthcard_path = healthcard_path };
                        return Ok(result);
                    }
                    else
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = "No health card available";
                        return Ok(objResult);
                    }


                }
                else
                {
                    var data = _context.tbl_health_card_master.Where(x => x.is_active == 1 && _clsCurrentUser.CompanyId.Contains(x.company_id) && _clsCurrentUser.DownlineEmpId.Contains(x.employee_id)).OrderByDescending(x => x.health_card_id).Select(p => new
                    {

                        p.health_card_id,
                        p.company_id,
                        p.tbl_emp_master.tbl_employee_company_map.FirstOrDefault(x => x.is_deleted == 0).tbl_company_master.company_name,
                        p.employee_id,
                        emp_name_code = string.Format("{0} {1} {2} ({3})", p.tbl_emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0).employee_first_name,
                        p.tbl_emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0).employee_middle_name,
                        p.tbl_emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0).employee_last_name,
                        p.tbl_emp_master.emp_code),
                        p.health_card_path,
                        p.remarks,
                        p.created_dt,
                        p.modified_dt
                    }).ToList();

                    return Ok(data);
                }
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.Message;
                return Ok(ex.Message);
            }
        }

        [Route("Get_health_card_masterByEmpId/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Get_health_card_masterByEmpId([FromRoute] int emp_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {


                var datares = _clEmployeeDetail.EmpPermissionExists(new int[] { emp_id });
                if (!datares.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", datares.Value);
                    return Ok(objResult);
                }


                var data = _context.tbl_health_card_master.Where(x => x.is_active == 1 && x.employee_id == emp_id).OrderByDescending(x => x.health_card_id).Select(p => new
                {

                    p.health_card_id,
                    p.company_id,
                    p.tbl_emp_master.tbl_employee_company_map.FirstOrDefault(x => x.is_deleted == 0).tbl_company_master.company_name,
                    p.employee_id,
                    emp_name_code = string.Format("{0} {1} {2} ({3})", p.tbl_emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && x.employee_first_name != "").employee_first_name,
                      p.tbl_emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && x.employee_middle_name != "").employee_middle_name,
                      p.tbl_emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && x.employee_last_name != "").employee_last_name,
                      p.tbl_emp_master.emp_code),
                    p.health_card_path,
                    p.remarks,
                    p.created_dt,
                    p.modified_dt
                }).ToList();

                return Ok(data);

            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }

    #endregion ** HEALTH CARD, END BY SUPRIYA ON 17-07-2019 **


        [Route("GetEmployeeInAdnOutTime/{employee_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> GetEmployeeInAdnOutTime([FromRoute] int employee_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            if (employee_id == 0)
            {
                return Ok(new { in_time = "01/01/2000 00:00", out_time = "01/01/2000 00:00" });
            }


            var datares = _clEmployeeDetail.EmpPermissionExists(new int[] { employee_id });
            if (!datares.Key)
            {
                objResult.StatusCode = 1;
                objResult.Message = string.Format("Unauthorize Access for ({0})...!", datares.Value);
                return Ok(objResult);
            }

            string in_time = "00:00";
            string out_time = "00:00";

            string att_date = DateTime.Now.ToString("yyyy-MM-dd 00:00:00");
            FromDate = Convert.ToDateTime(att_date);
            var get_in_time = _context.tbl_daily_attendance.Where(a => a.attendance_dt == FromDate && a.emp_id == employee_id).Select(a => new { a.in_time }).OrderBy(a => a.in_time).FirstOrDefault();
            if (get_in_time != null && get_in_time.in_time.ToString() != "01/01/2000 00:00")
            {
                in_time = get_in_time.in_time.ToString("dd-MM-yyyy hh:mm tt");
            }

            var get_out_time = _context.tbl_daily_attendance.Where(a => a.attendance_dt == FromDate && a.emp_id == employee_id).Select(a => new { a.out_time }).OrderByDescending(a => a.out_time).FirstOrDefault();
            if (get_out_time != null && get_out_time.out_time.ToString() != "01/01/2000 00:00")
            {
                out_time = get_out_time.out_time.ToString("dd-MM-yyyy hh:mm tt");
            }

            return Ok(new { in_time = in_time, out_time = out_time });


        }


        [Route("Get_health_card_masterByCompID/{company_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.HelthCard))]
        public IActionResult Get_health_card_masterByCompID([FromRoute] int company_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                if (!_clsCurrentUser.CompanyId.Contains(company_id))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access...!";
                    return Ok(objresponse);
                }

                var data = _context.tbl_health_card_master.Where(x => x.is_active == 1 && x.company_id == company_id && _clsCurrentUser.DownlineEmpId.Contains(x.employee_id)).OrderByDescending(x => x.health_card_id).Select(p => new
                {

                    p.health_card_id,
                    p.company_id,
                    p.tbl_emp_master.tbl_employee_company_map.FirstOrDefault(x => x.is_deleted == 0).tbl_company_master.company_name,
                    p.employee_id,
                    emp_name_code = string.Format("{0} {1} {2} ({3})", p.tbl_emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0).employee_first_name,
                       p.tbl_emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0).employee_middle_name,
                       p.tbl_emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0).employee_last_name,
                       p.tbl_emp_master.emp_code),
                    p.health_card_path,
                    p.remarks,
                    p.created_dt,
                    p.modified_dt
                }).ToList();

                return Ok(data);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }


        [Route("GetEmpDetailByEmpIDForPayrollMuster/{employee_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Payroll))]
        public IActionResult GetEmpDetailByEmpIDForPayrollMuster([FromRoute] int employee_id)
        {
            try
            {
                ResponseMsg objResult = new ResponseMsg();

                if (!_clsCurrentUser.DownlineEmpId.Any(p => p == employee_id))
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Unauthorize Access...!";
                    return Ok(objResult);
                }



                var data = _context.tbl_emp_officaial_sec.OrderByDescending(x => x.emp_official_section_id).Where(x => x.employee_id == employee_id && x.is_deleted == 0).Select(p => new
                {
                    //get only father name
                    father_or_husband = p.tbl_employee_id_details.tbl_emp_family_sec.Where(h => h.relation == "Father" && h.is_deleted == 0 && h.employee_id == employee_id).Select(h => h.name_as_per_aadhar_card).FirstOrDefault(),

                    //p.department_id,
                    //p.tbl_department_master.department_name,
                    p.tbl_employee_id_details.tbl_emp_desi_allocation.OrderByDescending(g => g.emp_grade_id).FirstOrDefault(y => y.tbl_designation_master.is_active == 1 && y.applicable_from_date.Date <= DateTime.Now.Date && DateTime.Now.Date <= y.applicable_to_date.Date).desig_id,
                    p.tbl_employee_id_details.tbl_emp_desi_allocation.OrderByDescending(g => g.emp_grade_id).FirstOrDefault(y => y.tbl_designation_master.is_active == 1 && y.applicable_from_date.Date <= DateTime.Now.Date && DateTime.Now.Date <= y.applicable_to_date.Date).tbl_designation_master.designation_name,
                    p.employee_id,
                    p.tbl_employee_id_details.emp_code
                }).FirstOrDefault();

                return Ok(data);
            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }


    #region ** START BY SUPRIYA ON 04-09-2019**

        [Route("Get_InactiveUser/{company_id}/{user_id}")]
        [Authorize(Policy = nameof(enmMenuMaster.Employee))]
        public IActionResult Get_InactiveUser([FromRoute] int company_id, int user_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                if (!_clsCurrentUser.CompanyId.Contains(company_id))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access...!";
                    return Ok(objresponse);
                }


                var data = _context.tbl_user_master.Where(x => x.is_active == 0 && x.default_company_id == company_id).Select(p => new
                {
                    p.user_id,
                    p.username,
                    p.employee_id,
                    emp_user_name = string.Format("{0} {1} {2} ({3})", p.tbl_employee_id_details.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_first_name,
                      p.tbl_employee_id_details.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_middle_name)).employee_middle_name,
                      p.tbl_employee_id_details.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_last_name)).employee_last_name,
                      p.username)
                }).ToList();

                return Ok(data);
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }

        [Route("UnBlock_EmployeeLogin")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Employee))]
        public IActionResult UnBlock_EmployeeLogin([FromBody] tbl_user_master objuser)
        {
            try
            {
                //byte isAdmin = Convert.ToByte(objuser.created_by);
                Response_Msg objresponse = new Response_Msg();

                //if (!_clsCurrentUser.DownlineEmpId.Any(p => p == objuser.employee_id))
                //{
                //    objresponse.StatusCode = 1;
                //    objresponse.Message = "Unauthorize Access...!";
                //    return Ok(objresponse);
                //}

                var exist = _context.tbl_user_master.Where(x => x.user_id == objuser.user_id && _clsCurrentUser.CompanyId.Contains(x.default_company_id) && x.username.Trim().ToUpper() == objuser.username.Trim().ToUpper()).FirstOrDefault();
                if (exist != null)
                {
                    Classes.clsUsersDetails clsUsersDetails_ = new clsUsersDetails(_context, _config, objuser.username.Trim().ToUpper(), "", objuser.created_by);

                    //clsUsersDetails_.LoadUser(0, objuser.username, "");
                    if (clsUsersDetails_._UserId != 0)
                    {
                        clsUsersDetails_.Block_UnBlock_UserId(objuser.is_logged_blocked, 0);

                        clsUsersDetails_.Active_InActive_UserId(Convert.ToByte(objuser.is_active), 0);


                        objresponse.StatusCode = 0;
                        objresponse.Message = "Process Successfully";
                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Unauthorize Access...!";
                    }


                }
                else
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Employee Detail not match";
                }


                return Ok(objresponse);
            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }

        }

        //[Route("Get_ActiveInactiveUserLog/{company_id}")]
        //[HttpGet]
        //public IActionResult Get_ActiveInactiveUserLog([FromRoute] int company_id)
        //{
        //    try
        //    {
        //        if (company_id > 0)
        //        {
        //            var data = _context.tbl_active_inactive_user_log.OrderByDescending(x=>x.acinac_user_id).Where(x => x.is_deleted == 0 && x.emp_master.tbl_employee_company_map.FirstOrDefault(y => y.is_deleted == 0).company_id == company_id).Select(p=>new {
        //                p.acinac_user_id,
        //                p.emp_id,
        //               emp_user_name=string.Format("{0} {1} {2}",p.emp_master.tbl_emp_officaial_sec.FirstOrDefault(x=>x.is_deleted==0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_first_name,
        //               p.emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_middle_name)).employee_middle_name,
        //               p.emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_last_name)).employee_last_name),
        //               p.emp_master.tbl_employee_company_map.FirstOrDefault(x=>x.is_deleted==0).tbl_company_master.company_name,
        //               p.user_master.username,
        //                p.created_on,
        //                p.modified_date,
        //                p.user_master.is_active

        //            }).ToList();

        //            return Ok(data);
        //        }
        //        else
        //        {
        //            var data = _context.tbl_active_inactive_user_log.OrderByDescending(x => x.acinac_user_id).Where(x => x.is_deleted == 0).Select(p=>new {
        //                p.acinac_user_id,
        //                p.emp_id,
        //                emp_user_name = string.Format("{0} {1} {2}", p.emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_first_name,
        //                p.emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_middle_name)).employee_middle_name,
        //                p.emp_master.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_last_name)).employee_last_name),
        //                p.emp_master.tbl_employee_company_map.FirstOrDefault(x => x.is_deleted == 0).tbl_company_master.company_name,
        //                p.user_master.username,
        //                p.created_on,
        //                p.modified_date,
        //                p.user_master.is_active
        //            }).ToList();

        //            return Ok(data);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return Ok(ex.Message);
        //    }
        //}
    #endregion ** END BY SUPRIYA ON 04-09-2019**


    #region ** START BY SUPRIYA ON 13-09-2019, UPLOAD OFFICIAL DETAILS**
        [Route("Save_EmpOfficialDetailUpload")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Upload))]
        public async Task<IActionResult> Save_EmpOfficialDetailUpload()
        {
            try
            {
                Response_Msg objresponse = new Response_Msg();
                var files = HttpContext.Request.Form.Files;
                var a = HttpContext.Request.Form["AllData"];
                if (a.ToString() == null)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Invalid data !!";
                    return Ok(objresponse);
                }

                CommonClass com = new CommonClass();
                EmployeeOfficaialSection objdetaills = new EmployeeOfficaialSection();
                objdetaills = com.ToObjectFromJSON<EmployeeOfficaialSection>(a.ToString());

                if (!_clsCurrentUser.CompanyId.Contains(objdetaills.default_company_id))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access...!";
                    return Ok(objresponse);
                }

                //open the excel using openxml sdk  
                StringBuilder excelResult = new StringBuilder();
                List<EmployeeOfficaialSection> officiallist = new List<EmployeeOfficaialSection>();

                string get_file_path = "";


                foreach (var FileData in files)
                {
                    if (FileData != null && FileData.Length > 0)
                    {
                        var allowedExtensions = new[] { ".xlsx" };

                        var ext = Path.GetExtension(FileData.FileName); //getting the extension
                        if (allowedExtensions.Contains(ext.ToLower()))//check what type of extension  
                        {
                            string name = Path.GetFileNameWithoutExtension(FileData.FileName); //getting file name without extension  

                            string company_name = _context.tbl_company_master.OrderByDescending(x => x.company_id).Where(y => y.company_id == objdetaills.default_company_id && y.is_active == 1).Select(p => p.company_name).FirstOrDefault();
                            string MyFileName = "EmpOfficialDetail_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +


                            var webRoot = _hostingEnvironment.WebRootPath;

                            string currentmonth = Convert.ToString(DateTime.Now.Month).Length.ToString() == "1" ? "0" + Convert.ToString(DateTime.Now.Month) : Convert.ToString(DateTime.Now.Month);

                            var currentyearmonth = Convert.ToString(DateTime.Now.Year) + currentmonth;


                            if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/OfficialDetail/" + currentyearmonth + "/"))
                            {
                                Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/OfficialDetail/" + currentyearmonth + "/");

                            }



                            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/OfficialDetail/" + currentyearmonth + "/");

                            //save file
                            using (var fileStream = new FileStream(Path.Combine(path, MyFileName), FileMode.Create))
                            {
                                FileData.CopyTo(fileStream);

                                get_file_path = fileStream.Name;
                                //using (SpreadsheetDocument doc = SpreadsheetDocument.Open("F:\\Documentss\\Employee Officaial Section.xlsx", false))

                            }


                        }
                        else
                        {
                            objresponse.StatusCode = 1;
                            objresponse.Message = "Please Select Only Excel File";
                            return Ok(objresponse);
                        }
                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Please Select File For Upload";
                        return Ok(objresponse);
                    }





                }


                if (!string.IsNullOrEmpty(get_file_path))
                {

                    using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                    {

                        //create the object for workbook part  
                        WorkbookPart workbookPart = doc.WorkbookPart;
                        Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();
                        //StringBuilder excelResult = new StringBuilder();


                        //array list to store employee code

                        var pathh = Path.GetTempPath();

                        //using for each loop to get the sheet from the sheetcollection  
                        foreach (Sheet thesheet in thesheetcollection)
                        {
                            excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                            excelResult.AppendLine("----------------------------------------------- ");
                            //statement to get the worksheet object by using the sheet id  
                            Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;

                            SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();



                            foreach (Row thecurrentrow in thesheetdata)
                            {
                                //skip header row
                                if (thecurrentrow.RowIndex != 1)
                                {
                                    EmployeeOfficaialSection list = new EmployeeOfficaialSection();
                                    string currentcolumnno = string.Empty;

                                    foreach (Cell thecurrentcell in thecurrentrow)
                                    {
                                        currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                        //skip sr no.
                                        if (currentcolumnno != "A")
                                        {

                                            //statement to take the integer value  
                                            string currentcellvalue = string.Empty;
                                            if (thecurrentcell.DataType != null)
                                            {
                                                if (thecurrentcell.DataType == CellValues.SharedString)
                                                {
                                                    int id;
                                                    if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                    {
                                                        SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                        if (item.Text != null)
                                                        {
                                                            //code to take the string value  
                                                            excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **

                                                            if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                                                            {
                                                                list.employee_first_name = item.Text.Text;
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                                                            {
                                                                list.employee_middle_name = item.Text.Text;
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                                                            {
                                                                list.employee_last_name = item.Text.Text;
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "E")
                                                            {
                                                                list.Gender = item.Text.Text;
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "F")
                                                            {
                                                                list.card_number = item.Text.Text;
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "G")
                                                            {

                                                                //DateTime dob = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)));
                                                                //list.date_of_birth = DateTime.ParseExact(dob.ToString(), "yyyy/MM/dd", null);
                                                                list.date_of_birth = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "H")
                                                            {
                                                                list.date_of_joining = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "I")
                                                            {
                                                                //religion
                                                                list.religionname = item.Text.Text;
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "J")
                                                            {
                                                                list.maritalname = item.Text.Text;
                                                            }

                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "K")
                                                            {
                                                                list.official_email_id = item.Text.Text;
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "L")
                                                            {
                                                                list.current_employeementname = item.Text.Text;
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "M")
                                                            {
                                                                list.locationname = item.Text.Text;
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "N")
                                                            {
                                                                list.departmentname = item.Text.Text;
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "O")
                                                            {
                                                                list.subdepartmentname = item.Text.Text;
                                                            }
                                                            else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "P")
                                                            {
                                                                list.sub_loc_name = item.Text.Text;
                                                            }
    #endregion ** END value in list**
                                                        }
                                                        else if (item.InnerText != null)
                                                        {
                                                            currentcellvalue = item.InnerText;
                                                        }
                                                        else if (item.InnerXml != null)
                                                        {
                                                            currentcellvalue = item.InnerXml;
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //read columns value
                                                excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **

                                                if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                                                {
                                                    list.employee_first_name = thecurrentcell.InnerText;
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                                                {
                                                    list.employee_middle_name = thecurrentcell.InnerText;
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "D")
                                                {
                                                    list.employee_last_name = thecurrentcell.InnerText;
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "E")
                                                {
                                                    list.Gender = thecurrentcell.InnerText;
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "F")
                                                {
                                                    list.card_number = thecurrentcell.InnerText;
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "G")
                                                {

                                                    // DateTime dobdate = DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText));

                                                    // DateTime dob= Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)));
                                                    // list.date_of_birth= DateTime.ParseExact(dob.ToString(), "dd/MM/yyyy", null);
                                                    list.date_of_birth = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "H")
                                                {
                                                    list.date_of_joining = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "I")
                                                {
                                                    list.religionname = thecurrentcell.InnerText;
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "J")
                                                {
                                                    list.maritalname = thecurrentcell.InnerText;
                                                }

                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "K")
                                                {
                                                    list.official_email_id = thecurrentcell.InnerText;
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "L")
                                                {
                                                    list.current_employeementname = thecurrentcell.InnerText;
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "M")
                                                {
                                                    list.locationname = thecurrentcell.InnerText;
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "N")
                                                {
                                                    list.departmentname = thecurrentcell.InnerText;
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "O")
                                                {
                                                    list.subdepartmentname = thecurrentcell.InnerText;
                                                }
                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "P")
                                                {
                                                    list.sub_loc_name = thecurrentcell.InnerText;
                                                }
    #endregion ** END value in list**

                                            }


                                        }



                                    }
                                    excelResult.AppendLine();
                                    list.created_by = objdetaills.created_by;
                                    list.default_company_id = objdetaills.default_company_id;
                                    officiallist.Add(list);
                                }

                            }
                            excelResult.Append("");
                            // Console.WriteLine(excelResult.ToString());
                            // Console.ReadLine();
                        }
                    }




                    var data = excelResult.ToString();
                    var data1 = officiallist;

                    var dataaa = CheckEmpofficialDetailsfromexcel(officiallist);
                    var duplicate_dtl = dataaa.duplicatedetaillist;
                    var missing_dtll = dataaa.missingdetaillist;
                    var adddblistt = dataaa.adddblist;

                    if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                    {
                        return Ok(dataaa);
                    }
                    else
                    {

                        int returnnvalue = SaveEmpDetailFromExcel(adddblistt);

                        if (returnnvalue == -1)
                        {
                            objresponse.StatusCode = 0;
                            objresponse.Message = "Employee Codee Already Exist...!";

                            return Ok(objresponse);

                        }
                        else if (returnnvalue == -2)
                        {
                            string url = Convert.ToString(_config["License_domain_url"]) + objdetaills.default_company_id + "/" + Convert.ToString(_config["Instance_ID"]);// sample url

                            int total_no_of_employee = 0;

                            using (HttpClient client = new HttpClient())
                            {
                                total_no_of_employee = Convert.ToInt32(client.GetStringAsync(url).Result);
                            }

                            objresponse.StatusCode = 1;
                            objresponse.Message = "Employee limit exceed !!! Employee Range of Selected Company is:" + total_no_of_employee + "";
                            return Ok(objresponse);
                        }
                        else
                        {
                            objresponse.StatusCode = 0;
                            objresponse.Message = "Successfully saved";
                            return Ok(objresponse);

                        }


                    }

                }
                else
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Something went wrong..";
                    return Ok(objresponse);
                }
                // return Ok(data);
            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }

        public EmployeeDetailListt CheckEmpofficialDetailsfromexcel(List<EmployeeOfficaialSection> list)
        {
            List<EmployeeOfficaialSection> missingdetaillist = new List<EmployeeOfficaialSection>();
            List<EmployeeOfficaialSection> adddblist = new List<EmployeeOfficaialSection>();
            List<EmployeeOfficaialSection> duplicatedetaillist = new List<EmployeeOfficaialSection>();
            StringBuilder MissingDtlMessage = new StringBuilder();

            try
            {
                using (var checktrans = _context.Database.BeginTransaction())
                {
                    try
                    {
                        MissingDtlMessage.Append("");
                        int i = 1;
                        foreach (var item in list)
                        {
                            bool _validd = false;

                            int marital_status_id = 0;
                            int _religion_id = 0;
                            int _location_id = 0;
                            int employement_type_id = 0;
                            int _department_id = 0;
                            int _subdepartment_id = 0;
                            int gender_id = 0;
                            int sub_loc_id = 0;

                            MissingDtlMessage.Append(i + " Detail:-");

                            if (string.IsNullOrEmpty(item.employee_first_name))
                            {
                                // _first_name = true;
                                _validd = true;
                                MissingDtlMessage.Append(" First Name,");
                            }

                            if (string.IsNullOrEmpty(item.employee_last_name))
                            {
                                // _last_name = true;
                                _validd = true;
                                MissingDtlMessage.Append(" Last Name,");
                            }

                            //var _emp_code_exist = _context.tbl_employee_master.OrderByDescending(x=>x.employee_id).Where(a => a.emp_code == item.emp_code && a.tbl_employee_company_map.FirstOrDefault(x=>x.is_deleted==0).company_id==item.default_company_id).FirstOrDefault();
                            //if (_emp_code_exist != null)
                            //{
                            //    exist_emp_code = true;
                            //}

                            if (string.IsNullOrEmpty(item.Gender))
                            {
                                // _gender = true;
                                _validd = true;
                                MissingDtlMessage.Append(" Gender,");
                            }
                            else
                            {
                                // 1 for Female , 2 Male , 3 Other 
                                gender_id = item.Gender.Trim().ToUpper() == "FEMALE" ? 1 : item.Gender.Trim().ToUpper() == "MALE" ? 2 : item.Gender.Trim().ToUpper() == "OTHER" || item.Gender.Trim().ToUpper() == "OTHERS" ? 3 : 0;
                                if (gender_id == 0)
                                {
                                    // _gender = true;
                                    _validd = true;
                                    MissingDtlMessage.Append(" Gender,");
                                }
                            }


                            var _card_no = _context.tbl_emp_officaial_sec.OrderByDescending(x => x.emp_official_section_id).Where(a => a.card_number.Trim() == item.card_number.Trim() && _clsCurrentUser.CompanyId.Contains(item.default_company_id)).FirstOrDefault();
                            if (_card_no != null)
                            {
                                // _exist_card_no = true;
                                _validd = true;
                                MissingDtlMessage.Append(" Card No.,");
                            }


                            if (string.IsNullOrEmpty(item.religionname))
                            {
                                // _religion = true;
                                _validd = true;
                                MissingDtlMessage.Append(" Religion,");
                            }
                            else
                            {
                                _religion_id = _context.tbl_religion_master.OrderByDescending(x => x.religion_id).Where(x => x.religion_name.Trim().ToUpper() == item.religionname.Trim().ToUpper()).Select(g => g.religion_id).FirstOrDefault();
                                if (_religion_id == 0)
                                {
                                    // _religion = true;
                                    _validd = true;
                                    MissingDtlMessage.Append(" Religion,");
                                }
                            }



                            //1 for Married and 2 for Single
                            if (String.IsNullOrEmpty(item.maritalname))
                            {
                                //_blank_marital_status = true;
                                _validd = true;
                                MissingDtlMessage.Append(" Marital Status,");
                            }
                            else
                            {
                                marital_status_id = item.maritalname.Trim().ToUpper() == "MARRIED" ? 1 : item.maritalname.Trim().ToUpper() == "SINGLE" || item.maritalname.Trim().ToUpper() == "UNMARRIED" ? 2 : 0;

                                if (marital_status_id == 0)
                                {
                                    //_blank_marital_status = true;
                                    _validd = true;
                                    MissingDtlMessage.Append(" Marital Status,");
                                }
                            }



                            var _official_email_id = _context.tbl_emp_officaial_sec.OrderByDescending(x => x.emp_official_section_id).Where(a => a.official_email_id == item.official_email_id && a.tbl_employee_id_details.tbl_employee_company_map.FirstOrDefault(x => x.is_deleted == 0).company_id == item.default_company_id).FirstOrDefault();
                            if (_official_email_id != null)
                            {
                                // exist_official_email = true;
                                _validd = true;
                                MissingDtlMessage.Append(" Official Email ID,");
                            }


                            if (string.IsNullOrEmpty(item.current_employeementname))
                            {
                                //_employement_type = true;
                                _validd = true;
                                MissingDtlMessage.Append(" Employement Type,");
                            }
                            else
                            {
                                //1 temporary,2 Probation,3 Confirmend, 4 Contract, 10 notice,99 FNF,(100 terminate     no entry coreposnding to 100   )
                                employement_type_id = item.current_employeementname.Trim().ToUpper() == "TEMPORARY" ? 1 : item.current_employeementname.Trim().ToUpper() == "PROBATION" ? 2 :
                                    item.current_employeementname.Trim().ToUpper() == "CONFIRMED" || item.current_employeementname.Trim().ToUpper() == "CONFIRMEND" || item.current_employeementname.Trim().ToUpper() == "CONFIRM" || item.current_employeementname.Trim().ToUpper() == "PERMANENT" ? 3 :
                                    item.current_employeementname.Trim().ToUpper() == "CONTRACT" ? 4 : item.current_employeementname.Trim().ToUpper() == "NOTICED" || item.current_employeementname.Trim().ToUpper() == "NOTICE" ? 10 : item.current_employeementname.Trim().ToUpper() == "FNF" ? 99 : (item.current_employeementname.Trim().ToUpper() == "TERMINATE" || item.current_employeementname.Trim().ToUpper() == "SEPARATED" || item.current_employeementname.Trim().ToUpper() == "SEPARATE") ? 100 : 0;

                                if (employement_type_id == 0)
                                {
                                    //_employement_type = true;
                                    _validd = true;
                                    MissingDtlMessage.Append(" Employement Type,");
                                }
                            }


                            if (string.IsNullOrEmpty(item.locationname))
                            {
                                // _location = true;
                                _validd = true;
                                MissingDtlMessage.Append(" Location,");
                            }
                            else
                            {
                                _location_id = _context.tbl_location_master.OrderByDescending(x => x.location_id).Where(a => a.location_name.Trim().ToUpper() == item.locationname.Trim().ToUpper() && a.company_id == item.default_company_id && a.is_active == 1).Select(a => a.location_id).FirstOrDefault();
                                if (_location_id == 0)
                                {
                                    //_location = true;
                                    _validd = true;
                                    MissingDtlMessage.Append(" Location,");
                                }
                            }


                            if (string.IsNullOrEmpty(item.departmentname))
                            {
                                // _department = true;
                                _validd = true;
                                MissingDtlMessage.Append(" Department,");
                            }
                            else
                            {
                                _department_id = _context.tbl_department_master.OrderByDescending(x => x.department_id).Where(a => (a.department_name.Trim().ToUpper() == item.departmentname.Trim().ToUpper() ||
                                a.department_short_name.Trim().ToUpper() == item.departmentname.Trim().ToUpper()) && a.company_id == item.default_company_id && a.is_active == 1).Select(a => a.department_id).FirstOrDefault();

                                if (_department_id == 0)
                                {
                                    // _department = true;
                                    _validd = true;
                                    MissingDtlMessage.Append(" Department,");
                                }
                            }


                            if (string.IsNullOrEmpty(item.subdepartmentname))
                            {
                                //_subdepartment = true;
                                _validd = true;
                                MissingDtlMessage.Append(" SubDepartment,");
                            }
                            else
                            {
                                _subdepartment_id = _context.tbl_sub_department_master.OrderByDescending(x => x.sub_department_id).Where(a => (a.sub_department_name.Trim().ToUpper() == item.subdepartmentname.Trim().ToUpper() ||
                                   a.sub_department_code.Trim().ToUpper() == item.subdepartmentname.Trim().ToUpper() && a.department_id == _department_id && a.is_active == 1) && a.company_id == item.default_company_id && a.is_active == 1).Select(p => p.sub_department_id).FirstOrDefault();

                                if (_subdepartment_id == 0)
                                {
                                    // _subdepartment = true;
                                    _validd = true;
                                    MissingDtlMessage.Append(" SubDepartment,");
                                }
                            }


                            if (string.IsNullOrEmpty(item.sub_loc_name))
                            {
                                _validd = true;
                                MissingDtlMessage.Append(" SubLocation is missing, ");
                            }
                            else
                            {
                                var dtl = _context.tbl_sub_location_master.OrderByDescending(y => y.sub_location_id).Where(x => x.is_active == 1 && x.location_id == _location_id && x.location_name.Trim().ToUpper() == item.sub_loc_name.Trim().ToUpper()).FirstOrDefault();
                                if (dtl != null)
                                {
                                    sub_loc_id = dtl.sub_location_id;
                                }

                                if (sub_loc_id == 0)
                                {
                                    _validd = true;
                                    MissingDtlMessage.Append(" Please enter same SubLocation as available in official section against location, ");
                                }
                            }


                            //if (_first_name || _last_name || exist_official_email || _exist_card_no || _religion || _blank_marital_status || _employement_type || _location || _department || _subdepartment || _gender)
                            if (_validd)
                            {
                                EmployeeOfficaialSection objlist = new EmployeeOfficaialSection();
                                //objlist.emp_code = item.emp_code;
                                objlist.employee_first_name = item.employee_first_name;
                                objlist.employee_middle_name = item.employee_middle_name;
                                objlist.employee_last_name = item.employee_last_name;
                                objlist.Gender = item.Gender;
                                objlist.card_number = item.card_number;
                                objlist.religionname = item.religionname;
                                objlist.maritalname = item.maritalname;
                                objlist.official_email_id = item.official_email_id;
                                objlist.current_employeementname = item.current_employeementname;
                                objlist.locationname = item.locationname;
                                objlist.departmentname = item.departmentname;
                                objlist.subdepartmentname = item.subdepartmentname;
                                objlist.sub_locaiton_id = sub_loc_id;

                                missingdetaillist.Add(objlist);

                                i++; //increase serial no 

                                MissingDtlMessage.Append("Missing/Invalid/Already Exist Detail </br>");
                            }
                            else
                            {
                                //if (list.Where(b => b.emp_code == item.emp_code || b.card_number == item.card_number || b.official_email_id == item.official_email_id).Count>0)

                                bool _checkduplicate = adddblist.Any(x => x.card_number == item.card_number || x.official_email_id == item.official_email_id);

                                if (_checkduplicate) //If any field detail is found duplicate in list
                                {
                                    EmployeeOfficaialSection objduplist = new EmployeeOfficaialSection();


                                    // objduplist.emp_code = item.emp_code;
                                    objduplist.card_number = item.card_number;
                                    objduplist.official_email_id = item.official_email_id;

                                    duplicatedetaillist.Add(objduplist);

                                    MissingDtlMessage.Append("Duplicate Entry in Excel</br>");

                                    i++; //increase serial no 
                                }
                                else
                                {
                                    EmployeeOfficaialSection objdblist = new EmployeeOfficaialSection();

                                    // objdblist.emp_code = item.emp_code;
                                    objdblist.employee_first_name = item.employee_first_name;
                                    objdblist.employee_middle_name = item.employee_middle_name;
                                    objdblist.employee_last_name = item.employee_last_name;
                                    objdblist.Gender = gender_id.ToString();
                                    objdblist.card_number = item.card_number;
                                    objdblist.date_of_birth = item.date_of_birth;
                                    objdblist.date_of_joining = item.date_of_joining;
                                    objdblist.religion_id = _religion_id;
                                    objdblist.marital_status = Convert.ToByte(marital_status_id);
                                    objdblist.official_email_id = item.official_email_id;
                                    objdblist.current_employee_type = Convert.ToByte(employement_type_id);
                                    objdblist.location_id = _location_id;
                                    objdblist.department_id = _department_id;
                                    objdblist.sub_dept_id = _subdepartment_id;
                                    objdblist.created_date = DateTime.Now;
                                    objdblist.created_by = item.created_by;
                                    objdblist.default_company_id = item.default_company_id;
                                    objdblist.location_id = sub_loc_id;
                                    adddblist.Add(objdblist);

                                    i++;
                                }

                            }

                        }

                    }
                    catch (Exception ex)
                    {

                    }


                }


            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missingdetaillist = missingdetaillist, duplicatedetaillist = duplicatedetaillist, adddblist = adddblist, MissingDtlMessage = MissingDtlMessage.ToString() };
        }


        public int SaveEmpDetailFromExcel(List<EmployeeOfficaialSection> objdblist)
        {
            try
            {
                bool _rollbanck = false;
                int totalempinExcel = objdblist.Count;

                string url = Convert.ToString(_config["License_domain_url"]) + objdblist[0].default_company_id + "/" + Convert.ToString(_config["Instance_ID"]);// sample url



                int total_no_of_employee = 0;

                using (HttpClient client = new HttpClient())
                {
                    total_no_of_employee = Convert.ToInt32(client.GetStringAsync(url).Result);
                }

                // total no of employee already added
                int get_exicest_emp = _context.tbl_user_master.Where(a => a.default_company_id == objdblist[0].default_company_id).Count();

                //remaining no of employee 
                int remaining_no_of_emp = total_no_of_employee - get_exicest_emp;

                //agar remining emp utne add ho sakte h jitne list mai h to add karenge
                if (remaining_no_of_emp >= totalempinExcel)
                {
                    using (var trans = _context.Database.BeginTransaction())
                    {
                        try
                        {

                            for (int i = 0; i < objdblist.Count; i++)
                            {

    #region Get Employee Id And Genrate Employee Code 
                                //Get data from company master
                                var data = (from a in _context.tbl_company_emp_setting.Where(x => x.is_active == 1 && x.company_id == objdblist[i].default_company_id)
                                            select new
                                            {
                                                a.prefix_for_employee_code,
                                                a.number_of_character_for_employee_code,
                                                a.current_range,
                                                a.from_range,
                                                a.to_range
                                            }).ToList();


                                string prefix_for_employee_code = "";
                                int number_of_character_for_employee_code = 0;
                                int current_range = 0;
                                int from_range = 0;
                                int to_range = 0;

                                foreach (var a in data)
                                {
                                    prefix_for_employee_code = a.prefix_for_employee_code;
                                    number_of_character_for_employee_code = a.number_of_character_for_employee_code;
                                    current_range = a.current_range;
                                    from_range = a.from_range;
                                    to_range = a.to_range;
                                }

                                //Employee Id
                                int emp_id = current_range + 1;

                                //number of character
                                string TotalChar = prefix_for_employee_code.PadRight(number_of_character_for_employee_code, '0');

                                //Remove Last Character
                                string myString = TotalChar.Substring(0, TotalChar.Length - 1);

                                //Mail Empaloyee Code
                                string EmployeeCode = myString + emp_id;

    #endregion

    #region Save Data in Employee Master

                                tbl_employee_master employee_master_check = new tbl_employee_master();


                                // Check Company Name
                                if (employee_master_check.emp_code == EmployeeCode)
                                {
                                    //objResult.Message = "Employee Codee Already Exist...!";
                                    //objResult.StatusCode = 0;
                                    trans.Rollback();
                                    _rollbanck = true;
                                    break;

                                }


                                // tbl_employee_master
                                tbl_employee_master employee_master = new tbl_employee_master();


                                employee_master.emp_code = EmployeeCode;


                                employee_master.is_active = 1;
                                employee_master.created_by = _clsCurrentUser.EmpId;
                                employee_master.created_date = DateTime.Now;
                                employee_master.last_modified_by = objdblist[i].created_by;
                                employee_master.last_modified_date = DateTime.Now;


                                //Save data in tbl_employee_master
                                _context.tbl_employee_master.Add(employee_master);

    #endregion

    #region update company setting table 

                                // tbl_company_emp_setting

                                tbl_company_emp_setting tbl_company_emp_setting = (from a in _context.tbl_company_emp_setting select a).Where(x => x.company_id == objdblist[i].default_company_id).First();
                                //Create new obj of tbl_shift_details table for log


                                tbl_company_emp_setting.current_range = emp_id;
                                tbl_company_emp_setting.last_genrated = DateTime.Now;
                                _context.tbl_company_emp_setting.Attach(tbl_company_emp_setting);
                                _context.Entry(tbl_company_emp_setting).State = EntityState.Modified;

    #endregion

                                var employee_id = employee_master.employee_id;

                                string encrypwd = AESEncrytDecry.EncryptStringAES(EmployeeCode);

    #region Save Data In User Master
                                tbl_user_master tbl_user_master = new tbl_user_master();
                                tbl_user_master.username = EmployeeCode;
                                tbl_user_master.password = encrypwd;//EmployeeCode;
                                tbl_user_master.user_type = 1;
                                tbl_user_master.is_active = 1;
                                tbl_user_master.created_by = _clsCurrentUser.EmpId;
                                tbl_user_master.created_date = DateTime.Now;
                                tbl_user_master.last_modified_by = _clsCurrentUser.EmpId;
                                tbl_user_master.last_modified_date = DateTime.Now;
                                tbl_user_master.default_company_id = objdblist[i].default_company_id;
                                tbl_user_master.employee_id = employee_id;


                                //Save data in tbl_user_master
                                _context.tbl_user_master.Add(tbl_user_master);

    #endregion

                                var user_idd = tbl_user_master.user_id;

    #region Save Data in Employment Type Master

                                DateTime DurationStartPeriod = DateTime.Now; //Convert.ToDateTime("2018-01-01");
                                DateTime DurationEndPeriod = Convert.ToDateTime("2500-01-01");

                                List<object> _emptype = GetEmployementtypee();

                                // double DurationDays = 180;


                                List<tbl_employment_type_master> tbl_employment_type_master_ = new List<tbl_employment_type_master>();

                                tbl_employment_type_master_ = _emptype.Select(p => new tbl_employment_type_master
                                {

                                    employee_id = employee_id,
                                    employment_type = Convert.ToByte(p),
                                    //duration_days = 0,
                                    //duration_start_period = DurationStartPeriod,
                                    //duration_end_period = DurationEndPeriod,
                                    //actual_duration_days = 0,
                                    //actual_duration_start_period = DurationStartPeriod,
                                    //actual_duration_end_period = DurationEndPeriod,
                                    is_deleted = 0,
                                    created_by = _clsCurrentUser.EmpId,
                                    created_date = DateTime.Now,
                                    last_modified_by = 0,
                                    last_modified_date = Convert.ToDateTime("01-01-2000"),
                                    effective_date = DateTime.Now,
                                }).ToList();

                                _context.tbl_employment_type_master.AddRange(tbl_employment_type_master_);

    #endregion


    #region Save Data In Employee Officaial Sec
                                // tbl_emp_officaial_sec
                                tbl_emp_officaial_sec emp_officaial_sec = new tbl_emp_officaial_sec();
                                emp_officaial_sec.employee_id = employee_id;
                                // emp_officaial_sec.card_number = "0";
                                // emp_officaial_sec.gender = 0;
                                //supriya start
                                emp_officaial_sec.employee_first_name = objdblist[i].employee_first_name;
                                emp_officaial_sec.employee_middle_name = objdblist[i].employee_middle_name;
                                emp_officaial_sec.employee_last_name = objdblist[i].employee_last_name;
                                emp_officaial_sec.gender = Convert.ToInt32(objdblist[i].Gender);
                                emp_officaial_sec.card_number = objdblist[i].card_number;
                                //emp_officaial_sec.date_of_birth = objdblist[i].date_of_birth;
                                //emp_officaial_sec.date_of_joining = objdblist[i].date_of_joining;
                                emp_officaial_sec.religion_id = objdblist[i].religion_id;
                                emp_officaial_sec.marital_status = objdblist[i].marital_status;
                                emp_officaial_sec.official_email_id = objdblist[i].official_email_id;
                                //emp_officaial_sec.current_employee_type = objdblist[i].current_employee_type;
                                //emp_officaial_sec.location_id = objdblist[i].location_id;
                                //emp_officaial_sec.department_id = objdblist[i].department_id;
                                //emp_officaial_sec.sub_dept_id = objdblist[i].sub_dept_id;
                                emp_officaial_sec.is_deleted = 0;
                                //emp_officaial_sec.user_type = 6;
                                //emp_officaial_sec.sub_location_id = objdblist[i].sub_locaiton_id;
                                emp_officaial_sec.created_by = _clsCurrentUser.EmpId;
                                emp_officaial_sec.created_date = DateTime.Now;
                                //supriya end
                                //Save data in tbl_user_master
                                _context.tbl_emp_officaial_sec.Add(emp_officaial_sec);

    #endregion


    #region Save Data in emp company maping 
                                //tbl_employee_company_map
                                tbl_employee_company_map tbl_emp_comp_map = new tbl_employee_company_map();
                                tbl_emp_comp_map.employee_id = employee_id;
                                tbl_emp_comp_map.company_id = objdblist[i].default_company_id;
                                tbl_emp_comp_map.is_deleted = 0;
                                tbl_emp_comp_map.created_by = _clsCurrentUser.EmpId;
                                tbl_emp_comp_map.last_modified_by = objdblist[i].created_by;
                                tbl_emp_comp_map.created_date = DateTime.Now;
                                tbl_emp_comp_map.last_modified_date = DateTime.Now;
                                tbl_emp_comp_map.is_default = true;

                                //Save data in tbl_employee_company_map
                                _context.tbl_employee_company_map.Add(tbl_emp_comp_map);
    #endregion


    #region Save data in emp desig allocation
                                tbl_emp_desi_allocation emp_desi_alloc = new tbl_emp_desi_allocation();
                                emp_desi_alloc.employee_id = employee_id;
                                emp_desi_alloc.applicable_from_date = DateTime.Now;
                                emp_desi_alloc.applicable_to_date = Convert.ToDateTime("2500-01-01");

                                //Save data in tbl_emp_desi_allocation
                                _context.tbl_emp_desi_allocation.Add(emp_desi_alloc);

    #endregion


    #region Save Data in emp_manager
                                tbl_emp_manager emp_manager = new tbl_emp_manager();
                                emp_manager.employee_id = employee_id;
                                emp_manager.applicable_from_date = DateTime.Now;
                                emp_manager.applicable_to_date = Convert.ToDateTime("2500-01-01");
                                emp_manager.is_deleted = 0;
                                //Save data in tbl_emp_managers
                                _context.tbl_emp_manager.Add(emp_manager);
    #endregion


    #region Save Emp Grade Allocation
                                tbl_emp_grade_allocation emp_grade_allocation = new tbl_emp_grade_allocation();
                                emp_grade_allocation.employee_id = employee_id;
                                emp_grade_allocation.applicable_from_date = DateTime.Now;
                                emp_grade_allocation.applicable_to_date = Convert.ToDateTime("2500-01-01");


                                //Save data in tbl_emp_managers
                                _context.tbl_emp_grade_allocation.Add(emp_grade_allocation);

    #endregion


    #region Save Emp Personal Sec
                                tbl_emp_personal_sec emp_personal_sec = new tbl_emp_personal_sec();
                                emp_personal_sec.employee_id = employee_id;
                                emp_personal_sec.blood_group = 0;
                                emp_personal_sec.permanent_pin_code = 0;
                                emp_personal_sec.permanent_city = 0;
                                emp_personal_sec.permanent_state = 0;
                                emp_personal_sec.permanent_city = 0;
                                emp_personal_sec.corresponding_pin_code = 0;
                                emp_personal_sec.corresponding_city = 0;
                                emp_personal_sec.corresponding_state = 0;
                                emp_personal_sec.corresponding_country = 0;
                                emp_personal_sec.is_emg_same_as_permanent = 0;
                                emp_personal_sec.emergency_contact_pin_code = 0;
                                emp_personal_sec.emergency_contact_city = 0;
                                emp_personal_sec.emergency_contact_state = 0;
                                emp_personal_sec.emergency_contact_country = 0;
                                emp_personal_sec.is_deleted = 2;
                                emp_personal_sec.created_by = _clsCurrentUser.EmpId;
                                //emp_personal_sec.last_modified_by = objdblist[i].created_by;
                                emp_personal_sec.created_date = DateTime.Now;
                                // emp_personal_sec.last_modified_date = DateTime.Now;

                                //Save data in tbl_emp_personal_sec
                                _context.tbl_emp_personal_sec.Add(emp_personal_sec);

    #endregion



    #region Save Emp Role Sec 
                                tbl_user_role_map emp_role_map = new tbl_user_role_map();
                                emp_role_map.role_id = 6; // as a user
                                emp_role_map.user_id = user_idd;
                                emp_role_map.is_deleted = 0;
                                emp_role_map.created_by = _clsCurrentUser.EmpId;
                                emp_role_map.created_date = DateTime.Now;



                                _context.tbl_user_role_map.Add(emp_role_map);
    #endregion

                                _context.SaveChanges();

                            }



                            if (_rollbanck)
                            {
                                return -1;
                            }
                            else
                            {
                                trans.Commit();
                                return 0;
                            }


                        }
                        catch (Exception ex)
                        {
                            trans.Rollback();
                        }


                    }

                    return 0;
                }
                else
                {
                    //return remaining_no_of_emp;
                    return -2;
                }
            }
            catch (Exception ex)
            {
                return -2;
            }

        }


    #endregion ** END BY SUPRIYA ON 17-09-2019, UPLOAD PERSONAL AND OFFICIAL DETAILS **





    #region ** START BY SUPRIYA ON 18-09-2019,UPLOAD PERSONAL DETAIL FROM EXCEL**

        //[Route("Save_EmpPersonalDetailUpload")]
        //[HttpPost]
        ////[Authorize(Policy = "3038")]
        //public async Task<IActionResult> Save_EmpPersonalDetailUpload()
        //{
        //    try
        //    {
        //        Response_Msg objresponse = new Response_Msg();
        //        var files = HttpContext.Request.Form.Files;
        //        var a = HttpContext.Request.Form["AllData"];
        //        if (a.ToString() == null)
        //        {
        //            objresponse.StatusCode = 1;
        //            objresponse.Message = "Invalid data !!";
        //            return Ok(objresponse);
        //        }

        //        CommonClass com = new CommonClass();
        //        EmployeeOfficaialSection objdetaills = new EmployeeOfficaialSection();
        //        objdetaills = com.ToObjectFromJSON<EmployeeOfficaialSection>(a.ToString());

        //        //open the excel using openxml sdk  
        //        StringBuilder excelResult = new StringBuilder();
        //        List<EmployeePersonalSection> personallist = new List<EmployeePersonalSection>();

        //        string get_file_path = "";




        //        foreach (var FileData in files)
        //        {

        //            if (FileData != null && FileData.Length > 0)
        //            {
        //                var allowedExtensions = new[] { ".xlsx" };

        //                var ext = Path.GetExtension(FileData.FileName); //getting the extension
        //                if (allowedExtensions.Contains(ext.ToLower()))
        //                {
        //                    string name = Path.GetFileNameWithoutExtension(FileData.FileName); //getting file name without extension  

        //                    string company_name = _context.tbl_company_master.OrderByDescending(x => x.company_id).Where(y => y.company_id == objdetaills.default_company_id && y.is_active == 1).Select(p => p.company_name).FirstOrDefault();
        //                    string MyFileName = "EmpPersonalDetail_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +


        //                    var webRoot = _hostingEnvironment.WebRootPath;

        //                    string currentmonth = Convert.ToString(DateTime.Now.Month).Length.ToString() == "1" ? "0" + Convert.ToString(DateTime.Now.Month) : Convert.ToString(DateTime.Now.Month);

        //                    var currentyearmonth = Convert.ToString(DateTime.Now.Year) + currentmonth;


        //                    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/PersonalDetail/" + currentyearmonth + "/"))
        //                    {
        //                        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/PersonalDetail/" + currentyearmonth + "/");

        //                    }



        //                    var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/PersonalDetail/" + currentyearmonth + "/");

        //                    //save file
        //                    using (var fileStream = new FileStream(Path.Combine(path, MyFileName), FileMode.Create))
        //                    {
        //                        FileData.CopyTo(fileStream);

        //                        get_file_path = fileStream.Name;
        //                    }
        //                }
        //                else
        //                {
        //                    objresponse.StatusCode = 1;
        //                    objresponse.Message = "Please Select Only Excel File";
        //                    return Ok(objresponse);
        //                }

        //            }
        //            else
        //            {
        //                objresponse.StatusCode = 1;
        //                objresponse.Message = "Please Select File For Upload";
        //                return Ok(objresponse);
        //            }


        //        }

        //        if (!string.IsNullOrEmpty(get_file_path))
        //        {

        //            using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
        //            {

        //                //create the object for workbook part  
        //                WorkbookPart workbookPart = doc.WorkbookPart;
        //                Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();
        //                //StringBuilder excelResult = new StringBuilder();


        //                //array list to store employee code

        //                var pathh = Path.GetTempPath();

        //                //using for each loop to get the sheet from the sheetcollection  
        //                foreach (Sheet thesheet in thesheetcollection)
        //                {
        //                    excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
        //                    excelResult.AppendLine("----------------------------------------------- ");
        //                    //statement to get the worksheet object by using the sheet id  
        //                    Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


        //                    SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();



        //                    foreach (Row thecurrentrow in thesheetdata)
        //                    {
        //                        //skip header row
        //                        if (thecurrentrow.RowIndex != 1)
        //                        {
        //                            EmployeePersonalSection list = new EmployeePersonalSection();
        //                            string currentcolumnnoo = string.Empty;
        //                            foreach (Cell thecurrentcell in thecurrentrow)
        //                            {
        //                                currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
        //                                //skip sr no.
        //                                if (currentcolumnnoo != "A")
        //                                {

        //                                    //statement to take the integer value  
        //                                    string currentcellvalue = string.Empty;
        //                                    if (thecurrentcell.DataType != null)
        //                                    {
        //                                        if (thecurrentcell.DataType == CellValues.SharedString)
        //                                        {
        //                                            int id;
        //                                            if (Int32.TryParse(thecurrentcell.InnerText, out id))
        //                                            {
        //                                                SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
        //                                                if (item.Text != null)
        //                                                {
        //                                                    //code to take the string value  
        //                                                    excelResult.Append(item.Text.Text + " ");
        //                                                    #region ** START Add value in list **
        //                                                    if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
        //                                                    {
        //                                                        list.emp_code = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
        //                                                    {
        //                                                        list.pan_card_name = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "D")
        //                                                    {
        //                                                        list.pan_card_number = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "E")
        //                                                    {
        //                                                        list.aadha_card_name = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "F")
        //                                                    {
        //                                                        list.aadha_card_number = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "G")
        //                                                    {
        //                                                        list.blood_group_name = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "H")
        //                                                    {
        //                                                        list.primary_contact_number = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "I")
        //                                                    {
        //                                                        list.primary_email_id = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "J")
        //                                                    {
        //                                                        list.permanent_address_line_one = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "K")
        //                                                    {
        //                                                        list.country = item.Text.Text;
        //                                                    }

        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "L")
        //                                                    {
        //                                                        list.state = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "M")
        //                                                    {
        //                                                        list.city = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "N")
        //                                                    {
        //                                                        list.permanent_pin_code = Convert.ToInt32(item.Text.Text);
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "O")
        //                                                    {
        //                                                        list.emergency_contact_name = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "P")
        //                                                    {
        //                                                        list.emergency_contact_relation = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "Q")
        //                                                    {
        //                                                        list.emergency_contact_mobile_number = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "R")
        //                                                    {
        //                                                        list.bank_name = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "S")
        //                                                    {
        //                                                        list.bank_acc = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "T")
        //                                                    {
        //                                                        list.ifsc_code = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "U")
        //                                                    {
        //                                                        list.uan = item.Text.Text.Trim().ToUpper();
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "V")
        //                                                    {
        //                                                        list.esic = item.Text.Text.Trim().ToUpper();
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "W")
        //                                                    {
        //                                                        list.pf_app_name = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "X")
        //                                                    {
        //                                                        list.pf_number = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "Y")
        //                                                    {
        //                                                        list.pf_group_name = item.Text.Text;
        //                                                    }
        //                                                    else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "Z")
        //                                                    {
        //                                                        list.pf_ceilling = Convert.ToDouble(item.Text.Text);
        //                                                    }
        //                                                    #endregion ** END value in list**
        //                                                }
        //                                                else if (item.InnerText != null)
        //                                                {
        //                                                    currentcellvalue = item.InnerText;
        //                                                }
        //                                                else if (item.InnerXml != null)
        //                                                {
        //                                                    currentcellvalue = item.InnerXml;
        //                                                }
        //                                            }
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        //read columns value
        //                                        excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
        //                                        #region ** START Add value in list **

        //                                        if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
        //                                        {
        //                                            list.emp_code = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
        //                                        {
        //                                            list.pan_card_name = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "D")
        //                                        {
        //                                            list.pan_card_number = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "E")
        //                                        {
        //                                            list.aadha_card_name = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "F")
        //                                        {
        //                                            list.aadha_card_number = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "G")
        //                                        {
        //                                            list.blood_group_name = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "H")
        //                                        {
        //                                            list.primary_contact_number = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "I")
        //                                        {
        //                                            list.primary_email_id = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "J")
        //                                        {
        //                                            //religion
        //                                            list.permanent_address_line_one = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "K")
        //                                        {
        //                                            list.country = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "L")
        //                                        {
        //                                            list.state = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "M")
        //                                        {
        //                                            list.city = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "N")
        //                                        {
        //                                            list.permanent_pin_code = Convert.ToInt32(thecurrentcell.InnerText);
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "O")
        //                                        {
        //                                            list.emergency_contact_name = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "P")
        //                                        {
        //                                            list.emergency_contact_relation = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "Q")
        //                                        {
        //                                            list.emergency_contact_mobile_number = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "R")
        //                                        {
        //                                            list.bank_name = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "S")
        //                                        {
        //                                            list.bank_acc = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "T")
        //                                        {
        //                                            list.ifsc_code = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "U")
        //                                        {
        //                                            list.uan = thecurrentcell.InnerText.Trim().ToUpper();
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "V")
        //                                        {
        //                                            list.esic = thecurrentcell.InnerText.Trim().ToUpper();
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "W")
        //                                        {
        //                                            list.pf_app_name = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "X")
        //                                        {
        //                                            list.pf_number = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "Y")
        //                                        {
        //                                            list.pf_group_name = thecurrentcell.InnerText;
        //                                        }
        //                                        else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "Z")
        //                                        {
        //                                            list.pf_ceilling = Convert.ToDouble(thecurrentcell.InnerText);
        //                                        }
        //                                        #endregion ** END value in list**

        //                                    }


        //                                }



        //                            }
        //                            excelResult.AppendLine();
        //                            list.created_by = objdetaills.created_by;
        //                            list.default_company_id = objdetaills.default_company_id;
        //                            personallist.Add(list);
        //                        }

        //                    }
        //                    excelResult.Append("");
        //                }
        //            }

        //            var data = excelResult.ToString();
        //            var data1 = personallist;

        //            var dataaa = CheckEmpPersonalDetailsfromexcel(personallist);
        //            var duplicate_dtl = dataaa.duplicatepersonaldtl;
        //            var missing_dtll = dataaa.missingpersonaldtl;
        //            var adddblistt = dataaa.adddbpersonaldtl;
        //            var missingDtlMessage = dataaa.MissingDtlMessage;

        //            if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
        //            {
        //                return Ok(dataaa);
        //            }
        //            else
        //            {
        //                int returnnvalue = SaveEmpPersonalDetailFromExcel(adddblistt);

        //                if (returnnvalue < 0)
        //                {
        //                    objresponse.StatusCode = 1;
        //                    objresponse.Message = "Something went wrong in Excel Detail";
        //                    return Ok(objresponse);

        //                }
        //                else if (returnnvalue == 1)
        //                {
        //                    objresponse.StatusCode = 1;
        //                    objresponse.Message = "Server is Busy Please try after some time..";
        //                    return Ok(objresponse);
        //                }
        //                else
        //                {
        //                    objresponse.StatusCode = 0;
        //                    objresponse.Message = "Successfully saved";
        //                    return Ok(objresponse);
        //                }



        //            }


        //        }
        //        else
        //        {
        //            objresponse.StatusCode = 1;
        //            objresponse.Message = "Something went wrong";
        //            return Ok(objresponse);
        //        }


        //        // return Ok(data);
        //    }
        //    catch (Exception ex)
        //    {
        //        return Ok("Something went Wrong");
        //    }
        //}


        public EmployeeDetailListt CheckEmpPersonalDetailsfromexcel(List<EmployeePersonalSection> list)
        {
            List<EmployeePersonalSection> missingdetaillist = new List<EmployeePersonalSection>();
            List<EmployeePersonalSection> adddblist = new List<EmployeePersonalSection>();
            List<EmployeePersonalSection> duplicatedetaillist = new List<EmployeePersonalSection>();
            Response_Msg objresponse = new Response_Msg();





            StringBuilder MissingDtlMessage = new StringBuilder();
            try
            {
                MissingDtlMessage.Append("");

                using (var checktrans = _context.Database.BeginTransaction())
                {

                    try
                    {
                        for (int i = 0; i < list.Count; i++)
                        {
                            bool exist_ = false;


                            int _bloodgroup_id = 0;
                            int _country_idd = 0;
                            int _state_id = 0;
                            int _city_id = 0;
                            int _relation_id = 0;
                            int employee_id = 0;


                            MissingDtlMessage.Append(list[i].emp_code + " Detail:-");

                            if (string.IsNullOrEmpty(list[i].emp_code))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append("Emp Code is missing,");
                            }
                            else
                            {
                                var _emp_code_exist = _context.tbl_employee_master.Where(a => a.emp_code.Trim().ToLower() == list[i].emp_code.Trim().ToLower()).FirstOrDefault();
                                if (_emp_code_exist != null)
                                {
                                    employee_id = _context.tbl_employee_master.Where(x => x.emp_code.Trim().ToLower() == list[i].emp_code.Trim().ToLower()
                                    && x.tbl_employee_company_map.FirstOrDefault(g => g.is_deleted == 0).company_id == list[i].default_company_id && x.is_active == 1).Select(p => p.employee_id).FirstOrDefault();
                                    if (employee_id == 0)
                                    {
                                        // _emp_code_not_exist = true;
                                        exist_ = true;
                                        MissingDtlMessage.Append("Emp Code not exist,");
                                    }
                                }
                                else
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Emp Code not exist,");
                                    // _emp_code_not_exist = true;

                                }
                            }


                            if (string.IsNullOrEmpty(list[i].blood_group_name))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" Blood Group,");
                            }
                            else
                            {
                                _bloodgroup_id = list[i].blood_group_name.Trim().ToUpper() == "A+" ? 1 : list[i].blood_group_name.Trim().ToUpper() == "O+" ? 2 : list[i].blood_group_name.Trim().ToUpper() == "B+" ? 3
                                    : list[i].blood_group_name.Trim().ToUpper() == "AB+" ? 4 : list[i].blood_group_name.Trim().ToUpper() == "A-" ? 5 : list[i].blood_group_name.Trim().ToUpper() == "O+" ? 6 :
                                    list[i].blood_group_name.Trim().ToUpper() == "B-" ? 7 : list[i].blood_group_name.Trim().ToUpper() == "AB-" ? 8 : 0;

                                if (_bloodgroup_id == 0)
                                {
                                    // _exist_bloodgroup = true;
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Invalid Blood Group,");
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].primary_contact_number))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" Primary Contact Number ,");
                            }
                            else
                            {
                                string conatct_val = @"^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$";

                                Regex re = new Regex(conatct_val);
                                if (!re.IsMatch(list[i].primary_contact_number))
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append("Invalid Contact Number ,");
                                }
                            }


                            if (string.IsNullOrEmpty(list[i].primary_email_id))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" Primary Email ID ,");
                            }
                            else
                            {
                                var email_exist = _context.tbl_emp_personal_sec.OrderByDescending(x => x.emp_personal_section_id).Where(a => a.primary_email_id == list[i].primary_email_id.Trim() && _clsCurrentUser.CompanyId.Contains(list[i].default_company_id)).FirstOrDefault();

                                if (email_exist != null)
                                {
                                    // _existprimaryemailid = true;

                                    exist_ = true;
                                    MissingDtlMessage.Append(" Email ID already exist,");
                                }
                                else
                                {
                                    //validate primary email

                                    string primaryemail = @"^([0-9a-zA-Z]([-_\\.]*[0-9a-zA-Z]+)*)@([0-9a-zA-Z]([-_\\.]*[0-9a-zA-Z]+)*)[\\.]([a-zA-Z]{2,9})$";


                                    Regex re = new Regex(primaryemail);
                                    if (!re.IsMatch(list[i].primary_email_id))
                                    {
                                        exist_ = true;
                                        MissingDtlMessage.Append(" Invalid Email ID,");
                                    }
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].permanent_address_line_one))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" Permanent Address ,");
                            }
                            else
                            {//validate address
                                string address = @"^[a-zA-Z0-9'\s'\#'\-'\/]{1,200}$";
                                Regex re = new Regex(address);
                                if (!re.IsMatch(list[i].permanent_address_line_one))
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Permanent Address,");
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].country))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" Country Cannot be Blank,");
                            }
                            else
                            {
                                _country_idd = _context.tbl_country.OrderByDescending(x => x.country_id).Where(x => x.is_deleted == 0 && x.name == list[i].country).Select(p => p.country_id).FirstOrDefault();

                                // _country_id = _context.tbl_country.OrderByDescending(x => x.country_id).Where(a => a.name.ToUpper() == list[i].country.ToUpper() && a.is_deleted == 0).Select(p => p.country_id).FirstOrDefault();
                                if (_country_idd == 0)
                                {
                                    //   _countrynotexit = true;
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Invalid Country,");
                                }
                            }


                            if (string.IsNullOrEmpty(list[i].state))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" State Cannot be Blank,");
                            }
                            else
                            {
                                _state_id = _context.tbl_state.OrderByDescending(x => x.state_id).Where(a => a.name.Trim().ToUpper() == list[i].state.Trim().ToUpper() && a.country_id == _country_idd && a.is_deleted == 0).Select(p => p.state_id).FirstOrDefault();
                                if (_state_id == 0)
                                {
                                    // _statenotexist = true;
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Invalid State,");
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].city))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" City Cannot be Blank,");
                            }
                            else
                            {
                                _city_id = _context.tbl_city.OrderByDescending(x => x.city_id).Where(a => a.name.Trim().ToUpper() == list[i].city.Trim().ToUpper() && a.state_id == _state_id && a.is_deleted == 0).Select(x => x.city_id).FirstOrDefault();
                                if (_city_id == 0)
                                {
                                    // _citynotexist = true;
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Invalid City,");
                                }
                            }

                            if (list[i].permanent_pin_code.ToString() == "" || list[i].permanent_pin_code == 0 || list[i].permanent_pin_code == 0)
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" Permanent PIN Code,");
                            }


                            if (string.IsNullOrEmpty(list[i].emergency_contact_name))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" Emergency Contact Name,");
                            }
                            else
                            {
                                //validate Emergency contact name
                                string emergency_contact = @"^[a-zA-Z'\s]{1,50}$";
                                Regex re = new Regex(emergency_contact);
                                if (!re.IsMatch(list[i].emergency_contact_name))
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Invalid Emergency Contact Name,");
                                }
                            }

                            //In Relation 1 for father,2 for Mother,3 for husband, 4 for wife,5 for Brother,6 for sister, 7 for child
                            if (string.IsNullOrEmpty(list[i].emergency_contact_relation))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" Relation,");
                            }
                            else
                            {
                                _relation_id = list[i].emergency_contact_relation.Trim().ToUpper() == "FATHER" ? 1 : list[i].emergency_contact_relation.Trim().ToUpper() == "MOTHER" ? 2
                                    : list[i].emergency_contact_relation.Trim().ToUpper() == "HUSBAND" ? 3 : list[i].emergency_contact_relation.Trim().ToUpper() == "WIFE" ? 4 :
                                    list[i].emergency_contact_relation.Trim().ToUpper() == "BROTHER" ? 5 : list[i].emergency_contact_relation.Trim().ToUpper() == "SISTER" ? 6 :
                                    list[i].emergency_contact_relation.Trim().ToUpper() == "CHILD" ? 7 : 0;
                                if (_relation_id == 0)
                                {
                                    // _relationnotexist = true;
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Invalid Relation Name");
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].emergency_contact_mobile_number))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" Emergency Contact Number,");
                            }
                            else
                            {
                                string emer_conatct = @"^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$";

                                Regex re = new Regex(emer_conatct);
                                if (!re.IsMatch(list[i].emergency_contact_mobile_number))
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append("Invalid Emergency Contact Number ,");
                                }
                            }

                            if (exist_)
                            {
                                EmployeePersonalSection objlist = new EmployeePersonalSection();
                                objlist.employee_id = employee_id;
                                objlist.emp_code = list[i].emp_code;

                                objlist.blood_group_name = list[i].blood_group_name;
                                objlist.primary_contact_number = list[i].primary_contact_number;
                                objlist.primary_email_id = list[i].primary_email_id;
                                objlist.permanent_address_line_one = list[i].permanent_address_line_one;
                                objlist.permanent_country = _country_idd;
                                objlist.permanent_state = _state_id;
                                objlist.permanent_city = _city_id;
                                objlist.permanent_pin_code = list[i].permanent_pin_code;
                                objlist.emergency_contact_name = list[i].emergency_contact_name;
                                objlist.emergency_contact_relation = list[i].emergency_contact_relation;
                                objlist.emergency_contact_mobile_number = list[i].emergency_contact_mobile_number;

                                missingdetaillist.Add(objlist);

                                MissingDtlMessage.Append("</br>");
                            }
                            else
                            {

                                // bool _checkduplicate = adddblist.Any(x => x.emp_code == list[i].emp_code || x.pan_card_number == list[i].pan_card_number || x.aadha_card_number == list[i].aadha_card_number || x.primary_email_id == list[i].primary_email_id);

                                bool _checkduplicate = adddblist.Any(x => x.emp_code == list[i].emp_code || x.primary_email_id == list[i].primary_email_id);


                                if (_checkduplicate) // Add in this list if any one field detail is found duplicate in list
                                {
                                    EmployeePersonalSection objduplist = new EmployeePersonalSection();

                                    objduplist.emp_code = list[i].emp_code;
                                    duplicatedetaillist.Add(objduplist);
                                    MissingDtlMessage.Append(" Details Must be Unique</br>");
                                }
                                else
                                {
                                    EmployeePersonalSection objlist = new EmployeePersonalSection();
                                    objlist.employee_id = employee_id;
                                    objlist.emp_code = list[i].emp_code;
                                    objlist.blood_group = Convert.ToByte(_bloodgroup_id);
                                    objlist.primary_contact_number = list[i].primary_contact_number;
                                    objlist.primary_email_id = list[i].primary_email_id;
                                    objlist.permanent_address_line_one = list[i].permanent_address_line_one;
                                    objlist.permanent_country = _country_idd;
                                    objlist.permanent_state = _state_id;
                                    objlist.permanent_city = _city_id;
                                    objlist.permanent_pin_code = list[i].permanent_pin_code;
                                    objlist.emergency_contact_name = list[i].emergency_contact_name;
                                    objlist.emergency_contact_relation = list[i].emergency_contact_relation;
                                    objlist.emergency_contact_mobile_number = list[i].emergency_contact_mobile_number;

                                    adddblist.Add(objlist);
                                }

                            }

                        }

                        checktrans.Commit();
                    }
                    catch (Exception ex)
                    {
                        checktrans.Rollback();
                    }
                }


            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missingpersonaldtl = missingdetaillist, duplicatepersonaldtl = duplicatedetaillist, adddbpersonaldtl = adddblist, MissingDtlMessage = MissingDtlMessage.ToString() };
        }


    #endregion ** END BY SUPRIYA ON 19-09-2019,UPLOAD PERSONAL DETAIL FROM EXCEL**


        //get grade master data
        [Route("GetAllEmployeeByCompany/{company_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Employee))]
        public IActionResult GetAllEmployeeByCompany([FromRoute] int company_id)
        {
            Response_Msg objResult = new Response_Msg();
            try
            {

                if (!_clsCurrentUser.CompanyId.Any(p => p == company_id))
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Unauthorize Access...!";
                    return Ok(objResult);
                }

                var result = from em in _context.tbl_employee_master
                             join e_of in _context.tbl_emp_officaial_sec on em.employee_id equals e_of.employee_id
                             join um in _context.tbl_user_master on em.employee_id equals um.employee_id
                             join cm in _context.tbl_company_master on um.default_company_id equals cm.company_id
                             where e_of.is_deleted == 0 && um.default_company_id == company_id
                             select new
                             {
                                 employee_id = em.employee_id,
                                 employee_code = em.emp_code,
                                 employee_first_name = e_of.employee_first_name,
                                 employee_middle_name = e_of.employee_middle_name,
                                 employee_last_name = e_of.employee_last_name,
                                 card_number = e_of.card_number,
                                 //date_of_joining = e_of.date_of_joining,
                                 //date_of_birth = e_of.date_of_birth,
                                 official_email_id = e_of.official_email_id,
                                 username = um.username,
                                 password = um.password,
                                 company_name = cm.company_name,
                                 created_date = em.created_date,
                                 um_user_id = um.user_id,
                                 um_is_active = em.is_active,
                                 um_is_logged_blocked = um.is_logged_blocked,
                                 emp_code = em.emp_code,
                                 emp_name = string.Format("{0} {1} {2}", e_of.employee_first_name, e_of.employee_middle_name, e_of.employee_last_name),
                                 //e_of.tbl_department_master.department_name,
                                 e_of.tbl_employee_id_details.tbl_emp_desi_allocation.OrderByDescending(x => x.emp_grade_id).FirstOrDefault(x => x.applicable_from_date.Date <= DateTime.Now.Date && DateTime.Now.Date <= x.applicable_to_date.Date).tbl_designation_master.designation_name,
                                 e_of.tbl_employee_id_details.tbl_emp_grade_allocation.OrderByDescending(x => x.emp_grade_id).FirstOrDefault(x => x.applicable_from_date.Date <= DateTime.Now.Date && DateTime.Now.Date <= x.applicable_to_date.Date).tbl_grade_master.grade_name,

                             };


                if (result == null)
                {
                    objResult.Message = "Record Not Found...!";
                    objResult.StatusCode = 1;
                    return Ok(objResult);
                }
                else
                {
                    return Ok(result);
                }

            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }


    #region **START BY SUPRIYA ON 20-11-2019,UPLOAD EMPLOYEE DOCUMENTS**
        [Route("Save_EmpDocuments")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Upload))]
        public async Task<IActionResult> Save_EmpDocuments()
        {
            try
            {
                Response_Msg objresponse = new Response_Msg();
                var files = HttpContext.Request.Form.Files;
                var a = HttpContext.Request.Form["AllData"];
                if (a.ToString() == null)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Invalid data !!";
                    return Ok(objresponse);
                }

                CommonClass com = new CommonClass();
                tbl_emp_documents objempdoc = new tbl_emp_documents();
                objempdoc = com.ToObjectFromJSON<tbl_emp_documents>(a.ToString());

                if (objempdoc.doc_type_id == 0)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Invalid Document Type...!";
                    return Ok(objresponse);
                }

                if (!_clsCurrentUser.DownlineEmpId.Any(p => p == objempdoc.emp_id))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access...!";
                    return Ok(objresponse);
                }

                if (!_clsCurrentUser.CompanyId.Contains(objempdoc.company_id))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access...!";
                    return Ok(objresponse);
                }

                if (!string.IsNullOrEmpty(objempdoc.doc_no))
                {
                    string remarksRegex = @"^[a-zA-Z0-9'\s]{1,200}$";
                    Regex re = new Regex(remarksRegex);

                    if (!re.IsMatch(objempdoc.doc_no))
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Invalid Remarks";
                        return Ok(objresponse);
                    }

                    if (objempdoc.doc_no.Length > 20)
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Document no could not be greater than 20";
                        return Ok(objresponse);

                    }
                }


                if (!string.IsNullOrEmpty(objempdoc.remarks))
                {
                    string remarksRegex = @"^[a-zA-Z0-9'\s]{1,200}$";
                    Regex re = new Regex(remarksRegex);

                    if (!re.IsMatch(objempdoc.remarks))
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Invalid Remarks";
                        return Ok(objresponse);
                    }


                    if (objempdoc.remarks.Length > 200)
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Remarks could not be greater than 200";
                        return Ok(objresponse);

                    }
                }



                var exist = _context.tbl_emp_documents.Where(x => x.company_id == objempdoc.company_id && x.emp_id == objempdoc.emp_id && x.doc_type_id == objempdoc.doc_type_id && x.is_deleted == 0).FirstOrDefault();
                if (exist != null)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Document Already Upload";
                    return Ok(objresponse);
                }

                //if (files.Count <= 0)
                //{
                //    objresponse.StatusCode = 1;
                //    objresponse.Message = "Please Attach Files";
                //    return Ok(objresponse);
                //}

                using (var trans = _context.Database.BeginTransaction())
                {
                    try
                    {
                        List<tbl_emp_documents> empdoclist = new List<tbl_emp_documents>();

                        var get_emp_name_code = _context.tbl_emp_officaial_sec.Where(x => x.employee_id == objempdoc.emp_id && x.is_deleted == 0).Select(p => new
                        {
                            emp_name = string.Format("{0} {1} {2}", p.employee_first_name, p.employee_middle_name, p.employee_last_name),
                            p.tbl_employee_id_details.emp_code,
                            p.tbl_employee_id_details.tbl_employee_company_map.FirstOrDefault(x => x.is_deleted == 0).tbl_company_master.company_name
                        }).FirstOrDefault();


                        string doc_type = _context.tbl_document_type_master.FirstOrDefault(x => x.is_deleted == 0 && x.company_id == objempdoc.company_id && x.doc_type_id == objempdoc.doc_type_id).doc_name;

                        int i = 0;

                        if (!string.IsNullOrEmpty(doc_type))
                        {
                            tbl_emp_documents objdoc = new tbl_emp_documents();
                            Random random = new Random();

                            //file upload logic
                            if (files.Count > 0)
                            {
                                foreach (var FileData in files)
                                {


                                    if (FileData != null && FileData.Length > 0)
                                    {
                                        // int num = new Random().Next(1000, 9999);


                                        int num = random.Next(10000);

                                        var allowedExtensions = new[] { ".Jpg", ".pdf", "jpeg", ".jpg", ".Pdf", "Jpeg" };

                                        var ext = Path.GetExtension(FileData.FileName); //getting the extension
                                        if (allowedExtensions.Contains(ext.ToLower())) //check what type of extension  
                                        {
                                            i++;
                                            string name = Path.GetFileNameWithoutExtension(FileData.FileName); //getting file name without extension  
                                                                                                               /* string MyFileName = get_emp_name_code.emp_code+"_"+objempdoc.doc_type_id+"_"+i+ ext;*/ //Guid.NewGuid().ToString().Replace("-", "") +
                                                                                                                                                                                                         // string MyFileName = objempdoc.emp_id + "_" + doc_type + "_" + i + ext;

                                            string MyFileName = objempdoc.emp_id + "_" + objempdoc.doc_type_id + "_" + i + "_" + DateTime.Now.Date.ToString("dd_MM_yyyy_hh_mm_ss_tt") + "_" + num + ext;


                                            var webRoot = _hostingEnvironment.WebRootPath;

                                            string currentmonth = Convert.ToString(DateTime.Now.Month).Length.ToString() == "1" ? "0" + Convert.ToString(DateTime.Now.Month) : Convert.ToString(DateTime.Now.Month);

                                            var currentyearmonth = Convert.ToString(DateTime.Now.Year) + currentmonth;


                                            if (!Directory.Exists(webRoot + "/EmployeeDocs/" + doc_type + "/" + get_emp_name_code.emp_code + "/"))
                                            {
                                                Directory.CreateDirectory(webRoot + "/EmployeeDocs/" + doc_type + "/" + get_emp_name_code.emp_code + "/");

                                            }
                                            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDocs/" + doc_type + "/" + get_emp_name_code.emp_code + "/");

                                            //save file
                                            using (var fileStream = new FileStream(Path.Combine(path, MyFileName), FileMode.Create))
                                            {
                                                FileData.CopyTo(fileStream);
                                                // objhealthcard.health_card_path = "/wwwroot/HealthCard/" + currentyearmonth + "/" + get_emp_name_code.emp_code + "/" + MyFileName;
                                                objdoc.doc_path = "/EmployeeDocs/" + doc_type + "/" + get_emp_name_code.emp_code + "/" + MyFileName;
                                            }


                                            //objdoc.doc_type_id = objempdoc.doc_type_id;
                                            //objdoc.emp_id = objempdoc.emp_id;
                                            //objdoc.doc_no = objempdoc.doc_no;
                                            //objdoc.remarks = objempdoc.remarks;
                                            //objdoc.is_deleted = 0;
                                            //objdoc.created_by = objempdoc.created_by;
                                            //objdoc.company_id = objempdoc.company_id;
                                            //objdoc.created_date = DateTime.Now;


                                            //empdoclist.Add(objdoc);
                                        }
                                        else
                                        {
                                            objresponse.StatusCode = 1;
                                            objresponse.Message = "Please Upload Only Jpg,PDF,Jpeg format";
                                            trans.Rollback();
                                            return Ok(objresponse);
                                        }
                                    }
                                    //else
                                    //{
                                    //    objresponse.StatusCode = 1;
                                    //    objresponse.Message = "Please Attach Files";

                                    //}
                                }
                            }
                            objdoc.doc_type_id = objempdoc.doc_type_id;
                            objdoc.emp_id = objempdoc.emp_id;
                            objdoc.doc_no = objempdoc.doc_no;
                            objdoc.remarks = objempdoc.remarks;
                            objdoc.is_deleted = 0;
                            objdoc.created_by = objempdoc.created_by;
                            objdoc.company_id = objempdoc.company_id;
                            objdoc.created_date = DateTime.Now;
                            empdoclist.Add(objdoc);

                            _context.tbl_emp_documents.AddRange(empdoclist);
                            _context.SaveChanges();
                            objresponse.StatusCode = 0;
                            objresponse.Message = "Document Successfully Uploaded";
                            trans.Commit();

                        }
                        else
                        {
                            objresponse.StatusCode = 1;
                            objresponse.Message = "Selected Document Type not available";
                        }
                    }
                    catch (Exception ex)
                    {
                        trans.Rollback();
                    }
                }
                return Ok(objresponse);
            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }


        [Route("GetEmpDocuments/{company_id}/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.EmpDocuments))]
        public IActionResult GetEmpDocuments([FromRoute] int company_id, int emp_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {


                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { emp_id });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }

                if (!_clsCurrentUser.CompanyId.Contains(company_id))
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Unauthorize Company Access...!";
                    return Ok(objResult);
                }

                var _emp_document_data = _context.tbl_emp_documents.Where(x => x.is_deleted == 0 && x.emp_id == emp_id && x.company_id == company_id).Select(p => new
                {
                    p.emp_id,
                    p.doc_type_id,
                    p.doc_master.doc_name,
                    p.doc_no,
                    p.remarks,
                    p.doc_path,
                    p.created_date,
                    p.modified_date,
                    p.emp_doc_id
                }).ToList();

                var _data_document_master = _context.tbl_document_type_master.Where(x => x.is_deleted == 0).ToList();


                var _remin_emp_doc_data = _emp_document_data.Select(p => new { p.emp_doc_id, p.emp_id, p.doc_type_id, p.doc_no, p.remarks, p.created_date.Date, p.doc_name }).Distinct().ToList();

                var result = new { _emp_document_data = _emp_document_data, _data_document_master = _data_document_master, _remin_emp_doc_data = _remin_emp_doc_data };

                return Ok(result);
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }

        }

        [Route("DeleteEmpDocument")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Upload))]
        public IActionResult DeleteEmpDocument([FromBody] tbl_emp_documents objempdoc)
        {
            ResponseMsg objresponse = new ResponseMsg();

            try
            {
                if (!_clsCurrentUser.DownlineEmpId.Any(p => p == objempdoc.emp_id))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access...!";
                    return Ok(objresponse);
                }
                var existdtl = _context.tbl_emp_documents.Where(x => x.emp_doc_id == objempdoc.emp_doc_id).FirstOrDefault();
                if (existdtl != null)
                {
                    existdtl.is_deleted = 1;
                    existdtl.modified_by = objempdoc.modified_by;
                    existdtl.modified_date = DateTime.Now;
                    _context.tbl_emp_documents.Update(existdtl);
                    _context.SaveChanges();
                    objresponse.StatusCode = 0;
                    objresponse.Message = "Successfully Deleted";
                }
                else
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Document Not Available";
                }
                //List<tbl_emp_documents> existdtl = _context.tbl_emp_documents.Where(x => x.emp_id == objempdoc.emp_id && x.doc_type_id == objempdoc.doc_type_id && x.is_deleted == 0).ToList();
                //if (existdtl.Count > 0)
                //{
                //    existdtl.ForEach(p => { p.is_deleted = 1; p.modified_by = objempdoc.modified_by; p.modified_date = DateTime.Now; });
                //    _context.tbl_emp_documents.UpdateRange(existdtl);

                //    _context.SaveChanges();

                //    objresponse.StatusCode = 0;
                //    objresponse.Message = "Successfully Deleted";
                //}
                //else
                //{
                //    objresponse.StatusCode = 1;
                //    objresponse.Message = "Document Not Available";
                //}

                return Ok(objresponse);
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }

        [Route("ChangePwdByAdmin")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Employee))]

        public IActionResult ChangePwdByAdmin([FromBody] tbl_user_master objuser)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                if (!_clsCurrentUser.DownlineEmpId.Any(p => p == objuser.employee_id))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access...!";
                    return Ok(objresponse);
                }

                var exist = _context.tbl_user_master.Where(x => _clsCurrentUser.CompanyId.Contains(x.default_company_id) && x.user_id == objuser.user_id && x.username == objuser.username).FirstOrDefault();
                if (exist != null)
                {
                    int db_user_id = 0;
                    var user_idd = _context.tbl_user_master.Where(x => x.employee_id == _clsCurrentUser.EmpId && x.is_active == 1).FirstOrDefault();
                    if (user_idd != null)
                    {
                        db_user_id = user_idd.user_id;
                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "User not available";
                    }


                    //  int role_idd = _context.tbl_user_role_map.Where(x => x.is_deleted == 0 && x.user_id == db_user_id).OrderByDescending(x => x.claim_master_id).FirstOrDefault().role_id ?? 0;
                    // if (role_idd == 1 || role_idd == 2)
                    if (_clsCurrentUser.RoleId.Any(p => p > 100) || _clsCurrentUser.RoleId.Contains((int)enmRoleMaster.SuperAdmin))
                    {
                        Classes.clsUsersDetails objclsUsersDetails_ = new clsUsersDetails(_context, _config, objuser.username.Trim().ToUpper(), "", objuser.created_by);
                        //objclsUsersDetails_.LoadUser(0, objuser.username, "");
                        string new_pwd = RandomPassword();
                        bool result = objclsUsersDetails_.ChangePassword(new_pwd);
                        if (result)
                        {
                            objresponse.StatusCode = 0;
                            objresponse.Message = "Password Successfully Changed,New Password of Login UserID " + objuser.username + " is:- " + new_pwd + "";
                        }
                        else
                        {
                            objresponse.StatusCode = 1;
                            objresponse.Message = "Password not change";

                        }

                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "You are not authorized to change Employees Password";
                    }
                }
                else
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "No Authorize!!!";
                }


                return Ok(objresponse);
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }


        // Generate a random string with a given size and case.   
        // If second parameter is true, the return string is lowercase  
        public string RandomString(int size, bool lowerCase)
        {
            StringBuilder builder = new StringBuilder();
            Random random = new Random();
            char ch;
            for (int i = 0; i < size; i++)
            {
                ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26 * random.NextDouble() + 65)));
                builder.Append(ch);
            }
            if (lowerCase)
                return builder.ToString().ToLower();
            return builder.ToString();
        }

        public string RandomPassword(int size = 0)
        {
            Random random = new Random();
            //generate random no between 0 to 9999
            int num = random.Next(10000);

            StringBuilder builder = new StringBuilder();
            builder.Append(RandomString(4, false));
            builder.Append(num);
            // builder.Append(RandomNumber(1000, 9999));
            builder.Append(RandomString(2, false));
            return builder.ToString();
        }
    #endregion **END BY SUPRIYA ON 20-11-2019,UPLOAD EMPLOYEE DOCUMENTS**

        [Route("GetEmployeement_Type_Master/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.EmpStatus))]
        public IActionResult GetEmployeement_Type_Master(int emp_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                var datares = _clEmployeeDetail.EmpPermissionExists(new int[] { emp_id });
                if (!datares.Key)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = string.Format("Unauthorize Access for ({0})...!", datares.Value);
                    return Ok(objresponse);
                }

                var emp_comp = _context.tbl_employee_company_map.Where(x => x.is_deleted == 0 && _clsCurrentUser.CompanyId.Contains(x.company_id ?? 0)).Select(p => p.employee_id).ToList();

                var data = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && emp_comp.Contains(x.employee_id) && x.employee_id == emp_id).Select(p => new
                {
                    p.employee_id,
                    p.tbl_employee_id_details.emp_code,
                    emp_name = string.Format("{0} {1} {2}",
                      p.tbl_employee_id_details.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_first_name,
                      p.tbl_employee_id_details.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_middle_name,
                      p.tbl_employee_id_details.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_last_name),
                    emptypeid = p.employment_type,
                    emptypename = p.employment_type == 1 ? "Temporary" : p.employment_type == 2 ? "Probation" : p.employment_type == 3 ? "Confirmed" : p.employment_type == 4 ? "Contract" : p.employment_type == 5 ? "Confirmation Extended" : p.employment_type == 10 ? "Notice" : p.employment_type == 99 ? "FNF" : p.employment_type == 100 ? "Seprated" : "",
                    //p.actual_duration_days,
                    //p.duration_start_period,
                    //p.duration_end_period,
                    //p.actual_duration_end_period,
                    //p.actual_duration_start_period,
                   // p.tbl_employee_id_details.tbl_emp_officaial_sec.FirstOrDefault(h => h.is_deleted == 0 && !string.IsNullOrEmpty(h.employee_first_name)).date_of_joining,
                    p.created_date,
                    p.last_modified_date,// = p.last_modified_date.Year == 2000 ? "" : p.last_modified_date.ToString("dd-MMM-yyyy"),
                    //p.duration_days,
                    p.effective_date,
                    notice_period_ = _context.tbl_employment_type_master.Join(_context.tbl_employeementtype_settings, a => a.employment_type, b => b.employeement_type, (a, b) => new
                    {

                        b.typesetting_id,
                        b.notice_period,
                        b.notice_period_days,
                        b.employeement_type,
                        b.grade_id,
                        b.is_deleted,
                    }).Where(c => c.is_deleted == 0 && c.grade_id == p.tbl_employee_id_details.tbl_emp_grade_allocation.OrderByDescending(y => y.emp_grade_id).FirstOrDefault(d => d.tbl_grade_master.is_active == 1).grade_id && c.employeement_type == p.employment_type).Select(e => new { notice_period_month = e.notice_period, notice_period_days = e.notice_period_days }).FirstOrDefault()


                    //notice_=_context.tbl_employeementtype_settings.Join(_context.tbl_employment_type_master,a=>a.employeement_type,b=>b.employment_type,(a,b)=>new {
                    //    a.employeement_type,
                    //    a.grade_id,
                    //    a.is_deleted,
                    //  a.notice_period,
                    //}).FirstOrDefault(j=>j.is_deleted==0 && j.employeement_type==p.employment_type &&j.grade_id==p.tbl_employee_id_details.tbl_emp_grade_allocation.OrderByDescending(y=>y.emp_grade_id).FirstOrDefault(h=>h.tbl_grade_master.is_active==1).grade_id).notice_period
                }).ToList().OrderBy(n => n.effective_date);

                return Ok(data);

            }
            catch (Exception ex)
            {
                if (ex.Message == "Nullable object must have a value.")
                {
                    return Ok("Please add first employee official section details...!");
                }
                else
                {
                    return Ok(ex.Message);
                }
            }
        }

        [Route("GetEmployeement_Type_Details/{emp_id}/{typeid}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.EmpStatus))]
        public IActionResult GetEmployeement_Type_Details(int emp_id, int typeid)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                var datares = _clEmployeeDetail.EmpPermissionExists(new int[] { emp_id });
                if (!datares.Key)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = string.Format("Unauthorize Access for ({0})...!", datares.Value);
                    return Ok(objresponse);
                }

                // var emp_comp = _context.tbl_employee_company_map.Where(x => x.is_deleted == 0 && _clsCurrentUser.CompanyId.Contains(x.company_id ?? 0)).Select(p => p.employee_id).ToList();

                var data = _context.tbl_employment_type_master.Where(x => x.employment_type == typeid && x.employee_id == emp_id).Select(p => new
                {
                    p.employee_id,
                    p.tbl_employee_id_details.emp_code,
                    //emp_name = string.Format("{0} {1} {2}",
                    //  p.tbl_employee_id_details.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_first_name,
                    //  p.tbl_employee_id_details.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_middle_name,
                    //  p.tbl_employee_id_details.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_last_name),
                    emptypeid = p.employment_type,
                    emptypename = p.employment_type == 1 ? "Temporary" : p.employment_type == 2 ? "Probation" : p.employment_type == 3 ? "Confirmed" : p.employment_type == 4 ? "Contract" : p.employment_type == 5 ? "Confirmation Extended" : p.employment_type == 10 ? "Notice" : p.employment_type == 99 ? "FNF" : p.employment_type == 100 ? "Seprated" : "",
                    //p.actual_duration_days,
                    //p.duration_start_period,
                    //p.duration_end_period,
                    //p.actual_duration_end_period,
                    //p.actual_duration_start_period,
                    //p.tbl_employee_id_details.tbl_emp_officaial_sec.FirstOrDefault(h => h.is_deleted == 0 && !string.IsNullOrEmpty(h.employee_first_name)).date_of_joining,
                    p.created_date,
                    p.last_modified_date,
                   // p.duration_days,
                    p.effective_date,
                    //notice_period_ = _context.tbl_employment_type_master.Join(_context.tbl_employeementtype_settings, a => a.employment_type, b => b.employeement_type, (a, b) => new
                    //{

                    //    b.typesetting_id,
                    //    b.notice_period,
                    //    b.notice_period_days,
                    //    b.employeement_type,
                    //    b.grade_id,
                    //    b.is_deleted,
                    //}).Where(c => c.is_deleted == 0 && c.grade_id == p.tbl_employee_id_details.tbl_emp_grade_allocation.OrderByDescending(y => y.emp_grade_id).FirstOrDefault(d => d.tbl_grade_master.is_active == 1).grade_id && c.employeement_type == p.employment_type).Select(e => new { notice_period_month = e.notice_period, notice_period_days = e.notice_period_days }).FirstOrDefault()

                }).ToList().OrderBy(n => n.last_modified_date);

                return Ok(data);

            }
            catch (Exception ex)
            {
                if (ex.Message == "Nullable object must have a value.")
                {
                    return Ok("Please add first employee official section details...!");
                }
                else
                {
                    return Ok(ex.Message);
                }
            }
        }

        [Route("UpdateEmpEmployementType")]
        [HttpPost]
        //[Authorize(Policy = "3045")]
        [Authorize(Policy = nameof(enmMenuMaster.EmpStatus))]
        public IActionResult UpdateEmpEmployementType([FromBody] EmployeeOfficaialSection objemptype)
        {
            Response_Msg objresponse = new Response_Msg();
            try
            {

                //var datares = _clEmployeeDetail.EmpPermissionExists(new int[] { objemptype.employee_id });
                //if (!datares.Key)
                //{
                //    objresponse.StatusCode = 1;
                //    objresponse.Message = string.Format("Unauthorize Access for ({0})...!", datares.Value);
                //    return Ok(objresponse);
                //}
                //if (!_clsCurrentUser.DownlineEmpId.Any(p => p == objemptype.employee_id))
                //{
                //    objresponse.StatusCode = 1;
                //    objresponse.Message = "Unauthorize Access...!";
                //    return Ok(objresponse);
                //}

                //if (!_clsCurrentUser.CompanyId.Any(p => p == objemptype.default_company_id))
                //{
                //    objresponse.StatusCode = 1;
                //    objresponse.Message = "Unauthorize Company access...!";
                //    return Ok(objresponse);
                //}

                DateTime joining_date = Convert.ToDateTime("01-01-2000");

                var teos = _context.tbl_emp_officaial_sec.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id).FirstOrDefault();


                if (teos != null)
                {
                    //joining_date = teos.date_of_joining;
                }


                if (objemptype.current_employee_type == (int)EmployeeType.Temporary) // Temporary Employement Type
                {
                    if (joining_date.Date > objemptype.effective_empmnt_type_dt.Date)
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Effective date of Temporary Employment Type is always equal to Joining date";
                        return Ok(objresponse);
                    }

                }

                var exist = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id && x.employment_type == objemptype.current_employee_type).FirstOrDefault();
                if (exist != null)
                {
                    exist.is_deleted = 1;
                    exist.last_modified_by = objemptype.last_modified_by;
                    exist.last_modified_date = DateTime.Now;
                    _context.tbl_employment_type_master.Update(exist);
                }

                tbl_employment_type_master PreViousStatus = null;
                tbl_employment_type_master objemptype_mstr = new tbl_employment_type_master();
                objemptype_mstr.employee_id = objemptype.employee_id;
                objemptype_mstr.employment_type = objemptype.current_employee_type;
                objemptype_mstr.effective_date = objemptype.effective_empmnt_type_dt;
                objemptype_mstr.is_deleted = 0;
                objemptype_mstr.created_by = objemptype.created_by;
                objemptype_mstr.last_modified_by = objemptype.created_by;
                objemptype_mstr.created_date = DateTime.Now;
                objemptype_mstr.last_modified_date = DateTime.Now;
                //switch (objemptype.current_employee_type)
                //{
                //    case (int)EmployeeType.Probation:
                //        objemptype_mstr.duration_days = 360;
                //        objemptype_mstr.duration_start_period = objemptype.effective_empmnt_type_dt;
                //        objemptype_mstr.duration_end_period = objemptype.effective_empmnt_type_dt.AddDays(360);
                //        objemptype_mstr.actual_duration_days = 360;
                //        objemptype_mstr.actual_duration_start_period = objemptype.effective_empmnt_type_dt;
                //        objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt.AddDays(360);
                //        break;
                //    case (int)EmployeeType.Confirmend:
                //        objemptype_mstr.duration_days = 10000;
                //        objemptype_mstr.duration_start_period = objemptype.effective_empmnt_type_dt;
                //        objemptype_mstr.duration_end_period = new DateTime(2100, 1, 1);
                //        objemptype_mstr.actual_duration_days = 180;
                //        objemptype_mstr.actual_duration_start_period = objemptype.effective_empmnt_type_dt;
                //        objemptype_mstr.actual_duration_end_period = new DateTime(2100, 1, 1);

                //        PreViousStatus = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id && x.employment_type == (int)EmployeeType.Probation).FirstOrDefault();
                //        if (PreViousStatus != null)
                //        {
                //            objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt;
                //            TimeSpan ts = objemptype_mstr.actual_duration_end_period - objemptype_mstr.actual_duration_start_period;
                //            if (ts.Days < 0)
                //            {
                //                throw new Exception("Can't set the Confirm date before Probation date");
                //            }
                //            objemptype_mstr.actual_duration_days = ts.Days;
                //        }
                //        break;
                //    case (int)EmployeeType.Notice:
                //        objemptype_mstr.duration_days = 60;
                //        objemptype_mstr.duration_start_period = objemptype.effective_empmnt_type_dt;
                //        objemptype_mstr.duration_end_period = objemptype.effective_empmnt_type_dt.AddDays(60);
                //        objemptype_mstr.actual_duration_days = 60;
                //        objemptype_mstr.actual_duration_start_period = objemptype.effective_empmnt_type_dt;
                //        objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt.AddDays(60);
                //        PreViousStatus = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id && x.employment_type == (int)EmployeeType.Confirmend).FirstOrDefault();
                //        if (PreViousStatus != null)
                //        {
                //            objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt;
                //            TimeSpan ts = objemptype_mstr.actual_duration_end_period - objemptype_mstr.actual_duration_start_period;
                //            if (ts.Days < 0)
                //            {
                //                throw new Exception("Can't set the Notice date before Confirm date");
                //            }
                //            objemptype_mstr.actual_duration_days = ts.Days;
                //        }
                //        else
                //        {
                //            PreViousStatus = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id && x.employment_type == (int)EmployeeType.Probation).FirstOrDefault();
                //            if (PreViousStatus != null)
                //            {
                //                objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt;
                //                TimeSpan ts = objemptype_mstr.actual_duration_end_period - objemptype_mstr.actual_duration_start_period;
                //                if (ts.Days < 0)
                //                {
                //                    throw new Exception("Can't set the Notice date before Probation date");
                //                }
                //                objemptype_mstr.actual_duration_days = ts.Days;
                //            }
                //        }
                //        break;
                //    case (int)EmployeeType.FNF:
                //        objemptype_mstr.duration_days = 30;
                //        objemptype_mstr.duration_start_period = objemptype.effective_empmnt_type_dt;
                //        objemptype_mstr.duration_end_period = objemptype.effective_empmnt_type_dt.AddDays(30);
                //        objemptype_mstr.actual_duration_days = 30;
                //        objemptype_mstr.actual_duration_start_period = objemptype.effective_empmnt_type_dt;
                //        objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt.AddDays(30);
                //        PreViousStatus = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id && x.employment_type == (int)EmployeeType.Notice).FirstOrDefault();
                //        if (PreViousStatus != null)
                //        {
                //            objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt;
                //            TimeSpan ts = objemptype_mstr.actual_duration_end_period - objemptype_mstr.actual_duration_start_period;
                //            if (ts.Days < 0)
                //            {
                //                throw new Exception("Can't set the FNF date before Notice date");
                //            }
                //            objemptype_mstr.actual_duration_days = ts.Days;
                //        }
                //        else
                //        {
                //            PreViousStatus = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id && x.employment_type == (int)EmployeeType.Confirmend).FirstOrDefault();
                //            if (PreViousStatus != null)
                //            {
                //                objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt;
                //                TimeSpan ts = objemptype_mstr.actual_duration_end_period - objemptype_mstr.actual_duration_start_period;
                //                if (ts.Days < 0)
                //                {
                //                    throw new Exception("Can't set the Notice date before Confirm date");
                //                }
                //                objemptype_mstr.actual_duration_days = ts.Days;
                //            }
                //            else
                //            {
                //                PreViousStatus = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id && x.employment_type == (int)EmployeeType.Probation).FirstOrDefault();
                //                if (PreViousStatus != null)
                //                {
                //                    objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt;
                //                    TimeSpan ts = objemptype_mstr.actual_duration_end_period - objemptype_mstr.actual_duration_start_period;
                //                    if (ts.Days < 0)
                //                    {
                //                        throw new Exception("Can't set the Notice date before Probation date");
                //                    }
                //                    objemptype_mstr.actual_duration_days = ts.Days;
                //                }
                //            }
                //        }
                //        break;
                //    case (int)EmployeeType.Terminate:
                //        objemptype_mstr.duration_days = 10000;
                //        objemptype_mstr.duration_start_period = objemptype.effective_empmnt_type_dt;
                //        objemptype_mstr.duration_end_period = objemptype.effective_empmnt_type_dt.AddDays(10000);
                //        objemptype_mstr.actual_duration_days = 10000;
                //        objemptype_mstr.actual_duration_start_period = objemptype.effective_empmnt_type_dt;
                //        objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt.AddDays(10000);
                //        PreViousStatus = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id && x.employment_type == (int)EmployeeType.Notice).FirstOrDefault();
                //        PreViousStatus = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id && x.employment_type == (int)EmployeeType.FNF).FirstOrDefault();
                //        if (PreViousStatus != null)
                //        {
                //            objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt;
                //            TimeSpan ts = objemptype_mstr.actual_duration_end_period - objemptype_mstr.actual_duration_start_period;
                //            if (ts.Days < 0)
                //            {
                //                throw new Exception("Can't set the Terminate date before FNF date");
                //            }
                //            objemptype_mstr.actual_duration_days = ts.Days;
                //        }
                //        else
                //        {
                //            PreViousStatus = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id && x.employment_type == (int)EmployeeType.Notice).FirstOrDefault();
                //            if (PreViousStatus != null)
                //            {
                //                objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt;
                //                TimeSpan ts = objemptype_mstr.actual_duration_end_period - objemptype_mstr.actual_duration_start_period;
                //                if (ts.Days < 0)
                //                {
                //                    throw new Exception("Can't set the Terminate date before Notice date");
                //                }
                //                objemptype_mstr.actual_duration_days = ts.Days;
                //            }
                //            else
                //            {
                //                PreViousStatus = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id && x.employment_type == (int)EmployeeType.Confirmend).FirstOrDefault();
                //                if (PreViousStatus != null)
                //                {
                //                    objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt;
                //                    TimeSpan ts = objemptype_mstr.actual_duration_end_period - objemptype_mstr.actual_duration_start_period;
                //                    if (ts.Days < 0)
                //                    {
                //                        throw new Exception("Can't set the Terminate date before Confirm date");
                //                    }
                //                    objemptype_mstr.actual_duration_days = ts.Days;
                //                }
                //                else
                //                {
                //                    PreViousStatus = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id && x.employment_type == (int)EmployeeType.Probation).FirstOrDefault();
                //                    if (PreViousStatus != null)
                //                    {
                //                        objemptype_mstr.actual_duration_end_period = objemptype.effective_empmnt_type_dt;
                //                        TimeSpan ts = objemptype_mstr.actual_duration_end_period - objemptype_mstr.actual_duration_start_period;
                //                        if (ts.Days < 0)
                //                        {
                //                            throw new Exception("Can't set the Terminate date before Probation date");
                //                        }
                //                        objemptype_mstr.actual_duration_days = ts.Days;
                //                    }
                //                }
                //            }
                //        }
                //        break;
                //}

                _context.tbl_employment_type_master.Add(objemptype_mstr);
                if (PreViousStatus != null)
                {
                    _context.tbl_employment_type_master.Attach(PreViousStatus);
                    _context.Entry(PreViousStatus).State = EntityState.Modified;
                }
                _context.SaveChanges();


                //start update employment type in official section also


                if (objemptype_mstr.effective_date < DateTime.Now.AddDays(1))
                {
                 //   teos.current_employee_type = objemptype_mstr.employment_type;
                    _context.tbl_emp_officaial_sec.Update(teos);
                    _context.SaveChanges();
                }




                //end update employment type in official section also 



                objresponse.StatusCode = 0;
                objresponse.Message = "Successfully Submitted";
                return Ok(objresponse);

            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }


        //public IActionResult UpdateEmpEmployementType([FromBody] tbl_employment_type_master objemptype)
        //{
        //    try
        //    {
        //        Response_Msg objresponse = new Response_Msg();

        //        DateTime joining_date = Convert.ToDateTime("2100-01-01");

        //        DateTime datee = _context.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).date_of_joining;
        //        if (datee != null)
        //        {
        //            joining_date = datee;
        //        }


        //        if (objemptype.employment_type == 1) // Temporary Employement Type
        //        {
        //            if (joining_date.Date != objemptype.duration_start_period.Date)
        //            {
        //                objresponse.StatusCode = 1;
        //                objresponse.Message = "Actual Start date of Temporary Employment Type is always equal to Joining date";
        //                return Ok(objresponse);
        //            }

        //        }

        //        if (DateTime.Compare(objemptype.duration_start_period, objemptype.duration_end_period) > 0)
        //        {
        //            objresponse.StatusCode = 1;
        //            objresponse.Message = "Actual Start Date must be greater than end date";
        //            return Ok(objresponse);
        //        }

        //        int grade_id = _context.tbl_emp_grade_allocation.OrderByDescending(x => x.emp_grade_id).FirstOrDefault(x => x.tbl_grade_master.is_active == 1 && x.employee_id == objemptype.employee_id).grade_id ?? 0;

        //        var get_emptype_setting_detail = _context.tbl_employeementtype_settings.Where(x => x.is_deleted == 0 && x.employeement_type == objemptype.employment_type && x.grade_id == grade_id).FirstOrDefault();

        //        if (get_emptype_setting_detail != null)
        //        {
        //            int month_ = get_emptype_setting_detail.notice_period;
        //            int days_ = get_emptype_setting_detail.notice_period_days;

        //            int _requried_notice_period_days = Convert.ToInt32(((objemptype.duration_start_period.AddMonths(month_).AddDays(days_)) - objemptype.duration_start_period).TotalDays) + 1;

        //            int _actual_notice_period_days = Convert.ToInt32((objemptype.duration_end_period - objemptype.duration_start_period).TotalDays);
        //            if (_requried_notice_period_days >= _actual_notice_period_days)
        //            {
        //                objresponse.StatusCode = 1;
        //                objresponse.Message = "Required Notice period between start and end date is '" + _requried_notice_period_days + "' days, please select another end date";
        //                return Ok(objresponse);
        //            }


        //        }
        //        else
        //        {
        //            objresponse.StatusCode = 1;
        //            objresponse.Message = "Employment Type setting is not available";
        //            return Ok(objresponse);
        //        }

        //        using (var trans = _context.Database.BeginTransaction())
        //        {

        //            try
        //            {

        //                var exist_data = _context.tbl_employment_type_master.Where(x => x.is_deleted == 0 && x.employee_id == objemptype.employee_id).ToList();

        //                int DurationDays = Convert.ToInt32((objemptype.duration_end_period.Date - objemptype.duration_start_period.Date).TotalDays);


        //                List<object> no_oftypelessthan = new List<object>();
        //                List<object> no_ofgreaterthan = new List<object>();
        //                int serial_no = 0;

        //                for (int i = 0; i < exist_data.Count; i++)
        //                {
        //                    if (Convert.ToByte(exist_data[i].employment_type) < objemptype.employment_type)
        //                    {
        //                        /// no_of_type_lessthancomming[i] = Convert.ToInt32(emptypelist[i]);
        //                        no_oftypelessthan.Add(exist_data[i].employment_type);
        //                    }
        //                    else if (objemptype.employment_type < Convert.ToByte(exist_data[i].employment_type))
        //                    {
        //                        no_ofgreaterthan.Add(exist_data[i].employment_type);
        //                    }
        //                    else if (Convert.ToByte(exist_data[i].employment_type) == objemptype.employment_type)
        //                    {
        //                        var _dataa = exist_data.FirstOrDefault(q => q.employment_type == objemptype.employment_type);

        //                        if (_dataa != null)
        //                        {

        //                            _dataa.actual_duration_start_period = objemptype.duration_start_period;
        //                            _dataa.actual_duration_end_period = objemptype.duration_end_period;

        //                            if (objemptype.duration_start_period.Date > objemptype.duration_end_period.Date)
        //                            {
        //                                _dataa.actual_duration_days = Convert.ToInt32((objemptype.duration_start_period.Date - objemptype.duration_end_period.Date).TotalDays);
        //                            }
        //                            else
        //                            {
        //                                _dataa.actual_duration_days = Convert.ToInt32((objemptype.duration_end_period.Date - objemptype.duration_start_period.Date).TotalDays);
        //                            }

        //                            _dataa.last_modified_by = objemptype.last_modified_by;
        //                            _dataa.last_modified_date = DateTime.Now;


        //                            serial_no = _dataa.employment_type_id;

        //                            _context.tbl_employment_type_master.UpdateRange(_dataa);

        //                        }




        //                    }

        //                }

        //                DateTime endate = objemptype.duration_start_period;

        //                //to set previous date
        //                for (int j = 0; j < no_oftypelessthan.Count; j++)
        //                {
        //                    var data_ = exist_data.OrderByDescending(y => y.employment_type_id).FirstOrDefault(z => z.employment_type_id < serial_no);

        //                    if (data_.employment_type == Convert.ToByte(no_oftypelessthan[j]))
        //                    {

        //                        if (objemptype.duration_start_period.AddDays(-1).Date < data_.actual_duration_start_period.Date)
        //                        {

        //                            trans.Rollback();
        //                            objresponse.StatusCode = 1;
        //                            objresponse.Message = "Previous end date must be greater than or equal to start date";
        //                            return Ok(objresponse);
        //                        }
        //                        data_.actual_duration_end_period = objemptype.duration_start_period.AddDays(-1);

        //                        if (objemptype.duration_start_period.AddDays(-1).Date > data_.actual_duration_start_period.Date)
        //                        {
        //                            data_.actual_duration_days = Convert.ToInt32(((objemptype.duration_start_period.AddDays(-1).Date) - data_.actual_duration_start_period.Date).TotalDays);
        //                        }
        //                        else
        //                        {
        //                            data_.actual_duration_days = Convert.ToInt32((data_.actual_duration_start_period.Date - (objemptype.duration_start_period.AddDays(-1).Date)).TotalDays);
        //                        }


        //                        data_.last_modified_by = objemptype.last_modified_by;
        //                        data_.last_modified_date = DateTime.Now;

        //                        _context.tbl_employment_type_master.UpdateRange(data_);
        //                    }

        //                }

        //                DateTime endatee = objemptype.duration_end_period;
        //                //to set further date 
        //                for (int k = 0; k < no_ofgreaterthan.Count; k++)
        //                {
        //                    var _data_ = exist_data.OrderByDescending(y => y.employment_type_id).Where(z => z.employment_type_id > serial_no).ToList();

        //                    for (int l = 0; l < _data_.Count; l++)
        //                    {
        //                        if (_data_[l].employment_type == Convert.ToByte(no_ofgreaterthan[k]))
        //                        {
        //                            DateTime startdatee = endatee.AddDays(1);
        //                            endatee = startdatee.AddMonths(6);
        //                            double acdurationdays = 0;

        //                            if (endatee.Date > startdatee.Date)
        //                            {
        //                                acdurationdays = (endatee.Date - startdatee.Date).TotalDays;
        //                            }
        //                            else
        //                            {
        //                                acdurationdays = (startdatee.Date - endatee.Date).TotalDays;
        //                            }


        //                            _data_[l].actual_duration_days = Convert.ToInt32(acdurationdays);

        //                            _data_[l].actual_duration_start_period = startdatee;
        //                            _data_[l].actual_duration_end_period = endatee;
        //                            _data_[l].last_modified_by = objemptype.last_modified_by;
        //                            _data_[l].last_modified_date = DateTime.Now;

        //                            _context.tbl_employment_type_master.UpdateRange(_data_);
        //                        }


        //                    }

        //                }


        //                _context.SaveChanges();

        //                trans.Commit();


        //                objresponse.StatusCode = 0;
        //                objresponse.Message = "Employment type Successfully Saved";
        //            }
        //            catch (Exception ex)
        //            {
        //                trans.Rollback();
        //                objresponse.StatusCode = 1;
        //                objresponse.Message = ex.Message;
        //            }
        //        }


        //        return Ok(objresponse);

        //    }
        //    catch (Exception ex)
        //    {
        //        return Ok(ex.Message);
        //    }
        //}

        private List<object> GetEmployementtypee()
        {

            List<object> emptypelist = new List<object>();
            foreach (EmployeeType employee in Enum.GetValues(typeof(EmployeeType)))
            {
                int value = (int)Enum.Parse(typeof(EmployeeType), Enum.GetName(typeof(EmployeeType), employee));
                // string Str = Enum.GetName(typeof(LocationType), value);

                Type type = employee.GetType();
                MemberInfo[] memInfo = type.GetMember(employee.ToString());

                if (memInfo != null && memInfo.Length > 0)
                {
                    object[] attrs = (object[])memInfo[0].GetCustomAttributes(typeof(DescriptionAttribute), false);
                    if (attrs != null && attrs.Length > 0)
                    {
                        string strvalue = ((System.ComponentModel.DescriptionAttribute)attrs[0]).Description;
                        emptypelist.Add(value);
                        //emptypelist.Add(new
                        //{
                        //    emptypeid = value,
                        //    emptypename = strvalue
                        //});
                    }
                }
            }

            return emptypelist;
        }

    #region ** START BY SUPRIYA ON 03-12-2019, UPDATE EMPLOYMENT TYPE IN OFFICIAL SECTION **

        [Route("UpdatOfficialEmploymentType")]
        [HttpGet]
        // [Authorize(Policy = nameof(enmMenuMaster.EmpStatus))]
        public IActionResult UpdatOfficialEmploymentType(int company_id = 0)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                // clsEmployeeDetail objemptypedetail = new clsEmployeeDetail(_context, _config, _AC, _clsCurrentUser);
                //start update employee employment status;
                List<int> _mdc = _clEmployeeDetail.ChangeEmployementType();

                //if (_mdc.Count > 0)
                //{
                //    DateTime? todate = DateTime.Now;

                //    //start update employee el
                //    List<tbl_leave_info> Tli = _context.tbl_leave_info.Where(p => p.leave_tenure_from_date.Year <= todate.Value.Year && p.leave_tenure_to_date.Year >= todate.Value.Year && p.is_active == 1 && p.tbl_leave_type._is_el == 1).ToList();
                //    int PayrollMonthYear = Convert.ToInt32(DateTime.Now.ToString("yyyyMM"));


                //    for (int i = 0; i < Tli.Count; i++)
                //    {

                //        List<tbl_leave_credit> Tlc = _context.tbl_leave_credit.Where(p => p.leave_info_id == Tli[i].leave_info_id && p.is_deleted == 0).ToList();
                //        for (int j = 0; j < Tlc.Count; j++)
                //        {
                //            DateTime LeaveCreditDt = new DateTime(DateTime.Now.Year, DateTime.Now.Month, Convert.ToInt32(Tlc[j].leave_credit_day));

                //            Classes.clsLeaveCredit LeaveCredit = new Classes.clsLeaveCredit(_context, Tlc[j].leave_info_id ?? 0, PayrollMonthYear, LeaveCreditDt,
                //                Tli[i].leave_tenure_from_date, Tli[i].leave_tenure_to_date, Tlc[j].frequency_type, Tlc[j].is_leave_accrue, Convert.ToByte(Tlc[j].max_accrue), Convert.ToByte(Tlc[j].leave_credit_day),
                //                Tlc[j].leave_credit_number, Tli[i].leave_type_id ?? 0);



                //            LeaveCredit.CalculateNewJoinEmpLeave(_mdc);

                //        }


                //    }
                //}


                return Ok("Process Successfully !!");
            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }
    #endregion ** END BY SUPRIYA ON 03-12-2019,UPDATE EMPLOYMENT TYPE IN OFFICIAL SECTION **

        [HttpGet("GetEmployeeWorkingRoleAllocation/{employee_id}")]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> GetEmployeeWorkingRoleAllocation([FromRoute] int employee_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { employee_id });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }




                tbl_emp_working_role_allocation desi_allocation = (from a in _context.tbl_emp_working_role_allocation select a).Where(x => x.employee_id == employee_id).OrderByDescending(x => x.emp_working_role_id).FirstOrDefault();
                return Ok(desi_allocation);
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }

        [Route("EmployeeWorkingRoleAllocation")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EmpAllocation))]
        public async Task<IActionResult> EmployeeWorkingRoleAllocation(tbl_emp_working_role_allocation tbl_emp_working_role_allocation)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {

                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { tbl_emp_working_role_allocation.employee_id ?? 0 });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }



                var get_data = _context.tbl_emp_working_role_allocation.Where(a => a.employee_id == tbl_emp_working_role_allocation.employee_id && a.is_deleted == 0).FirstOrDefault();
                if (get_data != null)
                {
                    get_data.is_deleted = 1;
                    get_data.created_by = tbl_emp_working_role_allocation.created_by;

                    _context.tbl_emp_working_role_allocation.Attach(get_data);
                    _context.Entry(get_data).State = EntityState.Modified;
                }

                tbl_emp_working_role_allocation wrole_allocation = new tbl_emp_working_role_allocation();

                wrole_allocation.employee_id = tbl_emp_working_role_allocation.employee_id;
                wrole_allocation.is_deleted = 0;
                wrole_allocation.work_r_id = tbl_emp_working_role_allocation.emp_working_role_id;


                _context.tbl_emp_working_role_allocation.Attach(wrole_allocation);
                _context.Entry(wrole_allocation).State = EntityState.Added;

                await _context.SaveChangesAsync();


                objResult.StatusCode = 1;
                objResult.Message = "Employee working role added successfully...!";


                return Ok(objResult);
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }


        [Route("GetallEmployee_before_today_dt/{company_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> GetallEmployee_before_today_dt(int company_id)
        {

            List<object> objemp_list = new List<object>();
            //if (company_id > 0)
            //{
            var data_ = _context.tbl_employee_company_map.Where(x => x.employee_id == _clsCurrentUser.EmpId && x.is_deleted == 0).Select(p => new { p.company_id, p.tbl_company_master.company_name }).ToList();

            List<int> emp_off_dtl = new List<int>();
            for (int i = 0; i < data_.Count; i++)
            {
                emp_off_dtl.AddRange(_clEmployeeDetail.GetEmployeeByDate(Convert.ToInt32(data_[i].company_id), new DateTime(1900, 1, 1), DateTime.Now, 2)
                    .Select(p => p.employee_id));

            }

            _clEmployeeDetail._company_id = company_id;
            var data = _clEmployeeDetail.GetEmployeeByDate(company_id, new DateTime(2000, 1, 1), DateTime.Now.AddDays(1));
            data = data.Where(x =>
            //x.emp_status < 100 &&
            emp_off_dtl.Contains(Convert.ToInt32(x.employee_id)) && _clsCurrentUser.CompanyId.Contains(x.company_id)).ToList();
            //emp_off_dtl.Contains(Convert.ToInt32(x.employee_id)) && 
            for (int i = 0; i < data.Count; i++)
            {
                objemp_list.Add(new
                {
                    employee_id = data[i].employee_id,
                    emp_name_code = string.Format("{0} ({1})", data[i].emp_name, data[i].emp_code),
                    company_id = company_id,
                });
            }


            return Ok(objemp_list);
            //}
            //else
            //{
            //    List<int?> comp_id = _context.tbl_employee_company_map.Where(q => q.is_deleted == 0).Select(p => p.company_id).Distinct().ToList();

            //    for (int i = 0; i < comp_id.Count; i++)
            //    {
            //        clsEmployeeDetail objempcls = new clsEmployeeDetail(_context,comp_id[i]??0);
            //        var data = objempcls.GetEmployeeByDate(comp_id[i]??0, Convert.ToDateTime("01-01-2000"), DateTime.Now);


            //        for (int J = 0; J < data.Count; J++)
            //        {
            //            objemp_list.Add(new
            //            {
            //                employee_id = data[J].employee_id,
            //                emp_name_code = string.Format("{0} ({1})", data[J].emp_name, data[J].emp_code),
            //            });
            //        }

            //    }


            //    return Ok(objemp_list);
            //}

        }

        [Route("GetEmployeeByCL/{company_id}/{location_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Employee))]

        public async Task<IActionResult> GetEmployeeByCL(int company_id, int location_id)
        {
            List<object> objemp_list = new List<object>();
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                if (company_id > 0 && location_id > 0) //get company and location wise
                {


                    var data = _clEmployeeDetail.GetEmployeeByDate(company_id, Convert.ToDateTime("01-01-2000"), DateTime.Now.AddDays(1));
                    data = data.Where(x => x.emp_status < 100 && _clsCurrentUser.CompanyId.Contains(x.company_id) && _clsCurrentUser.DownlineEmpId.Contains(x.employee_id)).ToList();

                    for (int i = 0; i < data.Count; i++)
                    {
                        //int emp_location_id = _context.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && x.employee_id == data[i].employee_id).location_id ?? 0;

                        //if (location_id == emp_location_id)
                        //{
                        //    objemp_list.Add(new
                        //    {
                        //        employee_id = data[i].employee_id,
                        //        emp_name_code = string.Format("{0} ({1})", data[i].emp_name, data[i].emp_code),
                        //    });
                        //}

                    }
                }
                else //get only location wise
                {
                    List<int?> comp_id = _context.tbl_employee_company_map.Where(q => q.is_deleted == 0).Select(p => p.company_id).Distinct().ToList();

                    for (int i = 0; i < comp_id.Count; i++)
                    {
                        var data = _clEmployeeDetail.GetEmployeeByDate(comp_id[i] ?? 0, Convert.ToDateTime("01-01-2000"), DateTime.Now.AddDays(1));
                        data = data.Where(x => x.emp_status < 100 && _clsCurrentUser.CompanyId.Contains(x.company_id) && _clsCurrentUser.DownlineEmpId.Contains(x.employee_id)).ToList();

                        for (int J = 0; J < data.Count; J++)
                        {
                            int emp_location_id = _context.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && x.employee_id == data[J].employee_id).location_id ?? 0;

                            if (location_id == emp_location_id)
                            {
                                objemp_list.Add(new
                                {
                                    employee_id = data[J].employee_id,
                                    emp_name_code = string.Format("{0} ({1})", data[J].emp_name, data[J].emp_code),
                                });
                            }

                        }

                    }

                }

                return Ok(objemp_list);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }

        [Route("GetEmployeeByCD/{company_id}/{dept_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Employee))]
        public IActionResult GetEmployeeByCD(int company_id, int dept_id)
        {
            List<object> objemp_list = new List<object>();

            if (company_id > 0 && dept_id > 0)
            {


                var data = _clEmployeeDetail.GetEmployeeByDate(company_id, Convert.ToDateTime("01-01-2000"), DateTime.Now.AddDays(1)).Where(x => x.emp_status < 100 && _clsCurrentUser.CompanyId.Contains(x.company_id) && _clsCurrentUser.DownlineEmpId.Contains(x.employee_id)).ToList();

                for (int i = 0; i < data.Count; i++)
                {
                    int emp_dept_id = _context.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && x.employee_id == data[i].employee_id).department_id ?? 0;

                    if (dept_id == emp_dept_id)
                    {
                        objemp_list.Add(new
                        {
                            employee_id = data[i].employee_id,
                            emp_name_code = string.Format("{0} ({1})", data[i].emp_name, data[i].emp_code),
                        });
                    }

                }
            }
            else
            {
                List<int?> comp_id = _context.tbl_employee_company_map.Where(q => q.is_deleted == 0).Select(p => p.company_id).Distinct().ToList();

                for (int i = 0; i < comp_id.Count; i++)
                {
                    var data = _clEmployeeDetail.GetEmployeeByDate(comp_id[i] ?? 0, Convert.ToDateTime("01-01-2000"), DateTime.Now.AddDays(1)).Where(x => x.emp_status < 100 && _clsCurrentUser.CompanyId.Contains(x.company_id) && _clsCurrentUser.DownlineEmpId.Contains(x.employee_id)).ToList();

                    for (int J = 0; J < data.Count; J++)
                    {
                        int emp_dept_id = _context.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && x.employee_id == data[J].employee_id).department_id ?? 0;

                        if (dept_id == emp_dept_id)
                        {
                            objemp_list.Add(new
                            {
                                employee_id = data[J].employee_id,
                                emp_name_code = string.Format("{0} ({1})", data[J].emp_name, data[J].emp_code),
                            });
                        }

                    }

                }
            }

            return Ok(objemp_list);
        }

        [Route("GetEmployeeByCLD/{company_id}/{location_id}/{dept_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Employee))]
        public async Task<IActionResult> GetEmployeeByCLD(int company_id, int location_id, int dept_id)
        {
            ResponseMsg objrepsonse = new ResponseMsg();
            List<object> objemp_list = new List<object>();
            try
            {
                if (company_id > 0)
                {
                    var data = _clEmployeeDetail.GetEmployeeByDate(company_id, Convert.ToDateTime("01-01-2000"), DateTime.Now.AddDays(1)).Where(x => x.emp_status < 100 && _clsCurrentUser.CompanyId.Contains(x.company_id) && _clsCurrentUser.DownlineEmpId.Contains(x.employee_id)).ToList();

                    for (int i = 0; i < data.Count; i++)
                    {
                        var emp_dept_loc_id = _context.tbl_emp_officaial_sec.Where(x => x.is_deleted == 0 && x.employee_id == data[i].employee_id).FirstOrDefault();
                        if (emp_dept_loc_id != null)
                        {
                            if (location_id == emp_dept_loc_id.location_id && dept_id == emp_dept_loc_id.department_id)
                            {
                                objemp_list.Add(new
                                {
                                    employee_id = data[i].employee_id,
                                    emp_name_code = string.Format("{0} ({1})", data[i].emp_name, data[i].emp_code),
                                });
                            }
                        }


                    }


                }
                else
                {
                    List<int?> comp_id = _context.tbl_employee_company_map.Where(q => q.is_deleted == 0).Select(p => p.company_id).Distinct().ToList();

                    for (int i = 0; i < comp_id.Count; i++)
                    {
                        var data = _clEmployeeDetail.GetEmployeeByDate(comp_id[i] ?? 0, Convert.ToDateTime("01-01-2000"), DateTime.Now.AddDays(1)).Where(x => x.emp_status < 100 && _clsCurrentUser.CompanyId.Contains(x.company_id) && _clsCurrentUser.DownlineEmpId.Contains(x.employee_id)).ToList();


                        for (int J = 0; J < data.Count; J++)
                        {
                            var emp_dept_loc_id = _context.tbl_emp_officaial_sec.Where(x => x.is_deleted == 0 && x.employee_id == data[J].employee_id).FirstOrDefault();

                            if (emp_dept_loc_id != null)
                            {
                                //if (location_id == emp_dept_loc_id.location_id && dept_id == emp_dept_loc_id.department_id)
                                //{
                                //    objemp_list.Add(new
                                //    {
                                //        employee_id = data[J].employee_id,
                                //        emp_name_code = string.Format("{0} ({1})", data[J].emp_name, data[J].emp_code),
                                //    });
                                //}
                            }


                        }

                    }

                }

                return Ok(objemp_list);

            }
            catch (Exception ex)
            {
                objrepsonse.StatusCode = 1;
                objrepsonse.Message = ex.Message;

                return Ok(objrepsonse);
            }
        }

    #region **Start E-Separation**

        [Route("Save_Employee_Separation")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EseprationApplication))]
        public IActionResult Save_Employee_Separation()
        {

            Response_Msg objresponse = new Response_Msg();
            var files = Request.Form.Files;
            var a = HttpContext.Request.Form["AllData"];
            if (a.ToString() == null)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Invalid data !!";
                return Ok(objresponse);
            }
            CommonClass com = new CommonClass();
            Emp_Separation obj = new Emp_Separation();
            obj = com.ToObjectFromJSON<Emp_Separation>(a.ToString());
            obj.req_relieving_date = Convert.ToDateTime(obj.req_relieving_date1);
            string _file_pathh = string.Empty;
            if (!_clsCurrentUser.DownlineEmpId.Any(p => p == obj.emp_id))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Unauthorize Access...!";
                return Ok(objresponse);
            }

            if (!_clsCurrentUser.CompanyId.Contains(obj.company_id))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Unauthorize Company Access...!";
                return Ok(objresponse);
            }

            if (DateTime.Now.TimeOfDay > new TimeSpan(20, 0, 0))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Resignation Request can not be raised after 8:00 PM. please try again tomorrow...";
                return Ok(objresponse);
            }

            try
            {

                var exist = _context.tbl_emp_separation.Where(x => x.is_deleted == 0 && x.company_id == obj.company_id && x.emp_id == obj.emp_id).FirstOrDefault();

                if (exist != null && exist.is_cancel == 0 && exist.is_final_approve == 0)
                {
                    exist.is_deleted = 1;
                    exist.modified_by = _clsCurrentUser.EmpId;
                    exist.modified_dt = DateTime.Now;
                    _context.tbl_emp_separation.Update(exist);
                    _context.SaveChanges();
                }

                if (exist != null && exist.is_cancel == 0 && (exist.is_final_approve == 1 || exist.is_final_approve == 3))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Resignation Request already Raised and In Process, Please check report...!";
                }
                else if (exist != null && exist.is_cancel == 1 && _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == exist.sepration_id && x.is_final_approve != 1).Count() > 0)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Cancellation Request already raised, Please check report...!";
                }
                else
                {
                    using (var trans = _context.Database.BeginTransaction())
                    {
                        try
                        {
                            foreach (var FileData in files)
                            {
                                if (FileData != null && FileData.Length > 0)
                                {

                                    var ext = Path.GetExtension(FileData.FileName); //getting the extension

                                    string name = Path.GetFileNameWithoutExtension(FileData.FileName); //getting file name without extension  
                                    var webRoot = _hostingEnvironment.WebRootPath;
                                    string MyFileName = "ESeprationDocument" + DateTime.Now.Ticks.ToString() + ext;


                                    if (!Directory.Exists(webRoot + "/ESeprationDocuments"))
                                    {
                                        Directory.CreateDirectory(webRoot + "/ESeprationDocuments");
                                    }

                                    var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/ESeprationDocuments");
                                    //save file
                                    using (var fileStream = new FileStream(Path.Combine(path, MyFileName), FileMode.Create))
                                    {
                                        FileData.CopyTo(fileStream);
                                        _file_pathh = "/ESeprationDocuments/" + MyFileName;
                                    }
                                }
                            }

                            if ((_clsCurrentUser.Is_SuperAdmin || _clsCurrentUser.Is_HRAdmin) && string.IsNullOrEmpty(_file_pathh))
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Please Select a reference document or image of refrence mail to upload";
                                return Ok(objresponse);
                            }

                            var official_sec = _clEmployeeDetail.GetEmployeeByDate(obj.company_id, Convert.ToDateTime("01-01-2000"), DateTime.Now).Where(x => x.emp_status < 100).ToList();
                            var teos = official_sec.Where(x => x.employee_id == obj.emp_id).FirstOrDefault();
                            if (teos != null)
                            {
                                var total_notice_days = teos.emp_status == 2 ? Convert.ToInt32(_config["NoticeSetting:Probation"]) : teos.emp_status == 3 ? Convert.ToInt32(_config["NoticeSetting:Confirmed"]) : 0;
                                tbl_emp_separation objtbl = new tbl_emp_separation();
                                objtbl.resignation_dt = DateTime.Now;
                                objtbl.req_relieving_date = Convert.ToDateTime(obj.req_relieving_date1).Date < DateTime.Now.Date ? DateTime.Now.AddDays(-1).AddDays(total_notice_days) : obj.req_relieving_date;
                                objtbl.policy_relieving_dt = DateTime.Now.AddDays(-1).AddDays(total_notice_days);
                                objtbl.final_relieve_dt = obj.req_relieving_date;
                                objtbl.is_relieving_dt_change = 0;
                                objtbl.emp_id = obj.emp_id;

                                //objtbl.req_notice_days = (obj.final_relieve_dt.Date == obj.policy_relieving_dt.Date) ? total_notice_days : obj.req_notice_days;
                                //objtbl.diff_notice_days = (obj.final_relieve_dt.Date == obj.policy_relieving_dt.Date) ? 0 : obj.diff_notice_days;
                                objtbl.req_notice_days = (objtbl.req_relieving_date.Date == objtbl.policy_relieving_dt.Date) ? total_notice_days : obj.req_notice_days;
                                objtbl.diff_notice_days = (objtbl.req_relieving_date.Date == objtbl.policy_relieving_dt.Date) ? 0 : obj.diff_notice_days;
                                objtbl.approver1_id = null;
                                objtbl.app1_dt = Convert.ToDateTime("01-01-2000");
                                objtbl.is_approved1 = 0;
                                objtbl.app1_remarks = "";
                                objtbl.approver2_id = null;
                                objtbl.is_approved2 = 0;
                                objtbl.app2_remarks = "";
                                objtbl.app2_dt = Convert.ToDateTime("01-01-2000");
                                objtbl.apprver3_id = null;
                                objtbl.is_approved3 = 0;
                                objtbl.app3_remarks = "";
                                objtbl.app3_dt = Convert.ToDateTime("01-01-2000");
                                objtbl.is_final_approve = 0;
                                objtbl.is_deleted = 0;
                                objtbl.cancelation_dt = Convert.ToDateTime("01-01-2000");
                                objtbl.req_reason = obj.req_reason;
                                objtbl.req_remarks = obj.req_remarks;
                                objtbl.created_by = obj.created_by;
                                objtbl.company_id = obj.company_id;
                                objtbl.created_dt = DateTime.Now;
                                objtbl.modified_by = 0;
                                objtbl.modified_dt = Convert.ToDateTime("01-01-2000");
                                objtbl.is_relieving_dt_change = 0;
                                objtbl.is_admin_approved = 0;
                                objtbl.admin_remarks = "";
                                objtbl.admin_id = null;
                                objtbl.admin_dt = Convert.ToDateTime("01-01-2000");
                                objtbl.is_cancel = 0;
                                objtbl.ref_doc_path = _file_pathh;


                                _context.AddRange(objtbl);
                                _context.SaveChanges();

                                trans.Commit();


                                MailSystem obj_ms = new MailSystem(_appSettings.Value.DbConnectionString, _config);

                                Task task = Task.Run(() => obj_ms.EmpSeprationRequestMail(Convert.ToInt32(objtbl.emp_id), objtbl.resignation_dt, objtbl.final_relieve_dt, objtbl.req_notice_days, objtbl.diff_notice_days, objtbl.policy_relieving_dt, objtbl.req_reason, objtbl.req_remarks));
                                task.Wait();

                                objresponse.StatusCode = 0;
                                objresponse.Message = "Employee Resignation Request Raised Successfully... ";
                            }
                            else
                            {
                                trans.Rollback();
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Invalid Employee or already seprated...!!";
                            }
                        }
                        catch (Exception ex)
                        {
                            trans.Rollback();
                            objresponse.StatusCode = 1;
                            objresponse.Message = ex.Message;
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
            }

            return Ok(objresponse);
        }

        //[Route("Get_EmployeeSeprationDetails/{from_date}/{to_date}/{companyid}/{for_all_emp}/{emp_id}/{is_managerr_dec}")]
        [Route("Get_EmployeeSeprationDetails/{companyid}/{emp_id}")]
        // [Route("Get_EmployeeSeprationDetails/{from_date}/{to_date}/{companyid}/{emp_id}")]
        // 0 for all employee , 1 for selected emp  //Get Report
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.ESeprationReport))]
        public IActionResult Get_EmployeeSeprationDetails([FromRoute] DateTime from_date, DateTime to_date, int companyid, int emp_id)
        {
            try
            {
                ResponseMsg objResult = new ResponseMsg();
                if (!_clsCurrentUser.DownlineEmpId.Any(p => p == emp_id))
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Unauthorize Access...!";
                    return Ok(objResult);
                }

                if (companyid > 0)
                {
                    if (!_clsCurrentUser.CompanyId.Contains(companyid))
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = "Unauthorize Company Access...!";
                        return Ok(objResult);
                    }

                }




                if (_clsCurrentUser.Is_Hod == 1)
                {

                    //var manager_emp_list = _context.tbl_emp_manager.Where(a => (a.m_one_id == Employee_Id || a.m_two_id == Employee_Id || a.m_three_id == Employee_Id) || (a.m_one_id == _emp_id || a.m_two_id == _emp_id || a.m_three_id == _emp_id) && a.is_deleted == 0).Select(p => p.employee_id).Distinct().ToList();

                    // Esepration Approval Report of Manager
                    var data = _context.tbl_emp_separation.OrderByDescending(y => y.sepration_id).Where(x => _clsCurrentUser.DownlineEmpId.Contains(x.emp_id) && _clsCurrentUser.CompanyId.Contains(x.company_id) && x.is_withdrawal == 0 && x.is_deleted == 0).Select(p => new
                    {
                        p.sepration_id,
                        p.emp_id,
                        p.is_withdrawal,
                        p.is_deleted,
                        emp_name = string.Format("{0} {1} {2}",
                                   p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_first_name,
                                   p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_middle_name,
                                   p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_last_name),
                        emp_code = p.emp_mstr.emp_code,
                        //p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).date_of_joining,
                        //p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_location_master.location_name,
                        //p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_department_master.department_name,
                        p.resignation_dt,
                        p.policy_relieving_dt,
                        p.req_relieving_date,
                        p.req_notice_days,
                        p.diff_notice_days,
                        p.req_reason,
                        p.req_remarks,
                        p.final_relieve_dt,

                        final_status = _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve == 0 ? "Cancel Req Pending" : _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve == 2 ? "Approved" : _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve == 1 ? "Cancelled" : (p.is_cancel == 0 ? (p.is_final_approve == 0 ? "Pending" : p.is_final_approve == 1 ? "Approved" : p.is_final_approve == 2 ? "Rejected" : p.is_final_approve == 3 ? "In Process" : "-") : p.is_cancel == 1 ? "Cancelled" : ""),

                        mystatus = (p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_one_id == _clsCurrentUser.EmpId ? (p.is_approved1 == 0 ? "Pending" : p.is_approved1 == 1 ? "Approve" : p.is_approved1 == 2 ? "Reject" : "-") :
                                   p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_two_id == _clsCurrentUser.EmpId ? (p.is_approved2 == 0 ? "Pending" : p.is_approved2 == 1 ? "Approve" : p.is_approved2 == 2 ? "Reject" : "-") :
                                   p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_three_id == _clsCurrentUser.EmpId ? (p.is_approved3 == 0 ? "Pending" : p.is_approved3 == 1 ? "Approve" : p.is_approved3 == 2 ? "Reject" : "-") : "-"),
                        myremarks = (p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_one_id == _clsCurrentUser.EmpId ? p.app1_remarks :
                                   p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_two_id == _clsCurrentUser.EmpId ? p.app2_remarks :
                                   p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_three_id == _clsCurrentUser.EmpId ? p.app3_remarks : "-"),
                        my_approver_dt = (p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_one_id == _clsCurrentUser.EmpId ? p.app1_dt :
                                   p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_two_id == _clsCurrentUser.EmpId ? p.app2_dt :
                                   p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_three_id == _clsCurrentUser.EmpId ? p.app3_dt : Convert.ToDateTime("01-01-2000")),
                        is_cancel = p.is_cancel == 0 ? "No" : p.is_cancel == 1 ? "Yes" : "-",
                        p.cancel_remarks,
                        company_name = p.comp_master.company_name,
                        p.company_id,
                        p.ref_doc_path,
                        doc_path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + p.ref_doc_path)
                    }).ToList();


                    if (companyid > 0)
                    {
                        data.RemoveAll(x => x.company_id != companyid);
                    }

                    if (companyid == -1)
                    {
                        data = data.Where(x => x.final_status == "Approve").ToList();
                    }


                    return Ok(data);


                    //                    }
                }
                else if (_clsCurrentUser.Is_Hod == 2)
                {
                    //var emp_dtl = _clEmployeeDetail.GetEmployeeByDate(companyid, from_date, to_date);

                    //List<int> emp_ids = emp_dtl.Select(p => p.employee_id).ToList();
                    var data = _context.tbl_emp_separation.OrderByDescending(y => y.sepration_id).Where(x => (x.is_withdrawal == 1 && x.is_deleted == 0) ? true : (_clsCurrentUser.DownlineEmpId.Contains(x.emp_id) && _clsCurrentUser.CompanyId.Contains(x.company_id) && x.is_withdrawal == 0 && x.is_deleted == 0)).Select(p => new
                    {
                        p.sepration_id,
                        p.emp_id,
                        emp_name = string.Format("{0} {1} {2}",
                                  p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_first_name,
                                  p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_middle_name,
                                  p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_last_name),
                        emp_code = p.emp_mstr.emp_code,
                        p.resignation_dt,
                        p.policy_relieving_dt,
                        p.req_relieving_date,
                        p.req_notice_days,
                        p.diff_notice_days,
                        p.req_reason,
                        p.req_remarks,
                        //doj = p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).date_of_joining,
                        departmenet_ = p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_department_master.department_name,
                        final_status = _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve == 0 ? "Cancel Req Pending" : _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve == 2 ? "Approved" : _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve == 1 ? "Cancelled" : (p.is_cancel == 0 ? (p.is_final_approve == 0 ? "Pending" : p.is_final_approve == 1 ? "Approved" : p.is_final_approve == 2 ? "Rejected" : p.is_final_approve == 3 ? "In Process" : "-") : p.is_cancel == 1 ? "Cancelled" : ""),
                        p.is_deleted,
                        p.is_withdrawal,
                        p.emp_mstr.tbl_emp_officaial_sec.OrderByDescending(y => y.emp_official_section_id).FirstOrDefault(y => y.is_deleted == 0).tbl_location_master.location_name,
                        p.emp_mstr.tbl_emp_officaial_sec.OrderByDescending(y => y.emp_official_section_id).FirstOrDefault(y => y.is_deleted == 0).tbl_department_master.department_name,
                        p.emp_mstr.tbl_emp_officaial_sec.OrderByDescending(y => y.emp_official_section_id).FirstOrDefault(y => y.is_deleted == 0).date_of_joining,
                        p.is_relieving_dt_change,
                        p.final_relieve_dt,
                        p.admin_id,
                        mystatus = p.is_admin_approved == 0 ? "Pending" : p.is_admin_approved == 1 ? "Approved" : p.is_admin_approved == 2 ? "Reject" : "",
                        my_approver_dt = p.admin_dt,
                        myremarks = p.admin_remarks,
                        is_cancel = p.is_cancel == 0 ? "No" : p.is_cancel == 1 ? "Yes" : "-",
                        p.cancel_remarks,
                        company_name = p.comp_master.company_name,
                        p.company_id,
                        p.ref_doc_path,
                        doc_path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + p.ref_doc_path)
                    }).ToList();
                    //data = data.Where(x => x.is_deleted == 0).ToList();
                    // return Ok(data);
                    //}

                    if (companyid > 0)
                    {
                        data.RemoveAll(x => x.company_id != companyid);
                    }
                    if (companyid == -1)
                    {
                        data = data.Where(x => x.is_withdrawal == 1 || x.final_status == "Approved").ToList();
                    }

                    return Ok(data);

                }
                else
                {
                    var data = _context.tbl_emp_separation.Where(x => x.emp_id == emp_id && x.is_withdrawal == 0 && x.is_deleted == 0).Select(p => new
                    {
                        p.sepration_id,
                        p.emp_id,
                        emp_name = string.Format("{0} {1} {2}",
                             p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_first_name,
                             p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_middle_name,
                             p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_last_name),
                        emp_code = p.emp_mstr.emp_code,
                        //p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).date_of_joining,
                        //p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_location_master.location_name,
                        //p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_department_master.department_name,
                        p.resignation_dt,
                        p.policy_relieving_dt,
                        p.req_relieving_date,
                        p.req_notice_days,
                        p.diff_notice_days,
                        p.req_reason,
                        p.req_remarks,
                        final_status = _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve == 0 ? "Cancel Req Pending" : _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve == 2 ? "Approved" : _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve == 1 ? "Cancelled" : (p.is_cancel == 0 ? (p.is_final_approve == 0 ? "Pending" : p.is_final_approve == 1 ? "Approved" : p.is_final_approve == 2 ? "Rejected" : p.is_final_approve == 3 ? "In Process" : "-") : p.is_cancel == 1 ? "Cancelled" : ""),
                        p.is_deleted,
                        p.is_relieving_dt_change,
                        p.final_relieve_dt,
                        is_cancel = p.is_cancel == 0 ? "No" : p.is_cancel == 1 ? "Yes" : "-",
                        p.cancel_remarks,
                        company_name = p.comp_master.company_name,
                        p.company_id,
                        mystatus = p.is_admin_approved == 0 ? "Pending" : p.is_admin_approved == 1 ? "Approved" : p.is_admin_approved == 2 ? "Rejected" : "",
                        my_approver_dt = p.admin_dt,
                        myremarks = p.admin_remarks,
                        p.ref_doc_path,
                        doc_path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + p.ref_doc_path)
                    }).ToList();

                    if (companyid > 0)
                    {
                        data.RemoveAll(x => x.company_id != companyid);
                    }


                    return Ok(data);

                }


            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }


        //[Route("Get_EmployeeSeprationDetailsList/{from_date}/{to_date}/{companyid}/{emp_id}")]
        [Route("Get_EmployeeSeprationDetailsList")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.ESeprationReport))]
        // 0 for all employee , 1 for selected emp  //Get Report
        public IActionResult Get_EmployeeSeprationDetailsList()
        {
            try
            {
                ResponseMsg objResult = new ResponseMsg();
                //if (!_clsCurrentUser.DownlineEmpId.Any(p => p == emp_id))
                //{
                //    objResult.StatusCode = 1;
                //    objResult.Message = "Unauthorize Access...!";
                //    return Ok(objResult);
                //}

                //if (companyid > 0)
                //{
                //    if (!_clsCurrentUser.CompanyId.Contains(companyid))
                //    {
                //        objResult.StatusCode = 1;
                //        objResult.Message = "Unauthorize Company Access...!";
                //        return Ok(objResult);
                //    }

                //}




                if (_clsCurrentUser.Is_Hod == 1)
                {

                    //var manager_emp_list = _context.tbl_emp_manager.Where(a => (a.m_one_id == Employee_Id || a.m_two_id == Employee_Id || a.m_three_id == Employee_Id) || (a.m_one_id == _emp_id || a.m_two_id == _emp_id || a.m_three_id == _emp_id) && a.is_deleted == 0).Select(p => p.employee_id).Distinct().ToList();

                    // Esepration Approval Report of Manager
                    // var data = _context.tbl_emp_separation.OrderByDescending(y => y.sepration_id).Where(x => _clsCurrentUser.DownlineEmpId.Contains(x.emp_id) && _clsCurrentUser.CompanyId.Contains(x.company_id)).Select(p => new
                    var data = _context.tbl_emp_separation.OrderByDescending(y => y.sepration_id).Where(x => x.is_withdrawal == 0 && _clsCurrentUser.DownlineEmpId.Contains(x.emp_id)).Select(p => new
                    {
                        p.sepration_id,
                        p.emp_id,
                        emp_name = string.Format("{0} {1} {2}",
                                    p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_first_name,
                                    p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_middle_name,
                                    p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_last_name),
                        emp_code = p.emp_mstr.emp_code,
                        p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).date_of_joining,
                        p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_location_master.location_name,
                        p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_department_master.department_name,
                        p.resignation_dt,
                        p.policy_relieving_dt,
                        p.req_relieving_date,
                        p.req_notice_days,
                        p.diff_notice_days,
                        p.req_reason,
                        p.req_remarks,
                        p.final_relieve_dt,

                        final_status = p.is_cancel == 0 ? (p.is_final_approve == 0 ? "Pending" : p.is_final_approve == 1 ? "Approve" : p.is_final_approve == 2 ? "Reject" : p.is_final_approve == 3 ? "In Process" : "-") : p.is_cancel == 1 ? "Cancelled" : "",
                        mystatus = (p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_one_id == _clsCurrentUser.EmpId ? (p.is_approved1 == 0 ? "Pending" : p.is_approved1 == 1 ? "Approve" : p.is_approved1 == 2 ? "Reject" : "-") :
                                    p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_two_id == _clsCurrentUser.EmpId ? (p.is_approved2 == 0 ? "Pending" : p.is_approved2 == 1 ? "Approve" : p.is_approved2 == 2 ? "Reject" : "-") :
                                    p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_three_id == _clsCurrentUser.EmpId ? (p.is_approved3 == 0 ? "Pending" : p.is_approved3 == 1 ? "Approve" : p.is_approved3 == 2 ? "Reject" : "-") : "-"),
                        myremarks = (p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_one_id == _clsCurrentUser.EmpId ? p.app1_remarks :
                                    p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_two_id == _clsCurrentUser.EmpId ? p.app2_remarks :
                                    p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_three_id == _clsCurrentUser.EmpId ? p.app3_remarks : "-"),
                        my_approver_dt = (p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_one_id == _clsCurrentUser.EmpId ? p.app1_dt :
                                    p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_two_id == _clsCurrentUser.EmpId ? p.app2_dt :
                                    p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_three_id == _clsCurrentUser.EmpId ? p.app3_dt : Convert.ToDateTime("01-01-2000")),
                        is_cancel = p.is_cancel == 0 ? "No" : p.is_cancel == 1 ? "Yes" : "-",
                        p.cancel_remarks,
                        company_name = p.comp_master.company_name,
                        p.company_id,
                    }).ToList();


                    //if (companyid > 0)
                    //{
                    //    data.RemoveAll(x => x.company_id != companyid);
                    //}


                    return Ok(data);


                    //                    }
                }
                else if (_clsCurrentUser.Is_Hod == 2)
                {
                    //var emp_dtl = _clEmployeeDetail.GetEmployeeByDate(companyid, from_date, to_date);

                    //List<int> emp_ids = emp_dtl.Select(p => p.employee_id).ToList();
                    // var data = _context.tbl_emp_separation.OrderByDescending(y => y.sepration_id).Where(x => _clsCurrentUser.DownlineEmpId.Contains(x.emp_id) && _clsCurrentUser.CompanyId.Contains(x.company_id)).Select(p => new
                    var data = _context.tbl_emp_separation.OrderByDescending(y => y.sepration_id).Where(x => x.is_withdrawal == 0 && _clsCurrentUser.DownlineEmpId.Contains(x.emp_id)).Select(p => new
                    {
                        p.sepration_id,
                        p.emp_id,
                        emp_name = string.Format("{0} {1} {2}",
                             p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_first_name,
                             p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_middle_name,
                             p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_last_name),
                        emp_code = p.emp_mstr.emp_code,
                        p.resignation_dt,
                        p.policy_relieving_dt,
                        p.req_relieving_date,
                        p.req_notice_days,
                        p.diff_notice_days,
                        p.req_reason,
                        p.req_remarks,
                        doj = p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).date_of_joining,
                        departmenet_ = p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_department_master.department_name,
                        final_status = p.is_cancel == 0 ? (p.is_final_approve == 0 ? "Pending" : p.is_final_approve == 1 ? "Approve" : p.is_final_approve == 2 ? "Reject" : p.is_final_approve == 3 ? "In Process" : "-") : p.is_cancel == 1 ? "Cancelled" : "",
                        p.is_deleted,
                        p.emp_mstr.tbl_emp_officaial_sec.OrderByDescending(y => y.emp_official_section_id).FirstOrDefault(y => y.is_deleted == 0).tbl_location_master.location_name,
                        p.emp_mstr.tbl_emp_officaial_sec.OrderByDescending(y => y.emp_official_section_id).FirstOrDefault(y => y.is_deleted == 0).tbl_department_master.department_name,
                        p.emp_mstr.tbl_emp_officaial_sec.OrderByDescending(y => y.emp_official_section_id).FirstOrDefault(y => y.is_deleted == 0).date_of_joining,
                        p.is_relieving_dt_change,
                        p.final_relieve_dt,
                        p.admin_id,
                        mystatus = p.is_admin_approved == 0 ? "Pending" : p.is_admin_approved == 1 ? "Approved" : p.is_admin_approved == 2 ? "Reject" : "",
                        my_approver_dt = p.admin_dt,
                        myremarks = p.admin_remarks,
                        is_cancel = p.is_cancel == 0 ? "No" : p.is_cancel == 1 ? "Yes" : "-",
                        p.cancel_remarks,
                        company_name = p.comp_master.company_name,
                        p.company_id,
                    }).ToList();

                    // return Ok(data);
                    //}

                    //if (companyid > 0)
                    //{
                    //    data.RemoveAll(x => x.company_id != companyid);
                    //}


                    return Ok(data);

                }
                else
                {


                    var data = _context.tbl_emp_separation.Where(x => x.emp_id == _clsCurrentUser.EmpId).Select(p => new
                    {
                        p.sepration_id,
                        p.emp_id,
                        emp_name = string.Format("{0} {1} {2}",
                             p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_first_name,
                             p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_middle_name,
                             p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_last_name),
                        emp_code = p.emp_mstr.emp_code,
                        p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).date_of_joining,
                        p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_location_master.location_name,
                        p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_department_master.department_name,
                        p.resignation_dt,
                        p.policy_relieving_dt,
                        p.req_relieving_date,
                        p.req_notice_days,
                        p.diff_notice_days,
                        p.req_reason,
                        p.req_remarks,
                        final_status = p.is_cancel == 0 ? (p.is_final_approve == 0 ? "Pending" : p.is_final_approve == 1 ? "Approve" : p.is_final_approve == 2 ? "Reject" : p.is_final_approve == 3 ? "In Process" : "-") : p.is_cancel == 1 ? "Cancelled" : "",
                        p.is_deleted,
                        p.is_relieving_dt_change,
                        p.final_relieve_dt,
                        is_cancel = p.is_cancel == 0 ? "No" : p.is_cancel == 1 ? "Yes" : "-",
                        p.cancel_remarks,
                        company_name = p.comp_master.company_name,
                        p.company_id,
                        mystatus = p.is_admin_approved == 0 ? "Pending" : p.is_admin_approved == 1 ? "Approved" : p.is_admin_approved == 2 ? "Reject" : "",
                        my_approver_dt = p.admin_dt,
                        myremarks = p.admin_remarks,
                    }).ToList();

                    //if (companyid > 0)
                    //{
                    //    data.RemoveAll(x => x.company_id != companyid);
                    //}


                    return Ok(data);

                }


            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }

        [Route("Get_EmployeeSeprationDetailsBySep_Id/{sepration_id}/{emp_id}/{company_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.ESeprationReport))]
        public IActionResult Get_EmployeeSeprationDetailsBySep_Id([FromRoute] int sepration_id, int emp_id, int company_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                if (!_clsCurrentUser.DownlineEmpId.Any(p => p == emp_id))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access...!";
                    return Ok(objresponse);
                }

                if (!_clsCurrentUser.CompanyId.Contains(company_id))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Company Access...!";
                    return Ok(objresponse);
                }

                var data = _context.tbl_emp_separation.Where(x => _clsCurrentUser.CompanyId.Contains(x.company_id) && x.sepration_id == sepration_id && x.emp_id == emp_id).Select(p => new
                {
                    p.sepration_id,
                    p.emp_id,
                    //p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).date_of_joining,
                    p.emp_mstr.tbl_emp_officaial_sec.OrderByDescending(q => q.emp_official_section_id).FirstOrDefault(q => q.is_deleted == 0).tbl_department_master.department_name,
                    p.emp_mstr.tbl_emp_desi_allocation.OrderByDescending(q => q.emp_grade_id).FirstOrDefault(q => q.applicable_from_date.Date <= p.resignation_dt.Date && p.resignation_dt.Date <= q.applicable_to_date.Date && q.desig_id != null).tbl_designation_master.designation_name,
                    p.emp_mstr.tbl_emp_grade_allocation.OrderByDescending(q => q.emp_grade_id).FirstOrDefault(q => q.applicable_from_date.Date <= p.resignation_dt.Date && p.resignation_dt.Date <= q.applicable_to_date.Date && q.grade_id != null).tbl_grade_master.grade_name,
                    //p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_location_master.location_name,
                    policy_notice_days = p.diff_notice_days < 0 ? (p.req_notice_days - (p.diff_notice_days)) : p.diff_notice_days == 0 ? p.req_notice_days : 0,
                    p.resignation_dt,
                    p.req_relieving_date,
                    p.req_notice_days,
                    p.diff_notice_days,
                    p.notice_day,
                    p.policy_relieving_dt,
                    is_withdrawal = p.is_withdrawal == 1 ? "Yes" : "No",
                    p.req_reason,
                    p.req_remarks,
                    p.is_relieving_dt_change,
                    p.final_relieve_dt,
                    dob_ = p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).date_of_birth,
                    p.approver1_id,
                    p.is_approved1,
                    app1_dt = p.app1_dt.ToString("dd-MM-yyyy"),
                    p.app1_remarks,
                    p.approver2_id,
                    p.is_approved2,
                    app2_dt = p.app2_dt.ToString("dd-MM-yyyy"),
                    p.app2_remarks,
                    p.apprver3_id,
                    p.is_approved3,
                    p.app3_remarks,
                    app3_dt = p.app3_dt.ToString("dd-MM-yyy"),
                    p.admin_id,
                    p.is_admin_approved,
                    p.admin_remarks,
                    admin_dt = p.admin_dt.ToString("dd-MM-yyyy"),
                    is_cancel = _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve != 2 ? "Yes" : (p.is_cancel == 0 ? "No" : p.is_cancel == 1 ? "Yes" : ""),
                    cancel_remarks = _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve != 2 ? _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().cancel_remarks : p.cancel_remarks,
                    cancelation_dt = _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve != 2 ? _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().created_dt : p.cancelation_dt,
                    is_final_approve = _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).Count() > 0 ? _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve : p.is_final_approve,
                    p.company_id
                }).FirstOrDefault();

                var data1 = _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == sepration_id && x.is_deleted == 0).FirstOrDefault();

                List<object> _approval_history = new List<object>();

                var managers = _clEmployeeDetail.Get_Emp_manager_dtl(emp_id);
    #region old
                //var emp_manager_dtl = _context.tbl_emp_manager.Where(x => x.is_deleted == 0 && x.employee_id == emp_id && x.tem.tbl_employee_company_map.FirstOrDefault(q => q.is_deleted == 0).company_id == company_id).Select(p => new
                //{
                //    p.employee_id,
                //    p.emp_mgr_id,
                //    m_one_id = p.m_one_id == null ? 0 : p.m_one_id,
                //    m_two_id = p.m_two_id == null ? 0 : p.m_two_id,
                //    m_three_id = p.m_three_id == null ? 0 : p.m_three_id,
                //    m_one_name = string.Format("{0} {1} {2} ({3})", p.tbl_employee_master1.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_first_name,
                //                p.tbl_employee_master1.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_middle_name,
                //                p.tbl_employee_master1.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_last_name,
                //                p.tbl_employee_master1.emp_code),
                //    m_two_name = string.Format("{0} {1} {2} ({3})", p.tbl_employee_master2.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_first_name,
                //                p.tbl_employee_master2.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_middle_name,
                //                p.tbl_employee_master2.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_last_name,
                //                p.tbl_employee_master2.emp_code),
                //    m_three_name = string.Format("{0} {1} {2} ({3})", p.tbl_employee_master3.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_first_name,
                //                p.tbl_employee_master3.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_middle_name,
                //                p.tbl_employee_master3.tbl_emp_officaial_sec.FirstOrDefault(x => x.is_deleted == 0 && !string.IsNullOrEmpty(x.employee_first_name)).employee_last_name,
                //                p.tbl_employee_master3.emp_code),


                //}).FirstOrDefault();
    #endregion

                if (managers != null && managers.Count > 0)
                {
                    if (managers.FirstOrDefault().m_one_id != 0)
                    {
                        _approval_history.Add(new
                        {
                            _id = managers.FirstOrDefault().m_one_id,
                            _name = managers.FirstOrDefault().manager_name_code,
                            _action = data.is_approved1 == 0 ? "Pending" : data.is_approved1 == 1 ? "Approved" : data.is_approved1 == 2 ? "Rejected" : "",
                            _remarks = data.app1_remarks,
                            _dt = data.app1_dt != "01-01-2000" ? data.app1_dt : "",

                        });
                    }
                    if (managers.FirstOrDefault().m_two_id != 0)
                    {
                        _approval_history.Add(new
                        {
                            _id = managers.FirstOrDefault().m_two_id,
                            _name = managers.FirstOrDefault().m_two_name_code,
                            _action = data.is_approved2 == 0 ? "Pending" : data.is_approved2 == 1 ? "Approved" : data.is_approved2 == 2 ? "Rejected" : "",
                            _remarks = data.app2_remarks,
                            _dt = data.app2_dt != "01-01-2000" ? data.app2_dt : "",

                        });

                    }
                    if (managers.FirstOrDefault().m_three_id != 0)
                    {
                        _approval_history.Add(new
                        {
                            _id = managers.FirstOrDefault().m_three_id,
                            _name = managers.FirstOrDefault().m_three_name_code,
                            _action = data.is_approved3 == 0 ? "Pending" : data.is_approved3 == 1 ? "Approved" : data.is_approved3 == 2 ? "Rejected" : "",
                            _remarks = data.app3_remarks,
                            _dt = data.app3_dt != "01-01-2000" ? data.app3_dt : "",

                        });
                    }
                }

                if (data.admin_id != null)
                {
                    var teos = _context.tbl_emp_officaial_sec.Where(x => x.is_deleted == 0 && x.employee_id == data.admin_id).Select(p => new
                    {
                        emp_name_code = string.Format("{0} {1} {2} ({3})",
                          p.employee_first_name,
                          p.employee_middle_name,
                          p.employee_last_name,
                          p.tbl_employee_id_details.emp_code),
                    }).FirstOrDefault();


                    _approval_history.Add(new
                    {
                        _id = data.admin_id,
                        _name = teos != null ? teos.emp_name_code + "(Admin)" : "Admin",
                        _action = data.is_admin_approved == 0 ? "Pending" : data.is_admin_approved == 1 ? "Approve" : data.is_admin_approved == 2 ? "Reject" : "-",
                        _remarks = data.admin_remarks,
                        _dt = data.admin_dt != "01-01-2000" ? data.admin_dt : "",
                    });
                }

                if (data1 != null)
                {
                    if (managers != null && managers.Count > 0)
                    {
                        if (managers.FirstOrDefault().m_one_id != 0)
                        {
                            _approval_history.Add(new
                            {
                                _id = managers.FirstOrDefault().m_one_id,
                                _name = managers.FirstOrDefault().manager_name_code,
                                _action = data1.is_approved1 == 0 ? "Cancellation Request Pending" : data1.is_approved1 == 1 ? "Cancellation Request Approved" : data1.is_approved1 == 2 ? "Cancellation Request Rejected" : "",
                                _remarks = data1.app1_remarks,
                                _dt = data1.app1_dt.ToString("dd-MM-yyyy") != "01-01-2000" ? data1.app1_dt.ToString("dd-MM-yyyy") : "",

                            });
                        }
                        if (managers.FirstOrDefault().m_two_id != 0)
                        {
                            _approval_history.Add(new
                            {
                                _id = managers.FirstOrDefault().m_two_id,
                                _name = managers.FirstOrDefault().m_two_name_code,
                                _action = data1.is_approved2 == 0 ? "Cancellation Request Pending" : data1.is_approved2 == 1 ? "Cancellation Request Approved" : data1.is_approved2 == 2 ? "Cancellation Request Rejected" : "",
                                _remarks = data1.app2_remarks,
                                _dt = data1.app2_dt.ToString("dd-MM-yyyy") != "01-01-2000" ? data1.app2_dt.ToString("dd-MM-yyyy") : "",

                            });

                        }
                        if (managers.FirstOrDefault().m_three_id != 0)
                        {
                            _approval_history.Add(new
                            {
                                _id = managers.FirstOrDefault().m_three_id,
                                _name = managers.FirstOrDefault().m_three_name_code,
                                _action = data1.is_approved3 == 0 ? "Cancellation Request Pending" : data1.is_approved3 == 1 ? "Cancellation Request Approved" : data1.is_approved3 == 2 ? "Cancellation Request Rejected" : "",
                                _remarks = data1.app3_remarks,
                                _dt = data1.app3_dt.ToString("dd-MM-yyyy") != "01-01-2000" ? data1.app3_dt.ToString("dd-MM-yyyy") : "",

                            });
                        }
                    }

                    if (data1.admin_id != null)
                    {
                        var teos = _context.tbl_emp_officaial_sec.Where(x => x.is_deleted == 0 && x.employee_id == data1.admin_id).Select(p => new
                        {
                            emp_name_code = string.Format("{0} {1} {2} ({3})",
                              p.employee_first_name,
                              p.employee_middle_name,
                              p.employee_last_name,
                              p.tbl_employee_id_details.emp_code),
                        }).FirstOrDefault();


                        _approval_history.Add(new
                        {
                            _id = data1.admin_id,
                            _name = teos != null ? teos.emp_name_code + "(Admin)" : "Admin",
                            _action = data1.is_admin_approved == 0 ? "Cancellation Request Pending" : data1.is_admin_approved == 1 ? "Cancellation Request Approve" : data1.is_admin_approved == 2 ? "Cancellation Request Reject" : "-",
                            _remarks = data1.admin_remarks,
                            _dt = data1.admin_dt.ToString("dd-MM-yyyy") != "01-01-2000" ? data1.admin_dt.ToString("dd-MM-yyyy") : "",
                        });
                    }


                }

                if (_approval_history.Count == 0)
                {
                    _approval_history.Add(new
                    {
                        _id = 0,
                        _name = "",
                        _action = "",
                        _remarks = "",
                        _dt = "",
                    });
                }


                var result = new { data = data, _approval_history = _approval_history };

                return Ok(result);
                // return Ok(data);
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }

        [Route("Get_PendingESeprationDetails/{emp_id}/{company_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.EseprationApproval))] // Get Only Pending Requests For Approval
        public IActionResult Get_PendingESeprationDetails([FromRoute] int emp_id, int company_id)
        {
            Response_Msg objresponse = new Response_Msg();

            if (!_clsCurrentUser.DownlineEmpId.Any(p => p == emp_id))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Unauthorize Access...!";
                return Ok(objresponse);
            }

            if (!_clsCurrentUser.CompanyId.Any(p => p == company_id))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Unauthorize Company Access...!";
                return Ok(objresponse);
            }

            if (_clsCurrentUser.Is_Hod == 1 || _clsCurrentUser.Is_Hod == 2)
            {
                var data = _context.tbl_emp_separation.OrderBy(y => y.sepration_id).Where(x => x.is_deleted == 0 && x.is_withdrawal == 0 && x.is_cancel == 0 && x.is_final_approve != 2 && x.is_final_approve != 1 && (_clsCurrentUser.DownlineEmpId.Contains(x.emp_id) && _clsCurrentUser.EmpId != x.emp_id) && _clsCurrentUser.CompanyId.Contains(x.company_id)).Select(p => new
                {
                    p.sepration_id,
                    p.emp_id,
                    p.resignation_dt,
                    p.req_relieving_date,
                    p.req_notice_days,
                    p.diff_notice_days,
                    p.policy_relieving_dt,
                    p.req_reason,
                    p.req_remarks,
                    p.app1_dt,
                    p.approver1_id,
                    p.app1_remarks,
                    p.is_approved1,
                    p.app2_dt,
                    p.approver2_id,
                    p.app2_remarks,
                    p.is_approved2,
                    p.app3_dt,
                    p.apprver3_id,
                    p.app3_remarks,
                    p.is_approved3,
                    final_status = p.is_final_approve == 0 ? "Pending" : p.is_final_approve == 1 ? "Approve" : p.is_final_approve == 2 ? "Reject" : p.is_final_approve == 3 ? "Cancel" : "-",
                    emp_name = string.Format("{0} {1} {2}",
                                 p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0 && !string.IsNullOrEmpty(q.employee_first_name)).employee_first_name,
                                 p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0 && !string.IsNullOrEmpty(q.employee_first_name)).employee_middle_name,
                                 p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0 && !string.IsNullOrEmpty(q.employee_first_name)).employee_last_name),
                    emp_code = p.emp_mstr.emp_code,
                    emp_dept = p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0 && !string.IsNullOrEmpty(q.employee_first_name)).tbl_department_master.department_name,
                    emp_doj = p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0 && !string.IsNullOrEmpty(q.employee_first_name)).date_of_joining,
                    mystatus = p.is_admin_approved == 0 ? "Pending" : p.is_admin_approved == 1 ? "Approved" : p.is_admin_approved == 2 ? "Reject" : "",
                    p.is_relieving_dt_change,
                    p.final_relieve_dt,
                }).Distinct().ToList();
                return Ok(data);
            }
            else
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "NO Pending Request available for you";
                return Ok(objresponse);
            }

    #region old
            //try
            //{

            //    if (ob.is_manager == 1)
            //    {
            //        var data = _context.tbl_emp_separation.OrderBy(y => y.sepration_id).Where(x => x.is_deleted == 0 && x.is_cancel == 0 && x.is_final_approve != 1 && x.is_final_approve != 2 &&
            //                  ((x.emp_mstr.tbl_emp_manager.OrderByDescending(y => y.emp_mgr_id).FirstOrDefault(y => y.is_deleted == 0).m_one_id == _emp_id && x.is_approved1 == 0) ||
            //                  (x.emp_mstr.tbl_emp_manager.OrderByDescending(y => y.emp_mgr_id).FirstOrDefault(y => y.is_deleted == 0).m_two_id == _emp_id && x.is_approved2 == 0) ||
            //                (x.emp_mstr.tbl_emp_manager.OrderByDescending(y => y.emp_mgr_id).FirstOrDefault(y => y.is_deleted == 0).m_three_id == _emp_id && x.is_approved3 == 0))).Select(p => new
            //                {
            //                    p.sepration_id,
            //                    p.emp_id,
            //                    p.resignation_dt,
            //                    p.req_relieving_date,
            //                    p.req_notice_days,
            //                    p.diff_notice_days,
            //                    p.policy_relieving_dt,
            //                    p.req_reason,
            //                    p.req_remarks,
            //                    p.app1_dt,
            //                    p.approver1_id,
            //                    p.app1_remarks,
            //                    p.is_approved1,
            //                    p.app2_dt,
            //                    p.approver2_id,
            //                    p.app2_remarks,
            //                    p.is_approved2,
            //                    p.app3_dt,
            //                    p.apprver3_id,
            //                    p.app3_remarks,
            //                    p.is_approved3,
            //                    final_status = p.is_final_approve == 0 ? "Pending" : p.is_final_approve == 1 ? "Approve" : p.is_final_approve == 2 ? "Reject" : p.is_final_approve == 3 ? "Cancel" : "-",
            //                    emp_name_code = string.Format("{0} {1} {2} ({3})", p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_first_name,
            //                    p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_middle_name,
            //                    p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_last_name,
            //                    p.emp_mstr.emp_code),
            //                    emp_dept = p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_department_master.department_name,
            //                    emp_doj = p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).date_of_joining,
            //                    mystatus = (p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_one_id == _emp_id ? (p.is_approved1 == 0 ? "Pending" : p.is_approved1 == 1 ? "Approve" : p.is_approved1 == 2 ? "Reject" : "-") :
            //                   p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_two_id == _emp_id ? (p.is_approved2 == 0 ? "Pending" : p.is_approved2 == 1 ? "Approve" : p.is_approved2 == 2 ? "Reject" : "-") :
            //                   p.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_three_id == _emp_id ? (p.is_approved3 == 0 ? "Pending" : p.is_approved3 == 1 ? "Approve" : p.is_approved3 == 2 ? "Reject" : "-") : "-"),
            //                    p.is_relieving_dt_change,
            //                    p.final_relieve_dt,
            //                }).Distinct().ToList();

            //        return Ok(data);
            //    }
            //    else if (ob.is_Admin == 1)
            //    {
            //        var emp_dtl = _clEmployeeDetail.GetEmployeeByDate(company_id, Convert.ToDateTime("01-01-2000"), DateTime.Now).ToList();

            //        List<int> _empp = emp_dtl.Select(p => p.employee_id).ToList();

            //        var data = _context.tbl_emp_separation.OrderBy(y => y.sepration_id).Where(x => x.is_deleted == 0 && x.is_cancel == 0 && x.is_final_approve != 2 && x.is_final_approve != 1 && _empp.Contains(x.emp_id ?? 0)).Select(p => new
            //        {
            //            p.sepration_id,
            //            p.emp_id,
            //            p.resignation_dt,
            //            p.req_relieving_date,
            //            p.req_notice_days,
            //            p.diff_notice_days,
            //            p.policy_relieving_dt,
            //            p.req_reason,
            //            p.req_remarks,
            //            p.app1_dt,
            //            p.approver1_id,
            //            p.app1_remarks,
            //            p.is_approved1,
            //            p.app2_dt,
            //            p.approver2_id,
            //            p.app2_remarks,
            //            p.is_approved2,
            //            p.app3_dt,
            //            p.apprver3_id,
            //            p.app3_remarks,
            //            p.is_approved3,
            //            final_status = p.is_final_approve == 0 ? "Pending" : p.is_final_approve == 1 ? "Approve" : p.is_final_approve == 2 ? "Reject" : p.is_final_approve == 3 ? "Cancel" : "-",
            //            emp_name_code = string.Format("{0} {1} {2} ({3})", p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0 && !string.IsNullOrEmpty(q.employee_first_name)).employee_first_name,
            //                          p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0 && !string.IsNullOrEmpty(q.employee_first_name)).employee_middle_name,
            //                          p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0 && !string.IsNullOrEmpty(q.employee_first_name)).employee_last_name,
            //                          p.emp_mstr.emp_code),
            //            emp_dept = p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0 && !string.IsNullOrEmpty(q.employee_first_name)).tbl_department_master.department_name,
            //            emp_doj = p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0 && !string.IsNullOrEmpty(q.employee_first_name)).date_of_joining,
            //            mystatus = p.is_admin_approved == 0 ? "Pending" : p.is_admin_approved == 1 ? "Approved" : p.is_admin_approved == 2 ? "Reject" : "",
            //            p.is_relieving_dt_change,
            //            p.final_relieve_dt,
            //        }).Distinct().ToList();

            //        return Ok(data);
            //    }
            //    else
            //    {
            //        objresponse.StatusCode = 1;
            //        objresponse.Message = "Sorry there is no pending request for approval...";
            //        return Ok(objresponse);
            //    }

            //}
            //catch (Exception ex)
            //{
            //    objresponse.StatusCode = 1;
            //    objresponse.Message = ex.Message;
            //    return Ok(objresponse);
            //}
    #endregion
        }


        [Route("Save_EmpSeprationApproval")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EseprationApproval))]
        public IActionResult Save_EmpSeprationApproval([FromBody] E_Sepration objemp_sep)
        {
            Response_Msg objresponse = new Response_Msg();
            try
            {
                if (!_clsCurrentUser.DownlineEmpId.Any(p => objemp_sep.emp_req.Any(q => q.emp_id == p)))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access...!";
                    return Ok(objresponse);
                }

                List<SeprationMailDetails> _emp_mail_dtl = new List<SeprationMailDetails>();
                var _reqlst = _context.tbl_emp_separation.Where(x => x.is_deleted == 0 && x.is_cancel == 0 && x.is_final_approve != 1 && x.is_final_approve != 2 && objemp_sep.emp_req.Any(p => p.req_id == x.sepration_id && p.emp_id == x.emp_id) && _clsCurrentUser.CompanyId.Contains(x.company_id)).ToList();
                if (_reqlst.Count > 0)
                {

                    //if (_reqlst.Any(p => p.final_relieve_dt.Date > DateTime.Now.Date))
                    //{
                    using (var trans = _context.Database.BeginTransaction())
                    {
                        try
                        {
                            if (_clsCurrentUser.Is_Hod == 1)
                            {
                                List<EmployeeManager> _emp_mgr = objemp_sep.emp_req.Select(p => new EmployeeManager
                                {
                                    employee_id = p.emp_id
                                }).ToList();

                                _emp_mgr.ForEach(p =>
                                {

                                    var t1 = _clEmployeeDetail.Get_Emp_manager_dtl(p.employee_id).FirstOrDefault();
                                    if (t1 != null)
                                    {
                                        p.m_one_id = t1.m_one_id;
                                        p.m_two_id = t1.m_two_id;
                                        p.m_three_id = t1.m_three_id;
                                        p.manager_name_code = t1.manager_name_code;
                                        p.m_two_name_code = t1.m_two_name_code;
                                        p.m_three_name_code = t1.m_three_name_code;
                                        p.final_approval = t1.final_approval;
                                    }

                                });


                                var no_mgr = _emp_mgr.Any(p => !_reqlst.Any(q => q.emp_id == p.employee_id));
                                if (no_mgr)
                                {
                                    objresponse.StatusCode = 1;
                                    objresponse.Message = "Manager not assing to approve one of the selected request";
                                }
                                else
                                {
                                    _reqlst.ForEach(p =>
                                    {
                                        var _req_action = objemp_sep.emp_req.Where(q => q.emp_id == p.emp_id && q.req_id == p.sepration_id).FirstOrDefault();

                                        var manager_ = _emp_mgr.Where(x => x.employee_id == p.emp_id).FirstOrDefault();
                                        if (manager_.m_one_id == _clsCurrentUser.EmpId)
                                        {
                                            p.approver1_id = _clsCurrentUser.EmpId;
                                            p.is_approved1 = objemp_sep.is_approve;
                                            p.app1_remarks = _req_action != null ? _req_action.remarks : "";
                                            p.app1_dt = DateTime.Now;

                                        }
                                        else if (manager_.m_two_id == _clsCurrentUser.EmpId)
                                        {
                                            p.approver2_id = _clsCurrentUser.EmpId;
                                            p.is_approved2 = objemp_sep.is_approve;
                                            p.app2_remarks = _req_action != null ? _req_action.remarks : "";
                                            p.app2_dt = DateTime.Now;
                                        }
                                        else if (manager_.m_three_id == _clsCurrentUser.EmpId)
                                        {
                                            p.apprver3_id = _clsCurrentUser.EmpId;
                                            p.is_approved3 = objemp_sep.is_approve;
                                            p.app3_remarks = _req_action != null ? _req_action.remarks : "";
                                            p.app3_dt = DateTime.Now;
                                        }

                                        if (objemp_sep.is_approve != 2 && _req_action.is_relieve_change == 1)
                                        {
                                            p.final_relieve_dt = _req_action.final_relieve_dt;

                                            int policy_noticedays = Convert.ToInt32((p.policy_relieving_dt.Date - p.resignation_dt.Date.AddDays(-1)).TotalDays);

                                            double req_notice_Days = (p.final_relieve_dt.Date - p.resignation_dt.AddDays(-1).Date).TotalDays;

                                            p.req_notice_days = (p.final_relieve_dt.Date == p.policy_relieving_dt.Date) ? policy_noticedays : Convert.ToInt32(req_notice_Days);

                                            p.diff_notice_days = (p.final_relieve_dt.Date == p.policy_relieving_dt.Date) ? 0 :
                                               Convert.ToInt32((p.final_relieve_dt.Date - p.policy_relieving_dt.Date).TotalDays);
                                        }

                                        int final_mgr_id = manager_.final_approval == 1 ? manager_.m_one_id : manager_.final_approval == 2 ? manager_.m_two_id : manager_.final_approval == 3 ? manager_.m_three_id : 0;

                                        if (final_mgr_id == _clsCurrentUser.EmpId)
                                        {
                                            p.is_final_approve = objemp_sep.is_approve;
                                        }
                                        else
                                        {
                                            p.is_final_approve = 3;
                                        }



                                        if (p.is_final_approve == 1 || p.is_final_approve == 2)
                                        {
                                            if (p.is_final_approve == 1)
                                            {
                                                var emp_status = _context.tbl_employment_type_master.OrderByDescending(y => y.effective_date).Where(x => x.is_deleted == 0 && x.employee_id == _req_action.emp_id).FirstOrDefault();
                                                if (emp_status != null)
                                                {
                                                    emp_status.actual_duration_end_period = DateTime.Now;
                                                    TimeSpan ts = emp_status.actual_duration_end_period - emp_status.actual_duration_start_period;
                                                    emp_status.actual_duration_days = ts.Days;

                                                    //emp_status.is_deleted = 1;
                                                    emp_status.last_modified_by = _clsCurrentUser.EmpId;
                                                    emp_status.last_modified_date = DateTime.Now;
                                                    _context.tbl_employment_type_master.Update(emp_status);
                                                }

                                                tbl_employment_type_master tbl_employment_type_master_ = new tbl_employment_type_master()
                                                {
                                                    employee_id = _req_action.emp_id,
                                                    employment_type = (byte)EmployeeType.Notice,
                                                    is_deleted = 0,
                                                    created_by = _clsCurrentUser.EmpId,
                                                    last_modified_by = _clsCurrentUser.EmpId,
                                                    created_date = DateTime.Now,
                                                    last_modified_date = DateTime.Now,
                                                    effective_date = p.resignation_dt,
                                                    duration_days = 60,
                                                    duration_start_period = p.resignation_dt,
                                                    duration_end_period = p.resignation_dt.AddDays(60),
                                                    actual_duration_days = 60,
                                                    actual_duration_start_period = p.resignation_dt,
                                                    actual_duration_end_period = p.resignation_dt.AddDays(60),
                                                };
                                                _context.tbl_employment_type_master.Add(tbl_employment_type_master_);
                                            }

                                            SeprationMailDetails objmail = new SeprationMailDetails();
                                            objmail.req_id = p.sepration_id;
                                            objmail.emp_id = p.emp_id;
                                            objmail.resign_dt = p.resignation_dt;
                                            objmail.final_relieve_dt = p.final_relieve_dt;
                                            objmail.policy_relieve_dt = p.policy_relieving_dt;
                                            objmail.diff_notice_days = p.diff_notice_days;
                                            objmail.req_notice_days = p.req_notice_days;
                                            objmail.is_final_approve = p.is_final_approve;
                                            objmail.created_dt = DateTime.Now;
                                            objmail.is_cancel = p.is_cancel;

                                            _emp_mail_dtl.Add(objmail);

                                        }

                                    });


                                    _context.tbl_emp_separation.UpdateRange(_reqlst);
                                    _context.SaveChanges();
                                    trans.Commit();

                                    if (_emp_mail_dtl.Count > 0)
                                    {
                                        MailSystem obj_ms = new MailSystem(_appSettings.Value.DbConnectionString, _config);

                                        Task task = Task.Run(() => obj_ms.EmpSeprationApprovalMail(_emp_mail_dtl));
                                        task.Wait();

                                    }

                                    objresponse.StatusCode = 0;
                                    if (objemp_sep.is_approve == 1)
                                        objresponse.Message = "Ë-Sepration request Approved successfully";
                                    else if (objemp_sep.is_approve == 2)
                                        objresponse.Message = "Ë-Sepration request Rejected successfully";
                                    else
                                        objresponse.Message = "Ë-Sepration request Processed successfully";
                                }

                            }
                            else if (_clsCurrentUser.Is_Hod == 2)
                            {

                                _reqlst.ForEach(p =>
                                {

                                    var req_action = objemp_sep.emp_req.Where(x => x.emp_id == p.emp_id).FirstOrDefault();

                                    p.admin_id = _clsCurrentUser.EmpId;
                                    p.is_admin_approved = objemp_sep.is_approve;
                                    p.admin_remarks = req_action != null ? req_action.remarks : "";
                                    p.admin_dt = DateTime.Now;
                                    p.is_final_approve = objemp_sep.is_approve;


                                    if (objemp_sep.is_approve != 2 && req_action.is_relieve_change == 1)
                                    {
                                        p.final_relieve_dt = req_action.final_relieve_dt;

                                        int policy_noticedays = Convert.ToInt32((p.policy_relieving_dt.Date - p.resignation_dt.Date.AddDays(-1)).TotalDays);

                                        double req_notice_Days = (p.final_relieve_dt.Date - p.resignation_dt.AddDays(-1).Date).TotalDays;

                                        p.req_notice_days = (p.final_relieve_dt.Date == p.policy_relieving_dt.Date) ? policy_noticedays : Convert.ToInt32(req_notice_Days);

                                        p.diff_notice_days = (p.final_relieve_dt.Date == p.policy_relieving_dt.Date) ? 0 :
                                           Convert.ToInt32((p.final_relieve_dt.Date - p.policy_relieving_dt.Date).TotalDays);
                                    }
                                    p.modified_by = objemp_sep.created_by;
                                    p.modified_dt = DateTime.Now;

                                    if (p.is_final_approve == 1)
                                    {
                                        var emp_status = _context.tbl_employment_type_master.OrderByDescending(y => y.effective_date).Where(x => x.is_deleted == 0 && x.employee_id == req_action.emp_id).FirstOrDefault();
                                        if (emp_status != null)
                                        {
                                            emp_status.actual_duration_end_period = DateTime.Now;
                                            TimeSpan ts = emp_status.actual_duration_end_period - emp_status.actual_duration_start_period;
                                            emp_status.actual_duration_days = ts.Days;

                                            //emp_status.is_deleted = 1;
                                            emp_status.last_modified_by = _clsCurrentUser.EmpId;
                                            emp_status.last_modified_date = DateTime.Now;
                                            _context.tbl_employment_type_master.Update(emp_status);
                                        }

                                        tbl_employment_type_master tbl_employment_type_master_ = new tbl_employment_type_master()
                                        {
                                            employee_id = req_action.emp_id,
                                            employment_type = (byte)EmployeeType.Notice,
                                            is_deleted = 0,
                                            created_by = _clsCurrentUser.EmpId,
                                            last_modified_by = _clsCurrentUser.EmpId,
                                            created_date = DateTime.Now,
                                            last_modified_date = DateTime.Now,
                                            effective_date = p.resignation_dt,
                                            duration_days = 60,
                                            duration_start_period = p.resignation_dt,
                                            duration_end_period = p.resignation_dt.AddDays(60),
                                            actual_duration_days = 60,
                                            actual_duration_start_period = p.resignation_dt,
                                            actual_duration_end_period = p.resignation_dt.AddDays(60),
                                        };
                                        _context.tbl_employment_type_master.Add(tbl_employment_type_master_);
                                    }

                                    SeprationMailDetails objmail = new SeprationMailDetails();
                                    objmail.req_id = p.sepration_id;
                                    objmail.emp_id = p.emp_id;
                                    objmail.resign_dt = p.resignation_dt;
                                    objmail.final_relieve_dt = p.final_relieve_dt;
                                    objmail.policy_relieve_dt = p.policy_relieving_dt;
                                    objmail.diff_notice_days = p.diff_notice_days;
                                    objmail.req_notice_days = p.req_notice_days;
                                    objmail.is_final_approve = p.is_final_approve;
                                    objmail.created_dt = DateTime.Now;
                                    objmail.is_cancel = p.is_cancel;

                                    _emp_mail_dtl.Add(objmail);
                                });


                                _context.tbl_emp_separation.UpdateRange(_reqlst);
                                _context.SaveChanges();
                                trans.Commit();
                                if (_emp_mail_dtl.Count > 0)
                                {
                                    MailSystem obj_ms = new MailSystem(_appSettings.Value.DbConnectionString, _config);

                                    Task task = Task.Run(() => obj_ms.EmpSeprationApprovalMail(_emp_mail_dtl));
                                    task.Wait();

                                }

                                objresponse.StatusCode = 0;

                                if (objemp_sep.is_approve == 1)
                                    objresponse.Message = "Ë-Sepration request Approved successfully";
                                else if (objemp_sep.is_approve == 2)
                                    objresponse.Message = "Ë-Sepration request Rejected successfully";
                                else
                                    objresponse.Message = "Ë-Sepration request Processed successfully";
                            }
                            else
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "You are not an approver of any e-sepration request";
                            }
                        }
                        catch (Exception ex)
                        {
                            trans.Rollback();
                            objresponse.StatusCode = 1;
                            objresponse.Message = ex.Message;
                        }

                    }

                    //}
                    //else
                    //{
                    //    objresponse.StatusCode = 1;
                    //    objresponse.Message = "Final Relieving Date from one of selected request is gone, Now you cannot approve or reject that request...";
                    //}

                }
                else
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Eighter request already approved or rejected, so please check report or Something went wrong with details";
                }


            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
            }
            return Ok(objresponse);
        }

        [Route("Cancel_Employee_Separation_Request")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EseprationApplication))]
        public IActionResult Cancel_Employee_Separation_Request([FromBody] E_Sepration objemp_req_cncl)
        {
            Response_Msg objresponse = new Response_Msg();

            if (!_clsCurrentUser.CompanyId.Contains(objemp_req_cncl.company_id))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Unauthorize Company Access....!!";
                return Ok(objresponse);
            }
            foreach (var ids in objemp_req_cncl.emp_req)
            {
                if (!_clsCurrentUser.DownlineEmpId.Contains(ids.emp_id))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access....!!";
                    return Ok(objresponse);
                }
            }




            try
            {
                var exist = _context.tbl_emp_separation.Where(x => x.sepration_id == objemp_req_cncl.emp_req[0].req_id && x.emp_id == objemp_req_cncl.emp_req[0].emp_id && x.is_deleted == 0 && x.resignation_dt.ToString("dd-MM-yyyy hh:mm:ss") == objemp_req_cncl.emp_req[0].final_relieve_dt.ToString("dd-MM-yyyy hh:mm:ss")).FirstOrDefault();
                if (exist != null)
                {
                    List<SeprationMailDetails> _emp_mail_dtl = new List<SeprationMailDetails>();
                    //if (exist.final_relieve_dt.Date >= DateTime.Now.Date)
                    //{
                    if (exist.is_final_approve != 3)
                    {
                        if (exist.is_final_approve == 0 && exist.is_cancel == 0) // Request in Pending
                        {
                            //if (_clsCurrentUser.Is_Hod == 1 || _clsCurrentUser.Is_Hod == 2)
                            //{
                            //    objresponse.StatusCode = 1;
                            //    objresponse.Message = "Please firstly approve or reject request...";
                            //}
                            //else
                            //{
                            exist.is_cancel = 1;
                            exist.is_deleted = 1;
                            exist.cancel_remarks = objemp_req_cncl.emp_req[0].remarks;
                            exist.cancelation_dt = DateTime.Now;
                            exist.modified_by = objemp_req_cncl.created_by;
                            exist.modified_dt = DateTime.Now;

                            _context.tbl_emp_separation.UpdateRange(exist);
                            _context.SaveChanges();

                            objresponse.StatusCode = 0;
                            objresponse.Message = "Request successfully Cancel";

                            //Cancellation Request Mail

                            SeprationMailDetails objmail = new SeprationMailDetails();
                            objmail.req_id = exist.sepration_id;
                            objmail.emp_id = exist.emp_id;
                            objmail.resign_dt = exist.resignation_dt;
                            objmail.final_relieve_dt = exist.final_relieve_dt;
                            objmail.policy_relieve_dt = exist.policy_relieving_dt;
                            objmail.diff_notice_days = exist.diff_notice_days;
                            objmail.req_notice_days = exist.req_notice_days;
                            objmail.is_final_approve = null;//exist.is_final_approve;
                            objmail.created_dt = DateTime.Now;
                            objmail.is_cancel = 1;
                            objmail.cncl_dt = DateTime.Now;
                            objmail.cncl_remarks = objemp_req_cncl.emp_req[0].remarks;
                            objmail.is_deleted = exist.is_deleted;

                            _emp_mail_dtl.Add(objmail);
                            // }

                        }
                        else if (exist.is_final_approve == 0 && exist.is_cancel == 1)
                        {
                            objresponse.StatusCode = 1;
                            objresponse.Message = "E-Sepration Cancellation Request already raised";
                        }
                        else
                        {
                            if (exist.is_final_approve == 1 && exist.is_cancel == 1)
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "E-Sepration Cancellation Request already approved";
                            }
                            ////again raised for approval ie:-  if resign was rejected then cancel apply
                            //else if (exist.is_final_approve == 2 && exist.is_cancel == 1)
                            //{
                            //    //check resignation is cancel or not
                            //    var is_cancelled = _context.tbl_emp_separation.Where(x => x.is_deleted == 0 && x.emp_id == objemp_req_cncl.emp_req[0].emp_id && x.resignation_dt.ToString("dd-MM-yyyy hh:mm:ss") == objemp_req_cncl.emp_req[0].final_relieve_dt.ToString("dd-MM-yyyy hh:mm:ss") && x.is_cancel == 1 && x.is_final_approve != 2).ToList();
                            //    if (is_cancelled.Count > 0)
                            //    {
                            //        objresponse.StatusCode = 1;
                            //        objresponse.Message = "E-Sepration Request already Cancel";
                            //        return Ok(objresponse);
                            //    }
                            //    // Changes to made here to generate cancellation request for approved application.
                            //    tbl_emp_separation objemp_sep = new tbl_emp_separation();

                            //    objemp_sep.emp_id = objemp_req_cncl.emp_req[0].emp_id;
                            //    objemp_sep.resignation_dt = exist.resignation_dt;
                            //    objemp_sep.req_relieving_date = exist.req_relieving_date;
                            //    objemp_sep.req_notice_days = exist.req_notice_days;
                            //    objemp_sep.diff_notice_days = exist.diff_notice_days;
                            //    objemp_sep.policy_relieving_dt = exist.policy_relieving_dt;
                            //    objemp_sep.req_reason = exist.req_reason;
                            //    objemp_sep.final_relieve_dt = exist.final_relieve_dt;
                            //    objemp_sep.req_remarks = objemp_req_cncl.emp_req[0].remarks;
                            //    objemp_sep.approver1_id = null;
                            //    objemp_sep.is_approved1 = 0;
                            //    objemp_sep.app1_remarks = "";
                            //    objemp_sep.app1_dt = Convert.ToDateTime("01-01-2000");
                            //    objemp_sep.approver2_id = null;
                            //    objemp_sep.is_approved2 = 0;
                            //    objemp_sep.app2_remarks = "";
                            //    objemp_sep.app2_dt = Convert.ToDateTime("01-01-2000");
                            //    objemp_sep.apprver3_id = null;
                            //    objemp_sep.is_approved3 = 0;
                            //    objemp_sep.app3_remarks = "";
                            //    objemp_sep.app3_dt = Convert.ToDateTime("01-01-2000");
                            //    objemp_sep.app3_remarks = "";
                            //    objemp_sep.admin_id = null;
                            //    objemp_sep.is_admin_approved = 0;
                            //    objemp_sep.admin_remarks = "";
                            //    objemp_sep.admin_dt = Convert.ToDateTime("01-01-2000");
                            //    objemp_sep.is_final_approve = 0;
                            //    objemp_sep.cancelation_dt = DateTime.Now;
                            //    objemp_sep.is_deleted = 0;
                            //    objemp_sep.created_by = exist.created_by;
                            //    objemp_sep.created_dt = exist.created_dt;
                            //    objemp_sep.modified_by = 0;
                            //    objemp_sep.modified_dt = Convert.ToDateTime("01-01-2000");
                            //    objemp_sep.is_relieving_dt_change = exist.is_relieving_dt_change;
                            //    objemp_sep.is_cancel = 1;
                            //    objemp_sep.cancel_remarks = objemp_req_cncl.emp_req[0].remarks;

                            //    _context.tbl_emp_separation.UpdateRange(objemp_sep);
                            //    _context.SaveChanges();

                            //    objresponse.StatusCode = 0;
                            //    objresponse.Message = "E-Sepration cancellation request successfully raised...";

                            //    //Cancellation REquest Mail

                            //    SeprationMailDetails objmail = new SeprationMailDetails();
                            //    objmail.req_id = exist.sepration_id;
                            //    objmail.emp_id = exist.emp_id;
                            //    objmail.resign_dt = exist.resignation_dt;
                            //    objmail.final_relieve_dt = exist.final_relieve_dt;
                            //    objmail.policy_relieve_dt = exist.policy_relieving_dt;
                            //    objmail.diff_notice_days = exist.diff_notice_days;
                            //    objmail.req_notice_days = exist.req_notice_days;
                            //    objmail.is_final_approve = 0; //exist.is_final_approve;
                            //    objmail.created_dt = DateTime.Now;
                            //    objmail.is_cancel = 1;
                            //    objmail.cncl_dt = DateTime.Now;
                            //    objmail.cncl_remarks = objemp_req_cncl.emp_req[0].remarks;
                            //    objmail.is_deleted = 0;

                            //    _emp_mail_dtl.Add(objmail);
                            //}
                            //again raised for approval ie:- if resignation req approved than we can cancel 
                            else if (exist.is_final_approve == 1 && exist.is_cancel == 0)
                            {
                                exist.is_cancel = 1;
                                exist.cancelation_dt = DateTime.Now;
                                exist.modified_by = _clsCurrentUser.EmpId;
                                exist.modified_dt = DateTime.Now;

                                _context.tbl_emp_separation.UpdateRange(exist);

                                //check resignation is cancel or not
                                var is_exist = _context.tbl_approved_emp_separation_cancellation.Where(x => x.is_deleted == 0 && x.fkid_empSepration == exist.sepration_id).ToList();
                                if (is_exist.Count > 0)
                                {
                                    objresponse.StatusCode = 1;
                                    objresponse.Message = "E-Sepration Cancellation Request already Exist";
                                    return Ok(objresponse);
                                }

                                // Changes to made here to generate cancellation request for approved application.
                                tbl_approved_emp_separation_cancellation objemp_sep = new tbl_approved_emp_separation_cancellation();

                                objemp_sep.cancel_remarks = objemp_req_cncl.emp_req[0].remarks;
                                objemp_sep.approver1_id = null;
                                objemp_sep.is_approved1 = 0;
                                objemp_sep.app1_remarks = "";
                                objemp_sep.app1_dt = Convert.ToDateTime("01-01-2000");
                                objemp_sep.approver2_id = null;
                                objemp_sep.is_approved2 = 0;
                                objemp_sep.app2_remarks = "";
                                objemp_sep.app2_dt = Convert.ToDateTime("01-01-2000");
                                objemp_sep.apprver3_id = null;
                                objemp_sep.is_approved3 = 0;
                                objemp_sep.app3_remarks = "";
                                objemp_sep.app3_dt = Convert.ToDateTime("01-01-2000");
                                objemp_sep.app3_remarks = "";
                                objemp_sep.admin_id = null;
                                objemp_sep.is_admin_approved = 0;
                                objemp_sep.admin_remarks = "";
                                objemp_sep.admin_dt = Convert.ToDateTime("01-01-2000");
                                objemp_sep.is_final_approve = 0;
                                objemp_sep.is_deleted = 0;
                                objemp_sep.created_by = exist.created_by;
                                objemp_sep.created_dt = exist.created_dt;
                                objemp_sep.modified_by = 0;
                                objemp_sep.modified_dt = Convert.ToDateTime("01-01-2000");
                                objemp_sep.fkid_empSepration = exist.sepration_id;

                                _context.tbl_approved_emp_separation_cancellation.UpdateRange(objemp_sep);
                                _context.SaveChanges();

                                objresponse.StatusCode = 0;
                                objresponse.Message = "E-Sepration cancellation request raised successfully...";

                                //Cancellation Request Mail

                                SeprationMailDetails objmail = new SeprationMailDetails();
                                objmail.req_id = exist.sepration_id;
                                objmail.emp_id = exist.emp_id;
                                objmail.resign_dt = exist.resignation_dt;
                                objmail.final_relieve_dt = exist.final_relieve_dt;
                                objmail.policy_relieve_dt = exist.policy_relieving_dt;
                                objmail.diff_notice_days = exist.diff_notice_days;
                                objmail.req_notice_days = exist.req_notice_days;
                                objmail.is_final_approve = 0; //exist.is_final_approve;
                                objmail.created_dt = DateTime.Now;
                                objmail.is_cancel = 1;
                                objmail.cncl_dt = DateTime.Now;
                                objmail.cncl_remarks = objemp_req_cncl.emp_req[0].remarks;
                                objmail.is_deleted = 0;

                                _emp_mail_dtl.Add(objmail);
                            }
                            else // if request rejected means not approved first time
                            {
                                objresponse.StatusCode = 0;
                                objresponse.Message = "Request already rejected you can't raise Cancel request against this...!!";

                            }
                        }

                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "You Can't raise request for cancellation,because request was in Process...!!";
                    }


                    if (_emp_mail_dtl.Count > 0)
                    {
                        MailSystem obj_ms = new MailSystem(_appSettings.Value.DbConnectionString, _config);

                        Task task = Task.Run(() => obj_ms.EmpSeprationCancellationMail(_emp_mail_dtl));
                        task.Wait();
                    }
                }
                else
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Invalid Request";
                }



            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
            }
            return Ok(objresponse);
        }

        [Route("Get_Pending_EmpSepration_Cancel_Req/{company_id}/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.EseprationApproval))]
        public IActionResult Get_Pending_EmpSepration_Cancel_Req([FromRoute] int company_id, int emp_id)
        {

            Response_Msg objresponse = new Response_Msg();

            if (!_clsCurrentUser.CompanyId.Contains(company_id))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Unauthorize Company Access...!!";
                return Ok(objresponse);
            }



            try
            {
                if (_clsCurrentUser.Is_Hod == 1)
                {
                    var data = _context.tbl_emp_separation.Join(_context.tbl_approved_emp_separation_cancellation, es => es.sepration_id, aes => aes.fkid_empSepration, (es, aes) => new { es, aes }).OrderBy(y => y.es.sepration_id).Where(x => x.aes.is_deleted == 0 && x.aes.is_final_approve == 0 &&
                              ((x.es.emp_mstr.tbl_emp_manager.OrderByDescending(y => y.emp_mgr_id).FirstOrDefault(y => y.is_deleted == 0).m_one_id == _clsCurrentUser.EmpId && x.es.is_approved1 == 0) ||
                              (x.es.emp_mstr.tbl_emp_manager.OrderByDescending(y => y.emp_mgr_id).FirstOrDefault(y => y.is_deleted == 0).m_two_id == _clsCurrentUser.EmpId && x.es.is_approved2 == 0) ||
                            (x.es.emp_mstr.tbl_emp_manager.OrderByDescending(y => y.emp_mgr_id).FirstOrDefault(y => y.is_deleted == 0).m_three_id == _clsCurrentUser.EmpId && x.es.is_approved3 == 0)) && (_clsCurrentUser.DownlineEmpId.Contains(x.es.emp_id) && _clsCurrentUser.EmpId != x.es.emp_id) && _clsCurrentUser.CompanyId.Contains(x.es.company_id)).Select(p => new
                            {
                                p.es.sepration_id,
                                p.aes.pkid_AppEmpSepCancel,
                                p.es.emp_id,
                                p.es.resignation_dt,
                                p.es.req_relieving_date,
                                p.es.req_notice_days,
                                p.es.diff_notice_days,
                                p.es.policy_relieving_dt,
                                p.es.req_reason,
                                p.es.req_remarks,
                                p.es.app1_dt,
                                p.es.approver1_id,
                                p.es.app1_remarks,
                                p.es.is_approved1,
                                p.es.app2_dt,
                                p.es.approver2_id,
                                p.es.app2_remarks,
                                p.es.is_approved2,
                                p.es.app3_dt,
                                p.es.apprver3_id,
                                p.es.app3_remarks,
                                p.es.is_approved3,
                                final_status = p.aes.is_final_approve == 0 ? "Pending" : p.aes.is_final_approve == 1 ? "Approve" : p.aes.is_final_approve == 2 ? "Reject" : p.aes.is_final_approve == 3 ? "Cancel" : "-",
                                emp_name = string.Format("{0} {1} {2}", p.es.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_first_name,
                                   p.es.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_middle_name,
                                   p.es.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_last_name),
                                emp_code = p.es.emp_mstr.emp_code,
                                emp_dept = p.es.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_department_master.department_name,
                                emp_doj = p.es.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).date_of_joining,
                                mystatus = (p.es.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_one_id == _clsCurrentUser.EmpId ? (p.es.is_approved1 == 0 ? "Pending" : p.es.is_approved1 == 1 ? "Approve" : p.es.is_approved1 == 2 ? "Reject" : "-") :
                                  p.es.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_two_id == _clsCurrentUser.EmpId ? (p.es.is_approved2 == 0 ? "Pending" : p.es.is_approved2 == 1 ? "Approve" : p.es.is_approved2 == 2 ? "Reject" : "-") :
                                  p.es.emp_mstr.tbl_emp_manager.OrderByDescending(q => q.emp_mgr_id).FirstOrDefault(q => q.is_deleted == 0).m_three_id == _clsCurrentUser.EmpId ? (p.es.is_approved3 == 0 ? "Pending" : p.es.is_approved3 == 1 ? "Approve" : p.es.is_approved3 == 2 ? "Reject" : "-") : "-"),
                                p.es.is_relieving_dt_change,
                                p.es.final_relieve_dt,
                                p.aes.cancel_remarks,
                                cancelation_dt = p.aes.created_dt,
                            }).Distinct().ToList();

                    return Ok(data);
                }
                else if (_clsCurrentUser.Is_Hod == 2)
                {

                    var data = _context.tbl_emp_separation.Join(_context.tbl_approved_emp_separation_cancellation, es => es.sepration_id, aes => aes.fkid_empSepration, (es, aes) => new { es, aes }).OrderBy(y => y.es.sepration_id).Where(x => x.aes.is_deleted == 0 && x.aes.is_final_approve == 0 && _clsCurrentUser.DownlineEmpId.Contains(x.es.emp_id) && _clsCurrentUser.CompanyId.Contains(x.es.company_id)).Select(p => new
                    {
                        p.es.sepration_id,
                        p.aes.pkid_AppEmpSepCancel,
                        p.es.emp_id,
                        p.es.resignation_dt,
                        p.es.req_relieving_date,
                        p.es.req_notice_days,
                        p.es.diff_notice_days,
                        p.es.policy_relieving_dt,
                        p.es.req_reason,
                        p.es.req_remarks,
                        p.es.app1_dt,
                        p.es.approver1_id,
                        p.es.app1_remarks,
                        p.es.is_approved1,
                        p.es.app2_dt,
                        p.es.approver2_id,
                        p.es.app2_remarks,
                        p.es.is_approved2,
                        p.es.app3_dt,
                        p.es.apprver3_id,
                        p.es.app3_remarks,
                        p.es.is_approved3,
                        final_status = p.aes.is_final_approve == 0 ? "Pending" : p.aes.is_final_approve == 1 ? "Approve" : p.aes.is_final_approve == 2 ? "Reject" : p.aes.is_final_approve == 3 ? "Cancel" : "-",

                        emp_name = string.Format("{0} {1} {2}", p.es.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_first_name,
                                   p.es.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_middle_name,
                                   p.es.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_last_name),
                        emp_code = p.es.emp_mstr.emp_code,
                        emp_dept = p.es.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0 && !string.IsNullOrEmpty(q.employee_first_name)).tbl_department_master.department_name,
                        emp_doj = p.es.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0 && !string.IsNullOrEmpty(q.employee_first_name)).date_of_joining,
                        mystatus = p.es.is_admin_approved == 0 ? "Pending" : p.es.is_admin_approved == 1 ? "Approved" : p.es.is_admin_approved == 2 ? "Reject" : "",
                        p.es.is_relieving_dt_change,
                        p.es.final_relieve_dt,
                        p.aes.cancel_remarks,
                        cancelation_dt = p.aes.created_dt,
                    }).Distinct().ToList();

                    return Ok(data);
                }
                else
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Sorry there is no pending request for approval...";
                    return Ok(objresponse);
                }
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }

        [Route("Save_EmpSepration_Cncl_approval")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.EseprationApproval))]
        public IActionResult Save_EmpSepration_Cncl_approval([FromBody] E_Sepration objemp_sep_cncl)
        {
            Response_Msg objresponse = new Response_Msg();

            foreach (var empid in objemp_sep_cncl.emp_req)
            {
                if (!_clsCurrentUser.DownlineEmpId.Contains(empid.emp_id))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Unauthorize Access....!!";
                    return Ok(objresponse);

                }
            }

            try
            {
                List<SeprationMailDetails> _emp_mail_dtl = new List<SeprationMailDetails>();
                var emp_sepration_cancel_dtl = _context.tbl_approved_emp_separation_cancellation.Join(_context.tbl_emp_separation, aes => aes.fkid_empSepration, es => es.sepration_id, (aes, es) => new { aes, es }).Where(x => x.aes.is_deleted == 0 && objemp_sep_cncl.emp_req.Any(y => y.req_id == x.aes.pkid_AppEmpSepCancel)).ToList();

                if (emp_sepration_cancel_dtl.Count > 0)
                {
                    //if (emp_sepration_cancel_dtl.Any(p => p.final_relieve_dt.Date > DateTime.Now.Date))
                    //{
                    using (var trans = _context.Database.BeginTransaction())
                    {
                        try
                        {
                            if (_clsCurrentUser.Is_Hod == 1)
                            {//changes to be made here
                                List<EmployeeManager> _emp_mgr = objemp_sep_cncl.emp_req.Select(p => new EmployeeManager
                                {
                                    employee_id = p.emp_id
                                }).ToList();

                                _emp_mgr.ForEach(p =>
                                {

                                    var mgr_ = _clEmployeeDetail.Get_Emp_manager_dtl(p.employee_id).FirstOrDefault();
                                    if (mgr_ != null)
                                    {
                                        p.m_one_id = mgr_.m_one_id;
                                        p.m_two_id = mgr_.m_two_id;
                                        p.m_three_id = mgr_.m_three_id;
                                        p.manager_name_code = mgr_.manager_name_code;
                                        p.m_two_name_code = mgr_.m_two_name_code;
                                        p.m_three_name_code = mgr_.m_three_name_code;
                                        p.final_approval = mgr_.final_approval;
                                    }

                                });


                                var no_mgr = _emp_mgr.Any(p => !emp_sepration_cancel_dtl.Any(q => q.es.emp_id == p.employee_id));
                                if (no_mgr)
                                {
                                    objresponse.StatusCode = 1;
                                    objresponse.Message = "Manager not assing to approve one of the selected request";
                                }
                                else
                                {
                                    emp_sepration_cancel_dtl.ForEach(p =>
                                    {
                                        var _req_action = objemp_sep_cncl.emp_req.Where(q => q.emp_id == p.es.emp_id && q.req_id == p.aes.pkid_AppEmpSepCancel).FirstOrDefault();

                                        var manager_ = _emp_mgr.Where(x => x.employee_id == p.es.emp_id).FirstOrDefault();
                                        if (manager_.m_one_id == _clsCurrentUser.EmpId)
                                        {
                                            p.aes.approver1_id = _clsCurrentUser.EmpId;
                                            p.aes.is_approved1 = objemp_sep_cncl.is_approve;
                                            p.aes.app1_remarks = _req_action != null ? _req_action.remarks : "";
                                            p.aes.app1_dt = DateTime.Now;

                                        }
                                        else if (manager_.m_two_id == _clsCurrentUser.EmpId)
                                        {
                                            p.aes.approver2_id = _clsCurrentUser.EmpId;
                                            p.aes.is_approved2 = objemp_sep_cncl.is_approve;
                                            p.aes.app2_remarks = _req_action != null ? _req_action.remarks : "";
                                            p.aes.app2_dt = DateTime.Now;
                                        }
                                        else if (manager_.m_three_id == _clsCurrentUser.EmpId)
                                        {
                                            p.aes.apprver3_id = _clsCurrentUser.EmpId;
                                            p.aes.is_approved3 = objemp_sep_cncl.is_approve;
                                            p.aes.app3_remarks = _req_action != null ? _req_action.remarks : "";
                                            p.aes.app3_dt = DateTime.Now;
                                        }


                                        int final_mgr_id = manager_.final_approval == 1 ? manager_.m_one_id : manager_.final_approval == 2 ? manager_.m_two_id : manager_.final_approval == 3 ? manager_.m_three_id : 0;

                                        if (final_mgr_id == _clsCurrentUser.EmpId)
                                        {
                                            p.aes.is_final_approve = objemp_sep_cncl.is_approve;
                                        }
                                        else
                                        {
                                            p.aes.is_final_approve = 3;
                                        }



                                        if (p.aes.is_final_approve == 1 || p.aes.is_final_approve == 2)
                                        {
                                            if (p.aes.is_final_approve == 2)
                                            {
                                                _context.tbl_emp_separation.Where(y => y.sepration_id == p.aes.fkid_empSepration).ForEachAsync(x => x.is_cancel = 0);
                                                _context.SaveChanges();
                                            }
                                            if (p.aes.is_final_approve == 1)
                                            {
                                                var emp_status = _context.tbl_employment_type_master.OrderByDescending(y => y.effective_date).Where(x => x.is_deleted == 0 && x.employee_id == _req_action.emp_id).FirstOrDefault();
                                                var emp_status_prev = _context.tbl_employment_type_master.OrderByDescending(y => y.effective_date).Where(x => x.is_deleted == 0 && x.employment_type != emp_status.employment_type && x.employee_id == _req_action.emp_id).FirstOrDefault();
                                                if (emp_status != null)
                                                {
                                                    emp_status.is_deleted = 1;
                                                    emp_status.last_modified_by = _clsCurrentUser.EmpId;
                                                    emp_status.last_modified_date = DateTime.Now;
                                                    _context.tbl_employment_type_master.Update(emp_status);
                                                }
                                                if (emp_status_prev != null)
                                                {
                                                    emp_status_prev.actual_duration_end_period = emp_status_prev.employment_type == 2 ? DateTime.Now.AddDays(365) : emp_status_prev.employment_type == 3 ? DateTime.Now.AddDays(10000) : DateTime.Now.AddDays(10000);
                                                    TimeSpan ts = emp_status_prev.actual_duration_end_period - emp_status_prev.actual_duration_start_period;
                                                    emp_status_prev.actual_duration_days = ts.Days;

                                                    emp_status_prev.is_deleted = 0;
                                                    emp_status_prev.last_modified_by = _clsCurrentUser.EmpId;
                                                    emp_status_prev.last_modified_date = DateTime.Now;
                                                    _context.tbl_employment_type_master.Update(emp_status_prev);
                                                }
                                            }


                                            SeprationMailDetails objmail = new SeprationMailDetails();
                                            objmail.req_id = p.es.sepration_id;
                                            objmail.emp_id = p.es.emp_id;
                                            objmail.resign_dt = p.es.resignation_dt;
                                            objmail.final_relieve_dt = p.es.final_relieve_dt;
                                            objmail.policy_relieve_dt = p.es.policy_relieving_dt;
                                            objmail.diff_notice_days = p.es.diff_notice_days;
                                            objmail.req_notice_days = p.es.req_notice_days;
                                            objmail.is_final_approve = p.aes.is_final_approve;
                                            objmail.created_dt = DateTime.Now;
                                            objmail.is_cancel = 1;

                                            _emp_mail_dtl.Add(objmail);

                                        }

                                    });


                                    _context.tbl_approved_emp_separation_cancellation.UpdateRange(emp_sepration_cancel_dtl.Select(x => x.aes));
                                    _context.SaveChanges();
                                    trans.Commit();

                                    if (_emp_mail_dtl.Count > 0)
                                    {
                                        MailSystem obj_ms = new MailSystem(_appSettings.Value.DbConnectionString, _config);

                                        Task task = Task.Run(() => obj_ms.EmpSeprationApprovalMail(_emp_mail_dtl));
                                        task.Wait();

                                    }

                                    objresponse.StatusCode = 0;
                                    if (objemp_sep_cncl.is_approve == 1)
                                        objresponse.Message = "Ë-Sepration Cancellation request approved successfully";
                                    if (objemp_sep_cncl.is_approve == 2)
                                        objresponse.Message = "Ë-Sepration Cancellation request rejected successfully";

                                }

                            }
                            else if (_clsCurrentUser.Is_Hod == 2)
                            {

                                emp_sepration_cancel_dtl.ForEach(p =>
                                {

                                    var req_action = objemp_sep_cncl.emp_req.Where(x => x.emp_id == p.es.emp_id).FirstOrDefault();

                                    p.aes.admin_id = _clsCurrentUser.EmpId;
                                    p.aes.is_admin_approved = objemp_sep_cncl.is_approve;
                                    p.aes.admin_remarks = req_action != null ? req_action.remarks : "";
                                    p.aes.admin_dt = DateTime.Now;
                                    p.aes.is_final_approve = objemp_sep_cncl.is_approve;


                                    if (objemp_sep_cncl.is_approve != 2 && req_action.is_relieve_change == 1)
                                    {
                                        p.es.final_relieve_dt = req_action.final_relieve_dt;

                                        int policy_noticedays = Convert.ToInt32((p.es.policy_relieving_dt.Date - p.es.resignation_dt.Date.AddDays(-1)).TotalDays);

                                        double req_notice_Days = (p.es.final_relieve_dt.Date - p.es.resignation_dt.AddDays(-1).Date).TotalDays;

                                        p.es.req_notice_days = (p.es.final_relieve_dt.Date == p.es.policy_relieving_dt.Date) ? policy_noticedays : Convert.ToInt32(req_notice_Days);

                                        p.es.diff_notice_days = (p.es.final_relieve_dt.Date == p.es.policy_relieving_dt.Date) ? 0 :
                                           Convert.ToInt32((p.es.final_relieve_dt.Date - p.es.policy_relieving_dt.Date).TotalDays);
                                    }
                                    p.aes.modified_by = _clsCurrentUser.EmpId;
                                    p.aes.modified_dt = DateTime.Now;

                                    if (p.aes.is_final_approve == 1)
                                    {
                                        var emp_status = _context.tbl_employment_type_master.OrderByDescending(y => y.effective_date).Where(x => x.is_deleted == 0 && x.employee_id == req_action.emp_id).FirstOrDefault();
                                        var emp_status_prev = _context.tbl_employment_type_master.OrderByDescending(y => y.effective_date).Where(x => x.is_deleted == 0 && x.employment_type != emp_status.employment_type && x.employee_id == req_action.emp_id).FirstOrDefault();
                                        if (emp_status != null)
                                        {
                                            emp_status.is_deleted = 1;
                                            emp_status.last_modified_by = _clsCurrentUser.EmpId;
                                            emp_status.last_modified_date = DateTime.Now;
                                            _context.tbl_employment_type_master.Update(emp_status);
                                        }
                                        if (emp_status_prev != null)
                                        {
                                            emp_status_prev.actual_duration_end_period = emp_status_prev.employment_type == 2 ? DateTime.Now.AddDays(365) : emp_status_prev.employment_type == 3 ? DateTime.Now.AddDays(10000) : DateTime.Now.AddDays(10000);
                                            TimeSpan ts = emp_status_prev.actual_duration_end_period - emp_status_prev.actual_duration_start_period;
                                            emp_status_prev.actual_duration_days = ts.Days;

                                            emp_status_prev.is_deleted = 0;
                                            emp_status_prev.last_modified_by = _clsCurrentUser.EmpId;
                                            emp_status_prev.last_modified_date = DateTime.Now;
                                            _context.tbl_employment_type_master.Update(emp_status_prev);
                                        }
                                    }

                                    SeprationMailDetails objmail = new SeprationMailDetails();
                                    objmail.req_id = p.es.sepration_id;
                                    objmail.emp_id = p.es.emp_id;
                                    objmail.resign_dt = p.es.resignation_dt;
                                    objmail.final_relieve_dt = p.es.final_relieve_dt;
                                    objmail.policy_relieve_dt = p.es.policy_relieving_dt;
                                    objmail.diff_notice_days = p.es.diff_notice_days;
                                    objmail.req_notice_days = p.es.req_notice_days;
                                    objmail.is_final_approve = p.aes.is_final_approve;
                                    objmail.created_dt = DateTime.Now;
                                    objmail.is_cancel = 1;

                                    _emp_mail_dtl.Add(objmail);
                                });


                                _context.tbl_approved_emp_separation_cancellation.UpdateRange(emp_sepration_cancel_dtl.Select(x => x.aes));
                                _context.SaveChanges();
                                trans.Commit();
                                if (_emp_mail_dtl.Count > 0)
                                {
                                    MailSystem obj_ms = new MailSystem(_appSettings.Value.DbConnectionString, _config);

                                    Task task = Task.Run(() => obj_ms.EmpSeprationApprovalMail(_emp_mail_dtl));
                                    task.Wait();

                                }

                                objresponse.StatusCode = 0;
                                if (objemp_sep_cncl.is_approve == 1)
                                    objresponse.Message = "Ë-Sepration Cancellation request approved successfully";
                                if (objemp_sep_cncl.is_approve == 2)
                                    objresponse.Message = "Ë-Sepration Cancellation request rejected successfully";
                            }
                            else
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "You are not an approver of any e-sepration request";
                            }
                        }
                        catch (Exception ex)
                        {
                            trans.Rollback();
                            objresponse.StatusCode = 1;
                            objresponse.Message = ex.Message;
                        }

                    }
                    //}
                    //else
                    //{
                    //    objresponse.StatusCode = 1;
                    //    objresponse.Message = "Final Relieving Date from one of selected request is gone, Now you cannot approve or reject that request";
                    //}
                }
                else
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Eighther request already approve or rejected, please check report";
                    return Ok(objresponse);
                }

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
            }
            return Ok(objresponse);
        }

        [Route("Get_ApproveRejectEseprationDetail/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.EseprationApproval))] // Get Approve or Reject Detail
        public IActionResult Get_ApproveRejectEseprationDetail([FromRoute] int emp_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                //var result = _context.tbl_emp_separation

                var result = _context.tbl_emp_separation.Where(x => x.is_withdrawal == 0 ? (x.approver1_id == _clsCurrentUser.EmpId || x.approver2_id == _clsCurrentUser.EmpId || x.apprver3_id == _clsCurrentUser.EmpId || _clsCurrentUser.DownlineEmpId.Contains(x.emp_id)) : true && _clsCurrentUser.CompanyId.Contains(x.company_id)).Select(p => new
                {
                    p.sepration_id,
                    p.emp_id,
                    emp_code = p.emp_mstr.emp_code,
                    emp_name = string.Format("{0} {1} {2}",
                              p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_first_name,
                              p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_middle_name,
                              p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_last_name),
                    //p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).date_of_joining,
                    //p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_location_master.location_name,
                    //p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).tbl_department_master.department_name,
                    p.resignation_dt,
                    policy_relieving_dt = p.is_withdrawal == 1 ? p.last_wrking_dt : p.policy_relieving_dt,
                    p.req_relieving_date,
                    p.req_notice_days,
                    p.diff_notice_days,
                    p.req_reason,
                    p.req_remarks,
                    final_relieve_dt = p.is_withdrawal == 1 ? p.last_wrking_dt : p.final_relieve_dt,
                    final_status = _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve == 1 ? "Cancelled" : _context.tbl_approved_emp_separation_cancellation.Where(x => x.fkid_empSepration == p.sepration_id && x.is_deleted == 0).FirstOrDefault().is_final_approve == 2 ? "Approve" : (p.is_withdrawal == 1 ? "Withrawal" : p.is_cancel == 0 ? (p.is_final_approve == 0 ? "Pending" : p.is_final_approve == 1 ? "Approve" : p.is_final_approve == 2 ? "Reject" : p.is_final_approve == 3 ? "In Process" : "-") : p.is_cancel == 1 ? "Cancelled" : ""),
                    mystatus = (p.approver1_id != null && p.approver1_id == _clsCurrentUser.EmpId ? (p.is_approved1 == 1 ? "Approved" : p.is_approved1 == 2 ? "Rejected" : p.is_approved1 == 0 ? "Pending" : "") : p.approver2_id != null && p.approver2_id == _clsCurrentUser.EmpId ?
                          (p.is_approved2 == 1 ? "Approved" : p.is_approved2 == 2 ? "Rejected" : p.is_approved2 == 0 ? "Pending" : "") : p.apprver3_id != null && p.apprver3_id == _clsCurrentUser.EmpId ?
                          (p.is_approved3 == 0 ? "Approved" : p.is_approved3 == 1 ? "Approved" : p.is_approved3 == 2 ? "Rejected" : "") : p.admin_id != null && p.admin_id == _clsCurrentUser.EmpId ? (p.is_admin_approved == 0 ? "Pending" : p.is_admin_approved == 1 ? "Approved" : p.is_admin_approved == 2 ? "Rejected" : "") : ""),
                    //myremarks = (p.approver1_id!=null&&p.approver1_id==_clsCurrentUser.EmpId?p.app1_remarks:p.approver2_id!=null&&p.approver2_id==_clsCurrentUser.EmpId?p.app2_remarks:p.apprver3_id!=null&&p.apprver3_id==_clsCurrentUser.EmpId?p.app3_remarks:p.admin_id!=null&&p.admin_id==_clsCurrentUser.EmpId?p.admin_remarks:""),

                    is_cancel = p.is_cancel == 0 ? "No" : p.is_cancel == 1 ? "Yes" : "-",
                    p.cancel_remarks,
                    company_name = p.comp_master.company_name,
                    p.company_id,

                }).ToList();

                return Ok(result);
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }
    #endregion **Start by Supriya on 11-05-2020,E-Separation**

        [Route("Get_Emp_all_Company/{emp_id}")]
        [HttpGet]
        ////[Authorize(Policy ="3057")]

        public IActionResult Get_Emp_all_Company([FromRoute] int emp_id)
        {
            ResponseMsg objrespsonse = new ResponseMsg();
            try
            {
                int _emp_id = 0;
                var temp_emp = _AC.HttpContext.User.Claims.Where(p => p.Type == "empid").FirstOrDefault();
                if (temp_emp != null)
                {
                    _emp_id = Convert.ToInt32(temp_emp.Value);
                }

                if (emp_id == _emp_id)
                {
                    var user_dtl = _context.tbl_user_master.Where(x => x.is_active == 1 && x.employee_id == emp_id).FirstOrDefault();
                    if (user_dtl != null)
                    {

                        clsUsersDetails obuser = new clsUsersDetails(_context, _config, user_dtl.username.Trim().ToUpper(), user_dtl.password.Trim(), 0);
                        var _comp_lst = obuser.Get_emp_company_lst(emp_id);
                        return Ok(_comp_lst);
                    }
                    else
                    {
                        objrespsonse.StatusCode = 1;
                        objrespsonse.Message = "Something went wrong, please logout than again login....";
                        return Ok(objrespsonse);
                    }
                }
                else
                {
                    objrespsonse.StatusCode = 1;
                    objrespsonse.Message = "Unauthorize access...!!";
                    return Ok(objrespsonse);
                }
            }
            catch (Exception ex)
            {
                objrespsonse.StatusCode = 1;
                objrespsonse.Message = ex.Message;
                return Ok(objrespsonse);
            }

        }


        public class BulkUploadData
        {
            public int default_company_id { get; set; }
            public int created_by { get; set; }
            public string UploadSection { get; set; }
        }


        [Route("BulkUploadEmployeeData_old_26_7_21")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Upload))]
        public async Task<IActionResult> BulkUploadEmployeeData_old_26_7_21()
        {
            Response_Msg objresponse = new Response_Msg();

            try
            {
                var files = HttpContext.Request.Form.Files;
                var a = HttpContext.Request.Form["AllData"];
                if (a.ToString() == null)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Invalid data !!";
                    return Ok(objresponse);
                }
                CommonClass com = new CommonClass();


                BulkUploadData objdetaills = new BulkUploadData();
                objdetaills = com.ToObjectFromJSON<BulkUploadData>(a.ToString());

                //open the excel using openxml sdk  
                StringBuilder excelResult = new StringBuilder();
                List<EmployeeQualificationSection> EmpDataList = new List<EmployeeQualificationSection>();
                List<EmployeeFamilySection> EmpFamilyDataList = new List<EmployeeFamilySection>();
                List<EmployeeShiftAlloc> EmpShiftDataList = new List<EmployeeShiftAlloc>();
                List<EmployeeOfficaialSection> EmpWeekOffDataList = new List<EmployeeOfficaialSection>();
                List<EmployeeGradeAlloc> EmpGradeDataList = new List<EmployeeGradeAlloc>();
                List<EmployeeDesignationAlloc> EmpDesignationDataList = new List<EmployeeDesignationAlloc>();
                List<EmployeeManagerAlloc> EmpManagerDataList = new List<EmployeeManagerAlloc>();
                List<EmployeePersonalSection> personallist = new List<EmployeePersonalSection>();
                List<EployeeAccountDetailsForUpload> AccountList = new List<EployeeAccountDetailsForUpload>();
                List<EployeeUanEsicDetailsForUpload> PfEsicList = new List<EployeeUanEsicDetailsForUpload>();
                List<EployeeManualAttendanceDetails> AttendanceList = new List<EployeeManualAttendanceDetails>();
                List<EmployeeAllDataUpload> FullUploadList = new List<EmployeeAllDataUpload>();

                string get_file_path = "";
                string company_name = "";
                string[] company_names = null;
                foreach (var FileData in files)
                {
                    if (FileData != null && FileData.Length > 0)
                    {
                        var allowedExtensions = new[] { ".xlsx" };

                        var ext = Path.GetExtension(FileData.FileName); //getting the extension
                        if (allowedExtensions.Contains(ext.ToLower()))//check what type of extension  
                        {
                            string name = Path.GetFileNameWithoutExtension(FileData.FileName); //getting file name without extension  

                            company_names = _context.tbl_company_master.OrderByDescending(x => x.company_id).Where(y => objdetaills.default_company_id > 0 ? y.company_id == objdetaills.default_company_id : true && y.is_active == 1).Select(p => p.company_name).ToArray();

                            company_name = objdetaills.default_company_id > 0 ? company_names[0] : "Group Company";

                            string MyFileName = "";
                            var webRoot = _hostingEnvironment.WebRootPath;
                            string currentmonth = Convert.ToString(DateTime.Now.Month).Length.ToString() == "1" ? "0" + Convert.ToString(DateTime.Now.Month) : Convert.ToString(DateTime.Now.Month);
                            var currentyearmonth = Convert.ToString(DateTime.Now.Year) + currentmonth;
                            var path = "";
    #region comment extra sections
                            //if (objdetaills.UploadSection == "QualificationSection")
                            //{
                            //    MyFileName = "EmpQualificationSection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/QualificationSection/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/QualificationSection/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/QualificationSection/" + currentyearmonth + "/");
                            //}
                            //else if (objdetaills.UploadSection == "FamilySection")
                            //{
                            //    MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/FamilySection/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/FamilySection/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/FamilySection/" + currentyearmonth + "/");
                            //}
                            //else if (objdetaills.UploadSection == "ShiftAllocation")
                            //{
                            //    MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/ShiftAllocation/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/ShiftAllocation/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/ShiftAllocation/" + currentyearmonth + "/");
                            //}
                            //else if (objdetaills.UploadSection == "WeekOffAllocation")
                            //{
                            //    MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/WeekOffAllocation/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/WeekOffAllocation/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/WeekOffAllocation/" + currentyearmonth + "/");
                            //}
                            //else if (objdetaills.UploadSection == "GradeAllocation")
                            //{
                            //    MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/GradeAllocation/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/GradeAllocation/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/GradeAllocation/" + currentyearmonth + "/");
                            //}
                            //else if (objdetaills.UploadSection == "DesignationAllocation")
                            //{
                            //    MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/DesignationAllocation/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/DesignationAllocation/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/DesignationAllocation/" + currentyearmonth + "/");
                            //}
                            //else if (objdetaills.UploadSection == "ManagerAllocation")
                            //{
                            //    MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/ManagerAllocation/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/ManagerAllocation/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/ManagerAllocation/" + currentyearmonth + "/");
                            //}
                            //else if (objdetaills.UploadSection == "PersonalSection")
                            //{
                            //    MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/PersonalSection/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/PersonalSection/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/PersonalSection/" + currentyearmonth + "/");
                            //}
                            //else if (objdetaills.UploadSection == "AccountSection")
                            //{
                            //    MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/AccountDetail/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/AccountDetail/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/AccountDetail/" + currentyearmonth + "/");
                            //}
                            //else if (objdetaills.UploadSection == "UANSection")
                            //{
                            //    MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/UANDetail/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/UANDetail/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/UANDetail/" + currentyearmonth + "/");
                            //}
                            //else if (objdetaills.UploadSection == "EmployeePunch")
                            //{
                            //    MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/EmployeePunch/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/EmployeePunch/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/EmployeePunch/" + currentyearmonth + "/");
                            //}
                            //else if (objdetaills.UploadSection == "EmployeeAttendanceStatus")
                            //{
                            //    MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/EmployeeAttendanceStatus/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/EmployeeAttendanceStatus/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/EmployeeAttendanceStatus/" + currentyearmonth + "/");
                            //}
                            //else if (objdetaills.UploadSection == "DeleteManualPunch")
                            //{
                            //    MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                            //    if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/DeleteManualPunch/" + currentyearmonth + "/"))
                            //    {
                            //        Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/DeleteManualPunch/" + currentyearmonth + "/");
                            //    }
                            //    path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/DeleteManualPunch/" + currentyearmonth + "/");
                            //}
    #endregion
                            if (objdetaills.UploadSection == "FullUpload")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/FullUpload/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/FullUpload/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/FullUpload/" + currentyearmonth + "/");
                            }



                            //save file
                            using (var fileStream = new FileStream(Path.Combine(path, MyFileName), FileMode.Create))
                            {
                                FileData.CopyTo(fileStream);
                                get_file_path = fileStream.Name;
                            }

                        }
                        else
                        {
                            objresponse.StatusCode = 1;
                            objresponse.Message = "Please Select Only Excel File";
                            return Ok(objresponse);
                        }
                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Please Select File For Upload";
                        return Ok(objresponse);
                    }

                }

    #region comments extra section
                //if (objdetaills.UploadSection == "QualificationSection")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EmployeeQualificationSection list = new EmployeeQualificationSection();
                //                        string currentcolumnno = string.Empty;

                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnno != "A")
                //                            {
                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **

                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                //                                                {
                //                                                    list.board_or_university = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                //                                                {
                //                                                    list.institute_or_school = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "F")
                //                                                {
                //                                                    list.stream = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "G")
                //                                                {
                //                                                    list.education_type = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "H")
                //                                                {
                //                                                    list.education_level = item.Text.Text;
                //                                                }
                //                                                //else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "I")
                //                                                //{
                //                                                //    list.marks_division_cgpa = item.Text.Text;
                //                                                //}
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "J")
                //                                                {
                //                                                    list.remark = item.Text.Text;
                //                                                }
                //                                                #endregion ** END value in list**


                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }

                //                                }
                //                                else
                //                                {
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **



                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "E")
                //                                    {
                //                                        list.passing_year = thecurrentcell.InnerText;
                //                                    }

                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "I")
                //                                    {
                //                                        // Gets a NumberFormatInfo associated with the en-US culture.  
                //                                        NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
                //                                        // Displays a value with the default number of decimal digits (2).  
                //                                        //Double myInt = 0.1234;
                //                                        // Console.WriteLine("Percent Format : " + Convert.ToDouble(thecurrentcell.InnerText).ToString("P", nfi));

                //                                        list.marks_division_cgpa = Convert.ToDouble(thecurrentcell.InnerText).ToString("P", nfi);
                //                                    }

                //                                    #endregion
                //                                }
                //                            }

                //                        }
                //                        excelResult.AppendLine();
                //                        list.created_by = objdetaills.created_by;
                //                        list.company_id = objdetaills.default_company_id;
                //                        EmpDataList.Add(list);
                //                    }

                //                }
                //                excelResult.Append("");
                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = EmpDataList;

                //        var dataaa = CheckQualificationDetailFromExcel(EmpDataList);
                //        var duplicate_dtl = dataaa.duplicateQualification;
                //        var missing_dtll = dataaa.missingQualification;
                //        var adddblistt = dataaa.addbempQualificationl;
                //        var missingDtlMessage = dataaa.MissingDtlMessage;
                //        objresponse = dataaa.objresponse;

                //        int result = _clEmployeeDetail.SaveQualificationDetailExcel(adddblistt);

                //        if (result == 0)
                //        {
                //            objresponse.StatusCode = 0;
                //            objresponse.Message = "Employee Qualification details of " + adddblistt.Count() + " employee successfully saved..";
                //            return Ok(dataaa);
                //        }
                //        else
                //        {
                //            objresponse.StatusCode = 1;
                //            objresponse.Message = "Something went wrong, please try after sometime...";
                //            return Ok(objresponse);
                //        }

                //    }
                //}
                //else if (objdetaills.UploadSection == "FamilySection")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EmployeeFamilySection list = new EmployeeFamilySection();
                //                        string currentcolumnno = string.Empty;

                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnno != "A")
                //                            {
                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **

                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                //                                                {
                //                                                    list.relation = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                //                                                {
                //                                                    list.occupation = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "E")
                //                                                {
                //                                                    list.name_as_per_aadhar_card = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "F")
                //                                                {
                //                                                    list.date_of_birth = Convert.ToDateTime(item.Text.Text);
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "G")
                //                                                {
                //                                                    list.gender = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "H")
                //                                                {
                //                                                    list.dependent = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "I")
                //                                                {
                //                                                    list.is_nominee = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "J")
                //                                                {
                //                                                    list.nominee_percentage = Convert.ToDouble(item.Text.Text);
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "K")
                //                                                {
                //                                                    list.remark = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "L")
                //                                                {
                //                                                    list.aadhar_card_no = item.Text.Text;

                //                                                }
                //                                                #endregion ** END value in list**


                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                                else
                //                                {
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **


                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                //                                    {
                //                                        list.relation = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "D")
                //                                    {
                //                                        list.occupation = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "E")
                //                                    {
                //                                        list.name_as_per_aadhar_card = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "F")
                //                                    {
                //                                        list.date_of_birth = DateTime.FromOADate(Double.Parse(thecurrentcell.InnerText)); //Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "G")
                //                                    {
                //                                        list.gender = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "H")
                //                                    {
                //                                        list.dependent = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "I")
                //                                    {
                //                                        list.is_nominee = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "J")
                //                                    {
                //                                        list.nominee_percentage = Convert.ToDouble(thecurrentcell.InnerText);
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "K")
                //                                    {
                //                                        list.remark = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "L")
                //                                    {
                //                                        list.aadhar_card_no = thecurrentcell.InnerText;

                //                                    }
                //                                    #endregion
                //                                }
                //                            }
                //                        }

                //                        excelResult.AppendLine();
                //                        list.created_by = objdetaills.created_by;
                //                        list.company_id = objdetaills.default_company_id;
                //                        EmpFamilyDataList.Add(list);
                //                    }

                //                }
                //                excelResult.Append("");

                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = EmpFamilyDataList;

                //        var dataaa = CheckFamilySectionDetailFromExcel(EmpFamilyDataList);

                //        var duplicate_dtl = dataaa.duplicateFamily;
                //        var missing_dtll = dataaa.missingFamily;
                //        var adddblistt = dataaa.addbempFamily;
                //        var missingDtlMessage = dataaa.MissingDtlMessage;


                //        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                //        {
                //            return Ok(dataaa);
                //        }
                //        else
                //        {
                //            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                //            int result = _clEmployeeDetail.SaveFamilyDetailExcel(adddblistt);

                //            if (result == 0)
                //            {
                //                objresponse.StatusCode = 0;
                //                objresponse.Message = "Employee Family details successfully saved..";
                //                return Ok(objresponse);
                //            }
                //            else
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Something went wrong, please try after sometime...";
                //                return Ok(objresponse);
                //            }
                //        }

                //    }

                //}
                //else if (objdetaills.UploadSection == "ShiftAllocation")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EmployeeShiftAlloc list = new EmployeeShiftAlloc();
                //                        string currentcolumnno = string.Empty;

                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnno != "A")
                //                            {
                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **

                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                //                                                {
                //                                                    list.shift_id = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                //                                                {
                //                                                    list.applicable_from_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                //                                                }

                //                                                #endregion ** END value in list**


                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                                else
                //                                {
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **

                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                //                                    {
                //                                        list.shift_id = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "D")
                //                                    {
                //                                        list.applicable_from_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                //                                    }



                //                                    #endregion
                //                                }
                //                            }
                //                        }

                //                        excelResult.AppendLine();
                //                        EmpShiftDataList.Add(list);
                //                    }

                //                }
                //                excelResult.Append("");

                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = EmpFamilyDataList;

                //        var dataaa = CheckShiftAllocFromExcel(EmpShiftDataList);

                //        var duplicate_dtl = dataaa.duplicateShiftAlloc;
                //        var missing_dtll = dataaa.missingShiftAlloc;
                //        var adddblistt = dataaa.addbempShiftAlloc;
                //        var missingDtlMessage = dataaa.MissingDtlMessage;


                //        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                //        {
                //            return Ok(dataaa);
                //        }
                //        else
                //        {
                //            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                //            int result = _clEmployeeDetail.SaveShiftAllocDetailExcel(adddblistt);

                //            if (result == 0)
                //            {
                //                objresponse.StatusCode = 0;
                //                objresponse.Message = "Employee Shift Allocation successfully saved..";
                //                return Ok(objresponse);
                //            }
                //            else
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Something went wrong, please try after sometime...";
                //                return Ok(objresponse);
                //            }
                //        }

                //    }
                //}
                //else if (objdetaills.UploadSection == "WeekOffAllocation")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EmployeeOfficaialSection list = new EmployeeOfficaialSection();
                //                        string currentcolumnno = string.Empty;

                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnno != "A")
                //                            {
                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **

                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                //                                                {
                //                                                    list.weekly_off = item.Text.Text;
                //                                                }

                //                                                #endregion ** END value in list**


                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                                else
                //                                {
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **

                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                //                                    {
                //                                        list.weekly_off = thecurrentcell.InnerText;
                //                                    }



                //                                    #endregion
                //                                }
                //                            }
                //                        }

                //                        excelResult.AppendLine();
                //                        EmpWeekOffDataList.Add(list);
                //                    }

                //                }
                //                excelResult.Append("");

                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = EmpFamilyDataList;

                //        var dataaa = CheckWeekOffAllocFromExcel(EmpWeekOffDataList);

                //        var duplicate_dtl = dataaa.duplicatedetaillist;
                //        var missing_dtll = dataaa.missingdetaillist;
                //        var adddblistt = dataaa.adddblist;
                //        var missingDtlMessage = dataaa.MissingDtlMessage;


                //        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                //        {
                //            return Ok(dataaa);
                //        }
                //        else
                //        {
                //            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                //            int result = _clEmployeeDetail.SaveWeekOffAllocDetailExcel(adddblistt);

                //            if (result == 0)
                //            {
                //                objresponse.StatusCode = 0;
                //                objresponse.Message = "Employee Week Off Allocation successfully saved..";
                //                return Ok(objresponse);
                //            }
                //            else
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Something went wrong, please try after sometime...";
                //                return Ok(objresponse);
                //            }
                //        }

                //    }
                //}
                //else if (objdetaills.UploadSection == "GradeAllocation")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EmployeeGradeAlloc list = new EmployeeGradeAlloc();
                //                        string currentcolumnno = string.Empty;

                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnno != "A")
                //                            {
                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **

                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                //                                                {
                //                                                    list.grade_id = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                //                                                {
                //                                                    list.applicable_from_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "E")
                //                                                {
                //                                                    list.applicable_to_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                //                                                }
                //                                                #endregion ** END value in list**


                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                                else
                //                                {
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **

                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                //                                    {
                //                                        list.grade_id = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "D")
                //                                    {
                //                                        list.applicable_from_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "E")
                //                                    {
                //                                        list.applicable_to_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                //                                    }



                //                                    #endregion
                //                                }
                //                            }
                //                        }

                //                        excelResult.AppendLine();
                //                        EmpGradeDataList.Add(list);
                //                    }

                //                }
                //                excelResult.Append("");

                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = EmpFamilyDataList;

                //        var dataaa = CheckGradeAllocFromExcel(EmpGradeDataList);

                //        var duplicate_dtl = dataaa.duplicateGradeAlloc;
                //        var missing_dtll = dataaa.missingGradeAlloc;
                //        var adddblistt = dataaa.addbempGradeAlloc;
                //        var missingDtlMessage = dataaa.MissingDtlMessage;


                //        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                //        {
                //            return Ok(dataaa);
                //        }
                //        else
                //        {
                //            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                //            int result = _clEmployeeDetail.SaveGradeAllocDetailExcel(adddblistt);

                //            if (result == 0)
                //            {
                //                objresponse.StatusCode = 0;
                //                objresponse.Message = "Employee Grade Allocation successfully saved..";
                //                return Ok(objresponse);
                //            }
                //            else
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Something went wrong, please try after sometime...";
                //                return Ok(objresponse);
                //            }
                //        }

                //    }
                //}
                //else if (objdetaills.UploadSection == "DesignationAllocation")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EmployeeDesignationAlloc list = new EmployeeDesignationAlloc();
                //                        string currentcolumnno = string.Empty;

                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnno != "A")
                //                            {
                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **

                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                //                                                {
                //                                                    list.designation_id = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                //                                                {
                //                                                    list.applicable_from_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "E")
                //                                                {
                //                                                    list.applicable_to_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                //                                                }
                //                                                #endregion ** END value in list**


                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                                else
                //                                {
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **

                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                //                                    {
                //                                        list.designation_id = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "D")
                //                                    {
                //                                        list.applicable_from_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "E")
                //                                    {
                //                                        list.applicable_to_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                //                                    }



                //                                    #endregion
                //                                }
                //                            }
                //                        }

                //                        excelResult.AppendLine();
                //                        EmpDesignationDataList.Add(list);
                //                    }

                //                }
                //                excelResult.Append("");

                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = EmpFamilyDataList;

                //        var dataaa = CheckDesignationAllocFromExcel(EmpDesignationDataList);

                //        var duplicate_dtl = dataaa.duplicateDesignationAlloc;
                //        var missing_dtll = dataaa.missingDesignationAlloc;
                //        var adddblistt = dataaa.addbempDesignationAlloc;
                //        var missingDtlMessage = dataaa.MissingDtlMessage;


                //        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                //        {
                //            return Ok(dataaa);
                //        }
                //        else
                //        {
                //            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                //            int result = _clEmployeeDetail.SaveDesignationAllocDetailExcel(adddblistt);

                //            if (result == 0)
                //            {
                //                objresponse.StatusCode = 0;
                //                objresponse.Message = "Employee Designation Allocation successfully saved..";
                //                return Ok(objresponse);
                //            }
                //            else
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Something went wrong, please try after sometime...";
                //                return Ok(objresponse);
                //            }
                //        }

                //    }
                //}
                //else if (objdetaills.UploadSection == "ManagerAllocation")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EmployeeManagerAlloc list = new EmployeeManagerAlloc();
                //                        string currentcolumnno = string.Empty;

                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnno != "A")
                //                            {
                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **

                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                //                                                {
                //                                                    list.m_one_id = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                //                                                {
                //                                                    list.m_one_final_approval = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "E")
                //                                                {
                //                                                    list.m_two_id = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "F")
                //                                                {
                //                                                    list.m_two_final_approval = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "G")
                //                                                {
                //                                                    list.m_three_id = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "H")
                //                                                {
                //                                                    list.m_three_final_approval = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "I")
                //                                                {
                //                                                    list.applicable_from_date = DateTime.ParseExact(item.Text.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "J")
                //                                                {
                //                                                    list.applicable_to_date = DateTime.ParseExact(item.Text.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                //                                                }
                //                                                #endregion ** END value in list**


                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                                else
                //                                {
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **

                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }


                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                //                                    {
                //                                        list.m_one_id = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "D")
                //                                    {
                //                                        list.m_one_final_approval = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "E")
                //                                    {
                //                                        list.m_two_id = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "F")
                //                                    {
                //                                        list.m_two_final_approval = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "G")
                //                                    {
                //                                        list.m_three_id = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "H")
                //                                    {
                //                                        list.m_three_final_approval = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "I")
                //                                    {
                //                                        list.applicable_from_date = DateTime.ParseExact(thecurrentcell.InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "J")
                //                                    {
                //                                        list.applicable_to_date = DateTime.ParseExact(thecurrentcell.InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                //                                    }


                //                                    #endregion
                //                                }
                //                            }
                //                        }

                //                        list.company_id = objdetaills.default_company_id;

                //                        excelResult.AppendLine();
                //                        EmpManagerDataList.Add(list);
                //                    }

                //                }
                //                excelResult.Append("");

                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = EmpManagerDataList;

                //        var dataaa = CheckManagerAllocFromExcel(EmpManagerDataList);

                //        var duplicate_dtl = dataaa.duplicateManagerAlloc;
                //        var missing_dtll = dataaa.missingManagerAlloc;
                //        var adddblistt = dataaa.addbempManagerAlloc;
                //        var missingDtlMessage = dataaa.MissingDtlMessage;


                //        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                //        {
                //            return Ok(dataaa);
                //        }
                //        else
                //        {
                //            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                //            int result = _clEmployeeDetail.SaveManagerAllocDetailExcel(adddblistt);

                //            if (result == 0)
                //            {
                //                objresponse.StatusCode = 0;
                //                objresponse.Message = "Employee Manager Allocation successfully saved..";
                //                return Ok(objresponse);
                //            }
                //            else
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Something went wrong, please try after sometime...";
                //                return Ok(objresponse);
                //            }
                //        }

                //    }
                //}
                //else if (objdetaills.UploadSection == "PersonalSection")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();
                //            //StringBuilder excelResult = new StringBuilder();


                //            //array list to store employee code

                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();



                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EmployeePersonalSection list = new EmployeePersonalSection();
                //                        string currentcolumnnoo = string.Empty;
                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnnoo != "A")
                //                            {

                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **
                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
                //                                                {
                //                                                    list.blood_group_name = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "D")
                //                                                {
                //                                                    list.primary_contact_number = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "E")
                //                                                {
                //                                                    list.primary_email_id = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "F")
                //                                                {
                //                                                    list.permanent_address_line_one = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "G")
                //                                                {
                //                                                    list.country = item.Text.Text;
                //                                                }

                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "H")
                //                                                {
                //                                                    list.state = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "I")
                //                                                {
                //                                                    list.city = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "J")
                //                                                {
                //                                                    list.permanent_pin_code = Convert.ToInt32(item.Text.Text);
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "K")
                //                                                {
                //                                                    list.emergency_contact_name = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "L")
                //                                                {
                //                                                    list.emergency_contact_relation = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "M")
                //                                                {
                //                                                    list.emergency_contact_mobile_number = item.Text.Text;
                //                                                }

                //                                                #endregion ** END value in list**
                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                                else
                //                                {
                //                                    //read columns value
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **


                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
                //                                    {
                //                                        list.blood_group_name = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "D")
                //                                    {
                //                                        list.primary_contact_number = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "E")
                //                                    {
                //                                        list.primary_email_id = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "F")
                //                                    {
                //                                        list.permanent_address_line_one = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "G")
                //                                    {
                //                                        list.country = thecurrentcell.InnerText;
                //                                    }

                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "H")
                //                                    {
                //                                        list.state = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "I")
                //                                    {
                //                                        list.city = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "J")
                //                                    {
                //                                        list.permanent_pin_code = Convert.ToInt32(thecurrentcell.InnerText);
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "K")
                //                                    {
                //                                        list.emergency_contact_name = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "L")
                //                                    {
                //                                        list.emergency_contact_relation = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "M")
                //                                    {
                //                                        list.emergency_contact_mobile_number = thecurrentcell.InnerText;
                //                                    }
                //                                    #endregion ** END value in list**

                //                                }


                //                            }



                //                        }
                //                        excelResult.AppendLine();
                //                        list.created_by = objdetaills.created_by;
                //                        list.default_company_id = objdetaills.default_company_id;
                //                        personallist.Add(list);
                //                    }

                //                }
                //                excelResult.Append("");
                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = personallist;

                //        var dataaa = CheckEmpPersonalDetailsfromexcel(personallist);
                //        var duplicate_dtl = dataaa.duplicatepersonaldtl;
                //        var missing_dtll = dataaa.missingpersonaldtl;
                //        var adddblistt = dataaa.adddbpersonaldtl;
                //        var missingDtlMessage = dataaa.MissingDtlMessage;

                //        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                //        {
                //            return Ok(dataaa);
                //        }
                //        else
                //        {
                //            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                //            int returnnvalue = _clEmployeeDetail.SaveEmpPersonalDetailFromExcel(adddblistt);

                //            if (returnnvalue < 0)
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Something went wrong in Excel Detail";
                //                return Ok(objresponse);

                //            }
                //            else if (returnnvalue == 1)
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Server is Busy Please try after some time..";
                //                return Ok(objresponse);
                //            }
                //            else
                //            {
                //                objresponse.StatusCode = 0;
                //                objresponse.Message = "Personal Details Successfully Save..!";
                //                return Ok(objresponse);
                //            }
                //        }
                //    }
                //    else
                //    {
                //        objresponse.StatusCode = 1;
                //        objresponse.Message = "Something went wrong";
                //        return Ok(objresponse);
                //    }
                //}
                //else if (objdetaills.UploadSection == "AccountSection")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                //            //array list to store employee code
                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();


                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EployeeAccountDetailsForUpload list = new EployeeAccountDetailsForUpload();

                //                        string currentcolumnnoo = string.Empty;
                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnnoo != "A")
                //                            {

                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **
                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
                //                                                {
                //                                                    list.pan_card_name = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "D")
                //                                                {
                //                                                    list.pan_card_number = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "E")
                //                                                {
                //                                                    list.aadha_card_name = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "F")
                //                                                {
                //                                                    list.aadha_card_number = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "G")
                //                                                {
                //                                                    list.bank_id = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "H")
                //                                                {
                //                                                    list.bank_acc = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "I")
                //                                                {
                //                                                    list.ifsc_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "J")
                //                                                {
                //                                                    list.branch_name = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "K")
                //                                                {
                //                                                    // enmPaymentMode PayMode = (enmPaymentMode)Enum.Parse(typeof(enmPaymentMode), item.Text.Text, true);
                //                                                    list.payment_mode = item.Text.Text; ;
                //                                                }
                //                                                #endregion ** END value in list**
                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                                else
                //                                {
                //                                    //read columns value
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **


                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
                //                                    {
                //                                        list.pan_card_name = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "D")
                //                                    {
                //                                        list.pan_card_number = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "E")
                //                                    {
                //                                        list.aadha_card_name = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "F")
                //                                    {
                //                                        list.aadha_card_number = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "G")
                //                                    {
                //                                        list.bank_id = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "H")
                //                                    {
                //                                        list.bank_acc = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "I")
                //                                    {
                //                                        list.ifsc_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "J")
                //                                    {
                //                                        list.branch_name = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "K")
                //                                    {
                //                                        // enmPaymentMode PayMode = (enmPaymentMode)Enum.Parse(typeof(enmPaymentMode), item.Text.Text, true);
                //                                        list.payment_mode = thecurrentcell.InnerText;
                //                                    }
                //                                    #endregion ** END value in list**

                //                                }
                //                            }
                //                        }
                //                        excelResult.AppendLine();
                //                        list.created_by = objdetaills.created_by;

                //                        AccountList.Add(list);
                //                    }
                //                }
                //                excelResult.Append("");
                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = AccountList;

                //        var dataaa = CheckEmpAccountDetailsfromexcel(AccountList);
                //        var duplicate_dtl = dataaa.duplicateAccountdtl;
                //        var missing_dtll = dataaa.missingAccountdtlc;
                //        var adddblistt = dataaa.addbempAccountdtl;
                //        var missingDtlMessage = dataaa.MissingDtlMessage;

                //        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                //        {
                //            return Ok(dataaa);
                //        }
                //        else
                //        {
                //            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                //            int returnnvalue = _clEmployeeDetail.SaveEmpAccountDetailFromExcel(adddblistt);


                //            if (returnnvalue < 0)
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Something went wrong in Excel Detail";
                //                return Ok(objresponse);

                //            }
                //            else if (returnnvalue == 1)
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Server is Busy Please try after some time..";
                //                return Ok(objresponse);
                //            }
                //            else
                //            {
                //                objresponse.StatusCode = 0;
                //                objresponse.Message = "Successfully saved";
                //                return Ok(objresponse);
                //            }



                //        }

                //    }
                //    else
                //    {
                //        objresponse.StatusCode = 1;
                //        objresponse.Message = "Something went wrong";
                //        return Ok(objresponse);
                //    }
                //}
                //else if (objdetaills.UploadSection == "UANSection")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                //            //array list to store employee code
                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();


                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EployeeUanEsicDetailsForUpload list = new EployeeUanEsicDetailsForUpload();

                //                        string currentcolumnnoo = string.Empty;
                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnnoo != "A")
                //                            {

                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **
                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
                //                                                {
                //                                                    list.uan_number = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "D")
                //                                                {
                //                                                    list.pf_number = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "E")
                //                                                {
                //                                                    list.pf_group = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "F")
                //                                                {
                //                                                    list.pf_celing = Convert.ToDouble(item.Text.Text);
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "G")
                //                                                {
                //                                                    list.vpf_Group = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "H")
                //                                                {
                //                                                    list.vpf_amount = Convert.ToDouble(item.Text.Text);
                //                                                }

                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "I")
                //                                                {
                //                                                    list.bank_id = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "J")
                //                                                {
                //                                                    list.bank_acc = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "K")
                //                                                {
                //                                                    list.ifsc_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "L")
                //                                                {
                //                                                    list.esic_number = item.Text.Text;
                //                                                }

                //                                                #endregion ** END value in list**
                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                                else
                //                                {
                //                                    //read columns value
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **

                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
                //                                    {
                //                                        list.uan_number = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "D")
                //                                    {
                //                                        list.pf_number = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "E")
                //                                    {
                //                                        list.pf_group = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "F")
                //                                    {
                //                                        list.pf_celing = Convert.ToDouble(thecurrentcell.InnerText);
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "G")
                //                                    {
                //                                        list.vpf_Group = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "H")
                //                                    {
                //                                        list.vpf_amount = Convert.ToDouble(thecurrentcell.InnerText);
                //                                    }

                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "I")
                //                                    {
                //                                        list.bank_id = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "J")
                //                                    {
                //                                        list.bank_acc = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "K")
                //                                    {
                //                                        list.ifsc_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "L")
                //                                    {
                //                                        list.esic_number = thecurrentcell.InnerText;
                //                                    }
                //                                    #endregion ** END value in list**

                //                                }
                //                            }
                //                        }
                //                        excelResult.AppendLine();
                //                        list.created_by = objdetaills.created_by;

                //                        PfEsicList.Add(list);
                //                    }
                //                }
                //                excelResult.Append("");
                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = PfEsicList;

                //        var dataaa = CheckEmpUanEsicDetailsfromexcel(PfEsicList);
                //        var duplicate_dtl = dataaa.duplicateUanEsicdtl;
                //        var missing_dtll = dataaa.missingUanEsictlc;
                //        var adddblistt = dataaa.addbempUanEsicdtl;
                //        var missingDtlMessage = dataaa.MissingDtlMessage;

                //        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                //        {
                //            return Ok(dataaa);
                //        }
                //        else
                //        {
                //            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                //            int returnnvalue = _clEmployeeDetail.SaveEmpUanEsicDetailFromExcel(adddblistt);


                //            if (returnnvalue < 0)
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Something went wrong in Excel Detail";
                //                return Ok(objresponse);

                //            }
                //            else if (returnnvalue == 1)
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Server is Busy Please try after some time..";
                //                return Ok(objresponse);
                //            }
                //            else
                //            {
                //                objresponse.StatusCode = 0;
                //                objresponse.Message = "Employee UAN & ESIC Details Successfully saved";
                //                return Ok(objresponse);
                //            }



                //        }

                //    }
                //    else
                //    {
                //        objresponse.StatusCode = 1;
                //        objresponse.Message = "Something went wrong";
                //        return Ok(objresponse);
                //    }
                //}
                //else if (objdetaills.UploadSection == "EmployeePunch")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                //            //array list to store employee code
                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();


                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EployeeManualAttendanceDetails list = new EployeeManualAttendanceDetails();

                //                        string currentcolumnnoo = string.Empty;
                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnnoo != "A")
                //                            {

                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **
                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
                //                                                {
                //                                                    list.attendance_dt = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);

                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "D")
                //                                                {
                //                                                    list.start_in = Convert.ToDateTime("2000-01-01 " + DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[106]);
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "E")
                //                                                {
                //                                                    list.start_out = Convert.ToDateTime("2000-01-01 " + DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[106]);


                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "F")
                //                                                {
                //                                                    list.day_status = item.Text.Text;
                //                                                }

                //                                                #endregion ** END value in list**
                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                                else
                //                                {
                //                                    //read columns value
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **

                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
                //                                    {
                //                                        list.attendance_dt = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);

                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "D")
                //                                    {
                //                                        list.start_in = Convert.ToDateTime("2000-01-01 " + DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[106]);


                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "E")
                //                                    {
                //                                        list.start_out = Convert.ToDateTime("2000-01-01 " + DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[106]);


                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "F")
                //                                    {
                //                                        list.day_status = thecurrentcell.InnerText;
                //                                    }
                //                                    #endregion ** END value in list**

                //                                }
                //                            }
                //                        }
                //                        excelResult.AppendLine();


                //                        AttendanceList.Add(list);
                //                    }
                //                }
                //                excelResult.Append("");
                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = AttendanceList;




                //        var dataaa = CheckEmpManualAttendanceDetailsfromexcel(AttendanceList);
                //        var duplicate_dtl = dataaa.duplicateAttendancedtl;
                //        var missing_dtll = dataaa.missinAttendancetlc;
                //        var adddblistt = dataaa.addbempAttendancedtl;
                //        var missingDtlMessage = dataaa.MissingDtlMessage;

                //        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                //        {
                //            return Ok(dataaa);
                //        }
                //        else
                //        {
                //            clsManualAttendance obj_cls_emp = new clsManualAttendance(adddblistt, _context);
                //            obj_cls_emp.SaveData();


                //            objresponse.StatusCode = 0;
                //            objresponse.Message = "Employee Attendance Successfully saved";
                //            return Ok(objresponse);


                //        }

                //    }
                //    else
                //    {
                //        objresponse.StatusCode = 1;
                //        objresponse.Message = "Something went wrong";
                //        return Ok(objresponse);
                //    }
                //}
                //else if (objdetaills.UploadSection == "EmployeeAttendanceStatus")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                //            //array list to store employee code
                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();


                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EployeeManualAttendanceDetails list = new EployeeManualAttendanceDetails();

                //                        string currentcolumnnoo = string.Empty;
                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnnoo != "A")
                //                            {

                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **
                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
                //                                                {
                //                                                    try
                //                                                    {
                //                                                        list.attendance_dt = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                //                                                    }
                //                                                    catch (Exception)
                //                                                    {
                //                                                        list.attendance_dt = DateTime.MinValue;
                //                                                    }


                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "D")
                //                                                {
                //                                                    list.day_status = item.Text.Text;
                //                                                }

                //                                                #endregion ** END value in list**
                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                                else
                //                                {
                //                                    //read columns value
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **

                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
                //                                    {
                //                                        try
                //                                        {
                //                                            list.attendance_dt = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                //                                        }
                //                                        catch (Exception)
                //                                        {
                //                                            list.attendance_dt = DateTime.MinValue;
                //                                        }

                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "D")
                //                                    {
                //                                        list.day_status = thecurrentcell.InnerText;
                //                                    }
                //                                    #endregion ** END value in list**

                //                                }
                //                            }
                //                        }
                //                        excelResult.AppendLine();


                //                        AttendanceList.Add(list);
                //                    }
                //                }
                //                excelResult.Append("");
                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = AttendanceList;

                //        if (!(_clsCurrentUser.Is_SuperAdmin || _clsCurrentUser.Is_HRAdmin) && objdetaills.default_company_id > 0)
                //        {
                //            if (!_clsCurrentUser.CompanyId.Contains(objdetaills.default_company_id))
                //            {
                //                objresponse.StatusCode = 1;
                //                objresponse.Message = "Unauthorized access for this company....";
                //                return Ok(objresponse);
                //            }
                //        }

                //        var dataaa = CheckEmpManualAttendanceStatusDetailsfromexcel(AttendanceList);
                //        var duplicate_dtl = dataaa.duplicateAttendancelist;
                //        var missing_dtll = dataaa.missinAttendancetlist;
                //        var issue_dtll = dataaa.issueAttendencelist;
                //        var adddblistt = dataaa.addbempAttendancelist;
                //        objresponse = dataaa.objresponse;
                //        var adddblistt1 = adddblistt.ConvertAll(x => new tbl_attendance_details_manual
                //        {
                //            user_id = x.user_id,
                //            attendance_dt = x.attendance_dt,
                //            emp_id = x.emp_id,
                //            day_status = Convert.ToByte(x.day_status),
                //            entry_date = x.entry_date
                //        });
                //        //var missingDtlMessage = dataaa.MissingDtlMessage;

                //        if (adddblistt1.Count() > 0)
                //        {
                //            var _tadm = _context.tbl_attendance_details_manual.Join(adddblistt1, tb => new { tb.emp_id, tb.attendance_dt }, lst => new { lst.emp_id, lst.attendance_dt }, (tb, lst) => new { tb, lst }).Select(p => p.tb).ToList();
                //            _context.tbl_attendance_details_manual.RemoveRange(_tadm);
                //            _context.SaveChanges();

                //            clsManualAttendance obj_cls_emp = new clsManualAttendance(adddblistt1, _context);
                //            obj_cls_emp.SaveData();
                //        }

                //        objresponse.Message = adddblistt1.Count().ToString() + " Record Successfully saved";
                //        return Ok(dataaa);
                //    }
                //    else
                //    {
                //        objresponse.StatusCode = 1;
                //        objresponse.Message = "Something went wrong";
                //        return Ok(objresponse);
                //    }
                //}
                //else if (objdetaills.UploadSection == "DeleteManualPunch")
                //{
                //    if (!string.IsNullOrEmpty(get_file_path))
                //    {

                //        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                //        {

                //            //create the object for workbook part  
                //            WorkbookPart workbookPart = doc.WorkbookPart;
                //            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                //            //array list to store employee code
                //            var pathh = Path.GetTempPath();

                //            //using for each loop to get the sheet from the sheetcollection  
                //            foreach (Sheet thesheet in thesheetcollection)
                //            {
                //                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                //                excelResult.AppendLine("----------------------------------------------- ");
                //                //statement to get the worksheet object by using the sheet id  
                //                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                //                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();


                //                foreach (Row thecurrentrow in thesheetdata)
                //                {
                //                    //skip header row
                //                    if (thecurrentrow.RowIndex != 1)
                //                    {
                //                        EployeeManualAttendanceDetails list = new EployeeManualAttendanceDetails();

                //                        string currentcolumnnoo = string.Empty;
                //                        foreach (Cell thecurrentcell in thecurrentrow)
                //                        {
                //                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                //                            //skip sr no.
                //                            if (currentcolumnnoo != "A")
                //                            {

                //                                //statement to take the integer value  
                //                                string currentcellvalue = string.Empty;
                //                                if (thecurrentcell.DataType != null)
                //                                {
                //                                    if (thecurrentcell.DataType == CellValues.SharedString)
                //                                    {
                //                                        int id;
                //                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                //                                        {
                //                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                //                                            if (item.Text != null)
                //                                            {
                //                                                //code to take the string value  
                //                                                excelResult.Append(item.Text.Text + " ");
                //                                                #region ** START Add value in list **
                //                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
                //                                                {
                //                                                    list.emp_code = item.Text.Text;
                //                                                }
                //                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
                //                                                {
                //                                                    list.attendance_dt = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);

                //                                                }

                //                                                #endregion ** END value in list**
                //                                            }
                //                                            else if (item.InnerText != null)
                //                                            {
                //                                                currentcellvalue = item.InnerText;
                //                                            }
                //                                            else if (item.InnerXml != null)
                //                                            {
                //                                                currentcellvalue = item.InnerXml;
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                                else
                //                                {
                //                                    //read columns value
                //                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
                //                                    #region ** START Add value in list **

                //                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
                //                                    {
                //                                        list.emp_code = thecurrentcell.InnerText;
                //                                    }
                //                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
                //                                    {
                //                                        list.attendance_dt = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                //                                    }
                //                                    #endregion ** END value in list**

                //                                }
                //                            }
                //                        }
                //                        excelResult.AppendLine();


                //                        AttendanceList.Add(list);
                //                    }
                //                }
                //                excelResult.Append("");
                //            }
                //        }

                //        var data = excelResult.ToString();
                //        var data1 = AttendanceList;




                //        var dataaa = CheckEmpdDeleteManualAttendanceDetailsfromexcel(AttendanceList);
                //        var duplicate_dtl = dataaa.duplicateAttendancedtl;
                //        var missing_dtll = dataaa.missinAttendancetlc;
                //        var adddblistt = dataaa.addbempAttendancedtl;
                //        var missingDtlMessage = dataaa.MissingDtlMessage;

                //        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                //        {
                //            return Ok(dataaa);
                //        }
                //        else
                //        {
                //            clsManualAttendance obj_cls_emp = new clsManualAttendance(adddblistt, _context);
                //            obj_cls_emp.DeleteData();


                //            objresponse.StatusCode = 0;
                //            objresponse.Message = "Employee Attendance Status Deleted Successfully...!";
                //            return Ok(objresponse);


                //        }

                //    }
                //    else
                //    {
                //        objresponse.StatusCode = 1;
                //        objresponse.Message = "Something went wrong";
                //        return Ok(objresponse);
                //    }
                //}
    #endregion

                if (objdetaills.UploadSection == "FullUpload")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            //array list to store employee code
                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();


                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EmployeeAllDataUpload list = new EmployeeAllDataUpload();

                                        string currentcolumnnoo = string.Empty;
                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {

                                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Replace(thecurrentrow.RowIndex, string.Empty);


                                            //statement to take the integer value  
                                            string currentcellvalue = string.Empty;
                                            if (thecurrentcell.DataType != null)
                                            {
                                                if (thecurrentcell.DataType == CellValues.SharedString)
                                                {
                                                    int id;
                                                    if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                    {
                                                        SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                        if (item.Text != null)
                                                        {
                                                            //code to take the string value  
                                                            excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **
                                                            //if (!string.IsNullOrEmpty(item.Text.Text) && item.Text.Text.Trim().ToUpper() != "NA" && item.Text.Text.Trim().ToUpper() != "N.A" && item.Text.Text.Trim().ToUpper() != "N.A.")
                                                            if (!string.IsNullOrEmpty(item.Text.Text))
                                                            {
                                                                if (currentcolumnnoo == "A")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "B")
                                                                {
                                                                    list.salutation = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "C")
                                                                {
                                                                    list.emp_name = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "D")
                                                                {
                                                                    list.father_husband_name = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "E")
                                                                {
                                                                    list.date_of_birth = DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText));
                                                                    //list.date_of_birth = DateTime.ParseExact(item.Text.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                                                                }
                                                                else if (currentcolumnnoo == "F")
                                                                {
                                                                    list.nationality = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "G")
                                                                {
                                                                    list.gender = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "H")
                                                                {
                                                                    list.is_active = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "I")
                                                                {
                                                                    list.blood_group = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "J")
                                                                {
                                                                    list.marital_status = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "K")
                                                                {
                                                                    list.adhar_no = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "L")
                                                                {
                                                                    list.adhar_name = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "M")
                                                                {
                                                                    list.employee_status = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "N")
                                                                {
                                                                    list.date_of_joining = DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText));
                                                                    //list.date_of_joining = DateTime.ParseExact(item.Text.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                                }
                                                                else if (currentcolumnnoo == "O")
                                                                {
                                                                    list.probation_period = Convert.ToInt32(item.Text.Text);
                                                                }
                                                                else if (currentcolumnnoo == "P")
                                                                {
                                                                    try
                                                                    {
                                                                        list.confirmation_date = DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText));
                                                                        //list.confirmation_date = DateTime.ParseExact(item.Text.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                                    }
                                                                    catch
                                                                    {
                                                                        list.confirmation_date = list.date_of_joining.AddYears(1);
                                                                    }
                                                                }
                                                                else if (currentcolumnnoo == "Q")
                                                                {
                                                                    try
                                                                    {
                                                                        list.resignation_date = DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText));
                                                                        //list.resignation_date = DateTime.ParseExact(item.Text.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                                    }
                                                                    catch
                                                                    {
                                                                        list.resignation_date = list.date_of_joining.AddYears(40);
                                                                    }
                                                                }
                                                                else if (currentcolumnnoo == "R")
                                                                {
                                                                    list.notice_period = Convert.ToInt32(item.Text.Text);
                                                                }
                                                                else if (currentcolumnnoo == "S")
                                                                {
                                                                    try
                                                                    {
                                                                        list.last_working_date = DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText));
                                                                        //list.last_working_date = DateTime.ParseExact(item.Text.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                                    }
                                                                    catch
                                                                    {
                                                                        list.last_working_date = list.date_of_joining.AddYears(40);
                                                                    }
                                                                }
                                                                else if (currentcolumnnoo == "T")
                                                                {
                                                                    try
                                                                    {
                                                                        list.card_number = Convert.ToInt32(item.Text.Text);
                                                                    }
                                                                    catch { }

                                                                }
                                                                else if (currentcolumnnoo == "U")
                                                                {
                                                                    list.email_work = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "V")
                                                                {
                                                                    list.company_name = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "W")
                                                                {
                                                                    list.location_name = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "X")
                                                                {
                                                                    list.department_name = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "Y")
                                                                {
                                                                    list.designation_name = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "Z")
                                                                {
                                                                    list.grade_name = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AA")
                                                                {
                                                                    list.salary_group = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AB")
                                                                {
                                                                    list.bank_name = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AC")
                                                                {
                                                                    list.bank_IFSC_Code = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AD")
                                                                {
                                                                    list.salary_account_no = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AE")
                                                                {
                                                                    list.salary_bank_branch = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AF")
                                                                {
                                                                    list.current_address1 = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AG")
                                                                {
                                                                    list.current_address2 = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AH")
                                                                {
                                                                    try
                                                                    {
                                                                        list.current_pincode = Convert.ToInt32(item.Text.Text.Replace(" ", string.Empty).Replace("-", string.Empty));
                                                                    }
                                                                    catch { }
                                                                }
                                                                else if (currentcolumnnoo == "AI")
                                                                {
                                                                    list.permenant_address1 = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AJ")
                                                                {
                                                                    list.permenant_address2 = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AK")
                                                                {
                                                                    try
                                                                    {
                                                                        list.permenant_pincode = Convert.ToInt32(item.Text.Text.Replace(" ", string.Empty).Replace("-", string.Empty));
                                                                    }
                                                                    catch { }
                                                                }
                                                                else if (currentcolumnnoo == "AL")
                                                                {
                                                                    list.permenant_city_name = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AM")
                                                                {
                                                                    list.permenant_state_name = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AN")
                                                                {
                                                                    list.payment_mode = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AO")
                                                                {
                                                                    list.PAN_No = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AP")
                                                                {
                                                                    list.UAN_number = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AQ")
                                                                {
                                                                    list.PF_applicable = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AR")
                                                                {
                                                                    list.PF_number = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AS")
                                                                {
                                                                    list.PF_ceiling = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AT")
                                                                {
                                                                    list.PF_group = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AU")
                                                                {
                                                                    list.ESIC_applicable = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AV")
                                                                {
                                                                    list.ESIC_number = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AW")
                                                                {
                                                                    list.ESIC_group = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AX")
                                                                {
                                                                    list.PT_applicable = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AY")
                                                                {
                                                                    list.PT_group = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "AZ")
                                                                {
                                                                    list.VPF_percentage = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "BA")
                                                                {
                                                                    list.SPT_description = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "BB")
                                                                {
                                                                    list.is_branch_ESIC_applicable = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "BC")
                                                                {
                                                                    list.state_name = item.Text.Text;
                                                                }
                                                                else if (currentcolumnnoo == "BD")
                                                                {
                                                                    list.city_name = item.Text.Text;
                                                                }

                                                            }


    #endregion ** END value in list**
                                                        }
                                                        //else if (item.InnerText != null)
                                                        //{
                                                        //    currentcellvalue = item.InnerText;
                                                        //}
                                                        //else if (item.InnerXml != null)
                                                        //{
                                                        //    currentcellvalue = item.InnerXml;
                                                        //}
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //read columns value
                                                excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **

                                                //if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && thecurrentcell.InnerText != "NA" && thecurrentcell.InnerText.Trim().ToUpper() != "N.A" && thecurrentcell.InnerText.Trim().ToUpper() != "N.A.")
                                                if (!string.IsNullOrEmpty(thecurrentcell.InnerText))
                                                {
                                                    if (currentcolumnnoo == "A")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "B")
                                                    {
                                                        list.salutation = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "C")
                                                    {
                                                        list.emp_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "D")
                                                    {
                                                        list.father_husband_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "E")
                                                    {
                                                        list.date_of_birth = DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText));


                                                        //list.date_of_birth = DateTime.ParseExact(thecurrentcell.InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                                                    }
                                                    else if (currentcolumnnoo == "F")
                                                    {
                                                        list.nationality = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "G")
                                                    {
                                                        list.gender = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "H")
                                                    {
                                                        list.is_active = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "I")
                                                    {
                                                        list.blood_group = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "J")
                                                    {
                                                        list.marital_status = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "K")
                                                    {
                                                        list.adhar_no = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "L")
                                                    {
                                                        list.adhar_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "M")
                                                    {
                                                        list.employee_status = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "N")
                                                    {
                                                        list.date_of_joining = DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText));
                                                        //list.date_of_joining = DateTime.ParseExact(thecurrentcell.InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                    }
                                                    else if (currentcolumnnoo == "O")
                                                    {
                                                        list.probation_period = Convert.ToInt32(thecurrentcell.InnerText);
                                                    }
                                                    else if (currentcolumnnoo == "P")
                                                    {
                                                        try
                                                        {
                                                            list.confirmation_date = DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText));
                                                            //list.confirmation_date = DateTime.ParseExact(thecurrentcell.InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                        }
                                                        catch
                                                        {
                                                            list.confirmation_date = list.date_of_joining.AddYears(40);
                                                        }
                                                    }
                                                    else if (currentcolumnnoo == "Q")
                                                    {
                                                        try
                                                        {
                                                            list.resignation_date = DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText));
                                                            //list.resignation_date = DateTime.ParseExact(thecurrentcell.InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                        }
                                                        catch
                                                        {
                                                            list.resignation_date = list.date_of_joining.AddYears(40);
                                                        }
                                                    }
                                                    else if (currentcolumnnoo == "R")
                                                    {
                                                        list.notice_period = Convert.ToInt32(thecurrentcell.InnerText);
                                                    }
                                                    else if (currentcolumnnoo == "S")
                                                    {
                                                        try
                                                        {
                                                            list.last_working_date = DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText));
                                                            //list.last_working_date = DateTime.ParseExact(thecurrentcell.InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                        }
                                                        catch
                                                        {
                                                            list.last_working_date = list.date_of_joining.AddYears(40);
                                                        }
                                                    }
                                                    else if (currentcolumnnoo == "T")
                                                    {
                                                        list.card_number = Convert.ToInt32(thecurrentcell.InnerText);
                                                    }
                                                    else if (currentcolumnnoo == "U")
                                                    {
                                                        list.email_work = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "V")
                                                    {
                                                        list.company_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "W")
                                                    {
                                                        list.location_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "X")
                                                    {
                                                        list.department_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "Y")
                                                    {
                                                        list.designation_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "Z")
                                                    {
                                                        list.grade_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AA")
                                                    {
                                                        list.salary_group = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AB")
                                                    {
                                                        list.bank_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AC")
                                                    {
                                                        list.bank_IFSC_Code = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AD")
                                                    {
                                                        list.salary_account_no = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AE")
                                                    {
                                                        list.salary_bank_branch = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AF")
                                                    {
                                                        list.current_address1 = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AG")
                                                    {
                                                        list.current_address2 = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AH")
                                                    {
                                                        list.current_pincode = Convert.ToInt32(thecurrentcell.InnerText);
                                                    }
                                                    else if (currentcolumnnoo == "AI")
                                                    {
                                                        list.permenant_address1 = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AJ")
                                                    {
                                                        list.permenant_address2 = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AK")
                                                    {
                                                        list.permenant_pincode = Convert.ToInt32(thecurrentcell.InnerText);
                                                    }
                                                    else if (currentcolumnnoo == "AL")
                                                    {
                                                        list.permenant_city_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AM")
                                                    {
                                                        list.permenant_state_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AN")
                                                    {
                                                        list.payment_mode = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AO")
                                                    {
                                                        list.PAN_No = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AP")
                                                    {
                                                        list.UAN_number = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AQ")
                                                    {
                                                        list.PF_applicable = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AR")
                                                    {
                                                        list.PF_number = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AS")
                                                    {
                                                        list.PF_ceiling = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AT")
                                                    {
                                                        list.PF_group = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AU")
                                                    {
                                                        list.ESIC_applicable = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AV")
                                                    {
                                                        list.ESIC_number = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AW")
                                                    {
                                                        list.ESIC_group = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AX")
                                                    {
                                                        list.PT_applicable = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AY")
                                                    {
                                                        list.PT_group = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "AZ")
                                                    {
                                                        list.VPF_percentage = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "BA")
                                                    {
                                                        list.SPT_description = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "BB")
                                                    {
                                                        list.is_branch_ESIC_applicable = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "BC")
                                                    {
                                                        list.state_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (currentcolumnnoo == "BD")
                                                    {
                                                        list.city_name = thecurrentcell.InnerText;
                                                    }
                                                }

    #endregion ** END value in list**

                                            }

                                        }
                                        excelResult.AppendLine();
                                        list.created_by = objdetaills.created_by;
                                        list.company_id = objdetaills.default_company_id;

                                        FullUploadList.Add(list);
                                    }
                                }
                                excelResult.Append("");
                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = FullUploadList;




                        var dataaa = CheckEmpdaAllDatafromexcel(FullUploadList);
                        var duplicate_dtl = dataaa.duplicateFullUpladdtl;
                        var missing_dtll = dataaa.missinFullUpladtlc;
                        var adddblistt = dataaa.addbempFullUpladdtl;
                        var missingDtlMessage = dataaa.MissingDtlMessage;
                        objresponse = dataaa.objresponse;

                        int returnnvalue = 0;
                        if (adddblistt.Count() > 0)
                            returnnvalue = _clEmployeeDetail.SaveEmpAllDetailFromExcel(adddblistt);

                        if (returnnvalue == -1)
                        {
                            objresponse.StatusCode = 0;
                            objresponse.Message = "Employee Codee Already Exist...!";

                            return Ok(objresponse);

                        }
                        else if (returnnvalue == -2)
                        {
                            // string url = Convert.ToString(_config["License_domain_url"]) + objdetaills.default_company_id + "/" + Convert.ToString(_config["Instance_ID"]);// sample url

                            int total_no_of_employee = 1000;

                            //using (HttpClient client = new HttpClient())
                            //{
                            //    total_no_of_employee = Convert.ToInt32(client.GetStringAsync(url).Result);
                            //}

                            objresponse.StatusCode = 1;
                            objresponse.Message = "Employee limit exceed !!! Employee Range of Selected Company is:" + total_no_of_employee + "";
                            return Ok(objresponse);
                        }
                        else
                        {
                            objresponse.Message = adddblistt.Count().ToString() + " Records Saved Successfully..";
                            return Ok(dataaa);
                        }
                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Something went wrong";
                        return Ok(objresponse);
                    }
                }

                return Ok();
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Data is not valid in excel sheet please correct the data and then upload again...!";
                return Ok(objresponse);
                // return Ok(ex.Message);
            }
        }

        public static DataTable ExcelPackageToDataTable(ExcelPackage excelPackage)
        {
            DataTable dt = new DataTable();
            ExcelWorksheet worksheet = excelPackage.Workbook.Worksheets[0];

            //check if the worksheet is completely empty
            if (worksheet.Dimension == null)
            {
                return dt;
            }

            //create a list to hold the column names
            List<string> columnNames = new List<string>();

            //needed to keep track of empty column headers
            int currentColumn = 1;

            //loop all columns in the sheet and add them to the datatable
            foreach (var cell in worksheet.Cells[1, 1, 1, worksheet.Dimension.End.Column])
            {
                string columnName = cell.Text.Trim();

                //check if the previous header was empty and add it if it was
                if (cell.Start.Column != currentColumn)
                {
                    columnNames.Add("Header_" + currentColumn);
                    dt.Columns.Add("Header_" + currentColumn);
                    currentColumn++;
                }

                //add the column name to the list to count the duplicates
                columnNames.Add(columnName);

                //count the duplicate column names and make them unique to avoid the exception
                //A column named 'Name' already belongs to this DataTable
                int occurrences = columnNames.Count(x => x.Equals(columnName));
                if (occurrences > 1)
                {
                    columnName = columnName + "_" + occurrences;
                }

                //add the column to the datatable
                dt.Columns.Add(columnName);

                currentColumn++;
            }

            //start adding the contents of the excel file to the datatable
            for (int i = 2; i <= worksheet.Dimension.End.Row; i++)
            {
                var row = worksheet.Cells[i, 1, i, worksheet.Dimension.End.Column];
                DataRow newRow = dt.NewRow();
                foreach (var cell in row)
                {
                    newRow[cell.Start.Column - 1] = cell.Text;
                }
                dt.Rows.Add(newRow);
            }
            return dt;
        }
        [Route("BulkUploadEmployeeData")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Upload))]
        public async Task<IActionResult> BulkUploadEmployeeData()
        {
            Response_Msg objresponse = new Response_Msg();

            try
            {
                var files = HttpContext.Request.Form.Files;
                var a = HttpContext.Request.Form["AllData"];
                if (a.ToString() == null)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Invalid data !!";
                    return Ok(objresponse);
                }
                CommonClass com = new CommonClass();


                BulkUploadData objdetaills = new BulkUploadData();
                objdetaills = com.ToObjectFromJSON<BulkUploadData>(a.ToString());

                //open the excel using openxml sdk  
                StringBuilder excelResult = new StringBuilder();

               
                List<EmployeeQualificationSection> EmpDataList = new List<EmployeeQualificationSection>();
                List<EmployeeFamilySection> EmpFamilyDataList = new List<EmployeeFamilySection>();
                List<EmployeeShiftAlloc> EmpShiftDataList = new List<EmployeeShiftAlloc>();
                List<EmployeeOfficaialSection> EmpWeekOffDataList = new List<EmployeeOfficaialSection>();
                List<EmployeeGradeAlloc> EmpGradeDataList = new List<EmployeeGradeAlloc>();
                List<EmployeeDesignationAlloc> EmpDesignationDataList = new List<EmployeeDesignationAlloc>();
                List<EmployeeManagerAlloc> EmpManagerDataList = new List<EmployeeManagerAlloc>();
                List<EmployeePersonalSection> personallist = new List<EmployeePersonalSection>();
                List<EployeeAccountDetailsForUpload> AccountList = new List<EployeeAccountDetailsForUpload>();
                List<EployeeUanEsicDetailsForUpload> PfEsicList = new List<EployeeUanEsicDetailsForUpload>();
                List<EployeeManualAttendanceDetails> AttendanceList = new List<EployeeManualAttendanceDetails>();
                List<EmployeeAllDataUpload> FullUploadList = new List<EmployeeAllDataUpload>();
 
                string get_file_path = "";
                string company_name = "";
                string[] company_names = null;
                foreach (var FileData in files)
                {
                    if (FileData != null && FileData.Length > 0)
                    {
                        var allowedExtensions = new[] { ".xlsx" };

                        var ext = Path.GetExtension(FileData.FileName); //getting the extension
                        if (allowedExtensions.Contains(ext.ToLower()))//check what type of extension  
                        {
                            string name = Path.GetFileNameWithoutExtension(FileData.FileName); //getting file name without extension  

                            company_names = _context.tbl_company_master.OrderByDescending(x => x.company_id).Where(y => objdetaills.default_company_id > 0 ? y.company_id == objdetaills.default_company_id : true && y.is_active == 1).Select(p => p.company_name).ToArray();

                            company_name = objdetaills.default_company_id > 0 ? company_names[0] : "Group Company";

                            string MyFileName = "";
                            var webRoot = _hostingEnvironment.WebRootPath;
                            string currentmonth = Convert.ToString(DateTime.Now.Month).Length.ToString() == "1" ? "0" + Convert.ToString(DateTime.Now.Month) : Convert.ToString(DateTime.Now.Month);
                            var currentyearmonth = Convert.ToString(DateTime.Now.Year) + currentmonth;
                            var path = "";

    #region comment extra sections
                            if (objdetaills.UploadSection == "QualificationSection")
                            {
                                MyFileName = "EmpQualificationSection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/QualificationSection/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/QualificationSection/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/QualificationSection/" + currentyearmonth + "/");
                            }
                            else if (objdetaills.UploadSection == "FamilySection")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/FamilySection/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/FamilySection/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/FamilySection/" + currentyearmonth + "/");
                            }
                            else if (objdetaills.UploadSection == "ShiftAllocation")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/ShiftAllocation/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/ShiftAllocation/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/ShiftAllocation/" + currentyearmonth + "/");
                            }
                            else if (objdetaills.UploadSection == "WeekOffAllocation")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/WeekOffAllocation/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/WeekOffAllocation/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/WeekOffAllocation/" + currentyearmonth + "/");
                            }
                            else if (objdetaills.UploadSection == "GradeAllocation")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/GradeAllocation/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/GradeAllocation/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/GradeAllocation/" + currentyearmonth + "/");
                            }
                            else if (objdetaills.UploadSection == "DesignationAllocation")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/DesignationAllocation/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/DesignationAllocation/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/DesignationAllocation/" + currentyearmonth + "/");
                            }
                            else if (objdetaills.UploadSection == "ManagerAllocation")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/ManagerAllocation/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/ManagerAllocation/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/ManagerAllocation/" + currentyearmonth + "/");
                            }
                            else if (objdetaills.UploadSection == "PersonalSection")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/PersonalSection/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/PersonalSection/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/PersonalSection/" + currentyearmonth + "/");
                            }
                            else if (objdetaills.UploadSection == "AccountSection")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/AccountDetail/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/AccountDetail/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/AccountDetail/" + currentyearmonth + "/");
                            }
                            else if (objdetaills.UploadSection == "UANSection")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/UANDetail/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/UANDetail/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/UANDetail/" + currentyearmonth + "/");
                            }
                            else if (objdetaills.UploadSection == "EmployeePunch")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/EmployeePunch/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/EmployeePunch/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/EmployeePunch/" + currentyearmonth + "/");
                            }
                            else if (objdetaills.UploadSection == "EmployeeAttendanceStatus")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/EmployeeAttendanceStatus/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/EmployeeAttendanceStatus/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/EmployeeAttendanceStatus/" + currentyearmonth + "/");
                            }
                            else if (objdetaills.UploadSection == "DeleteManualPunch")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/DeleteManualPunch/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/DeleteManualPunch/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/DeleteManualPunch/" + currentyearmonth + "/");
                            }
    #endregion
                            else if (objdetaills.UploadSection == "FullUpload")
                            {
                                MyFileName = "EmpFamilySection_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +
                                if (!Directory.Exists(webRoot + "/EmployeeDetail/" + company_name + "/FullUpload/" + currentyearmonth + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDetail/" + company_name + "/FullUpload/" + currentyearmonth + "/");
                                }
                                path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDetail/" + company_name + "/FullUpload/" + currentyearmonth + "/");
                            }



                            //save file
                            using (var fileStream = new FileStream(Path.Combine(path, MyFileName), FileMode.Create))
                            {
                                FileData.CopyTo(fileStream);
                                get_file_path = fileStream.Name;
                            }

                        }
                        else
                        {
                            objresponse.StatusCode = 1;
                            objresponse.Message = "Please Select Only Excel File";
                            return Ok(objresponse);
                        }
                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Please Select File For Upload";
                        return Ok(objresponse);
                    }

                }


    #region comments extra section
                if (objdetaills.UploadSection == "QualificationSection")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EmployeeQualificationSection list = new EmployeeQualificationSection();
                                        string currentcolumnno = string.Empty;

                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnno != "A")
                                            {
                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **

                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                                                                {
                                                                    list.board_or_university = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                                                                {
                                                                    list.institute_or_school = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "F")
                                                                {
                                                                    list.stream = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "G")
                                                                {
                                                                    list.education_type = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "H")
                                                                {
                                                                    list.education_level = item.Text.Text;
                                                                }
                                                                //else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "I")
                                                                //{
                                                                //    list.marks_division_cgpa = item.Text.Text;
                                                                //}
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "J")
                                                                {
                                                                    list.remark = item.Text.Text;
                                                                }
    #endregion ** END value in list**


                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }

                                                }
                                                else
                                                {
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **



                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "E")
                                                    {
                                                        list.passing_year = thecurrentcell.InnerText;
                                                    }

                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "I")
                                                    {
                                                        // Gets a NumberFormatInfo associated with the en-US culture.  
                                                        NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
                                                        // Displays a value with the default number of decimal digits (2).  
                                                        //Double myInt = 0.1234;
                                                        // Console.WriteLine("Percent Format : " + Convert.ToDouble(thecurrentcell.InnerText).ToString("P", nfi));

                                                        list.marks_division_cgpa = Convert.ToDouble(thecurrentcell.InnerText).ToString("P", nfi);
                                                    }

    #endregion
                                                }
                                            }

                                        }
                                        excelResult.AppendLine();
                                        list.created_by = objdetaills.created_by;
                                        list.company_id = objdetaills.default_company_id;
                                        EmpDataList.Add(list);
                                    }

                                }
                                excelResult.Append("");
                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = EmpDataList;

                        var dataaa = CheckQualificationDetailFromExcel(EmpDataList);
                        var duplicate_dtl = dataaa.duplicateQualification;
                        var missing_dtll = dataaa.missingQualification;
                        var adddblistt = dataaa.addbempQualificationl;
                        var missingDtlMessage = dataaa.MissingDtlMessage;
                        objresponse = dataaa.objresponse;

                        int result = _clEmployeeDetail.SaveQualificationDetailExcel(adddblistt);

                        if (result == 0)
                        {
                            objresponse.StatusCode = 0;
                            objresponse.Message = "Employee Qualification details of " + adddblistt.Count() + " employee successfully saved..";
                            return Ok(dataaa);
                        }
                        else
                        {
                            objresponse.StatusCode = 1;
                            objresponse.Message = "Something went wrong, please try after sometime...";
                            return Ok(objresponse);
                        }

                    }
                }
                else if (objdetaills.UploadSection == "FamilySection")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EmployeeFamilySection list = new EmployeeFamilySection();
                                        string currentcolumnno = string.Empty;

                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnno != "A")
                                            {
                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **

                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                                                                {
                                                                    list.relation = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                                                                {
                                                                    list.occupation = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "E")
                                                                {
                                                                    list.name_as_per_aadhar_card = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "F")
                                                                {
                                                                    list.date_of_birth = Convert.ToDateTime(item.Text.Text);
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "G")
                                                                {
                                                                    list.gender = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "H")
                                                                {
                                                                    list.dependent = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "I")
                                                                {
                                                                    list.is_nominee = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "J")
                                                                {
                                                                    list.nominee_percentage = Convert.ToDouble(item.Text.Text);
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "K")
                                                                {
                                                                    list.remark = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "L")
                                                                {
                                                                    list.aadhar_card_no = item.Text.Text;

                                                                }
    #endregion ** END value in list**


                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **


                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                                                    {
                                                        list.relation = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "D")
                                                    {
                                                        list.occupation = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "E")
                                                    {
                                                        list.name_as_per_aadhar_card = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "F")
                                                    {
                                                        list.date_of_birth = DateTime.FromOADate(Double.Parse(thecurrentcell.InnerText)); //Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "G")
                                                    {
                                                        list.gender = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "H")
                                                    {
                                                        list.dependent = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "I")
                                                    {
                                                        list.is_nominee = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "J")
                                                    {
                                                        list.nominee_percentage = Convert.ToDouble(thecurrentcell.InnerText);
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "K")
                                                    {
                                                        list.remark = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "L")
                                                    {
                                                        list.aadhar_card_no = thecurrentcell.InnerText;

                                                    }
    #endregion
                                                }
                                            }
                                        }

                                        excelResult.AppendLine();
                                        list.created_by = objdetaills.created_by;
                                        list.company_id = objdetaills.default_company_id;
                                        EmpFamilyDataList.Add(list);
                                    }

                                }
                                excelResult.Append("");

                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = EmpFamilyDataList;

                        var dataaa = CheckFamilySectionDetailFromExcel(EmpFamilyDataList);

                        var duplicate_dtl = dataaa.duplicateFamily;
                        var missing_dtll = dataaa.missingFamily;
                        var adddblistt = dataaa.addbempFamily;
                        var missingDtlMessage = dataaa.MissingDtlMessage;


                        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                        {
                            return Ok(dataaa);
                        }
                        else
                        {
                            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                            int result = _clEmployeeDetail.SaveFamilyDetailExcel(adddblistt);

                            if (result == 0)
                            {
                                objresponse.StatusCode = 0;
                                objresponse.Message = "Employee Family details successfully saved..";
                                return Ok(objresponse);
                            }
                            else
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Something went wrong, please try after sometime...";
                                return Ok(objresponse);
                            }
                        }

                    }

                }
                else if (objdetaills.UploadSection == "ShiftAllocation")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EmployeeShiftAlloc list = new EmployeeShiftAlloc();
                                        string currentcolumnno = string.Empty;

                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnno != "A")
                                            {
                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **

                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                                                                {
                                                                    list.shift_id = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                                                                {
                                                                    list.applicable_from_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                                                                }

    #endregion ** END value in list**


                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **

                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                                                    {
                                                        list.shift_id = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "D")
                                                    {
                                                        list.applicable_from_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                                                    }



    #endregion
                                                }
                                            }
                                        }

                                        excelResult.AppendLine();
                                        EmpShiftDataList.Add(list);
                                    }

                                }
                                excelResult.Append("");

                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = EmpFamilyDataList;

                        var dataaa = CheckShiftAllocFromExcel(EmpShiftDataList);

                        var duplicate_dtl = dataaa.duplicateShiftAlloc;
                        var missing_dtll = dataaa.missingShiftAlloc;
                        var adddblistt = dataaa.addbempShiftAlloc;
                        var missingDtlMessage = dataaa.MissingDtlMessage;


                        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                        {
                            return Ok(dataaa);
                        }
                        else
                        {
                            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                            int result = _clEmployeeDetail.SaveShiftAllocDetailExcel(adddblistt);

                            if (result == 0)
                            {
                                objresponse.StatusCode = 0;
                                objresponse.Message = "Employee Shift Allocation successfully saved..";
                                return Ok(objresponse);
                            }
                            else
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Something went wrong, please try after sometime...";
                                return Ok(objresponse);
                            }
                        }

                    }
                }
                else if (objdetaills.UploadSection == "WeekOffAllocation")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EmployeeOfficaialSection list = new EmployeeOfficaialSection();
                                        string currentcolumnno = string.Empty;

                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnno != "A")
                                            {
                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **

                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                                                                {
                                                                    list.weekly_off = item.Text.Text;
                                                                }

    #endregion ** END value in list**


                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **

                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                                                    {
                                                        list.weekly_off = thecurrentcell.InnerText;
                                                    }



    #endregion
                                                }
                                            }
                                        }

                                        excelResult.AppendLine();
                                        EmpWeekOffDataList.Add(list);
                                    }

                                }
                                excelResult.Append("");

                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = EmpFamilyDataList;

                        var dataaa = CheckWeekOffAllocFromExcel(EmpWeekOffDataList);

                        var duplicate_dtl = dataaa.duplicatedetaillist;
                        var missing_dtll = dataaa.missingdetaillist;
                        var adddblistt = dataaa.adddblist;
                        var missingDtlMessage = dataaa.MissingDtlMessage;


                        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                        {
                            return Ok(dataaa);
                        }
                        else
                        {
                            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                            int result = _clEmployeeDetail.SaveWeekOffAllocDetailExcel(adddblistt);

                            if (result == 0)
                            {
                                objresponse.StatusCode = 0;
                                objresponse.Message = "Employee Week Off Allocation successfully saved..";
                                return Ok(objresponse);
                            }
                            else
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Something went wrong, please try after sometime...";
                                return Ok(objresponse);
                            }
                        }

                    }
                }
                else if (objdetaills.UploadSection == "GradeAllocation")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EmployeeGradeAlloc list = new EmployeeGradeAlloc();
                                        string currentcolumnno = string.Empty;

                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnno != "A")
                                            {
                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **

                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                                                                {
                                                                    list.grade_id = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                                                                {
                                                                    list.applicable_from_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "E")
                                                                {
                                                                    list.applicable_to_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                                                                }
    #endregion ** END value in list**


                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **

                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                                                    {
                                                        list.grade_id = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "D")
                                                    {
                                                        list.applicable_from_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "E")
                                                    {
                                                        list.applicable_to_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                                                    }



    #endregion
                                                }
                                            }
                                        }

                                        excelResult.AppendLine();
                                        EmpGradeDataList.Add(list);
                                    }

                                }
                                excelResult.Append("");

                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = EmpFamilyDataList;

                        var dataaa = CheckGradeAllocFromExcel(EmpGradeDataList);

                        var duplicate_dtl = dataaa.duplicateGradeAlloc;
                        var missing_dtll = dataaa.missingGradeAlloc;
                        var adddblistt = dataaa.addbempGradeAlloc;
                        var missingDtlMessage = dataaa.MissingDtlMessage;


                        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                        {
                            return Ok(dataaa);
                        }
                        else
                        {
                            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                            int result = _clEmployeeDetail.SaveGradeAllocDetailExcel(adddblistt);

                            if (result == 0)
                            {
                                objresponse.StatusCode = 0;
                                objresponse.Message = "Employee Grade Allocation successfully saved..";
                                return Ok(objresponse);
                            }
                            else
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Something went wrong, please try after sometime...";
                                return Ok(objresponse);
                            }
                        }

                    }
                }
                else if (objdetaills.UploadSection == "DesignationAllocation")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EmployeeDesignationAlloc list = new EmployeeDesignationAlloc();
                                        string currentcolumnno = string.Empty;

                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnno != "A")
                                            {
                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **

                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                                                                {
                                                                    list.designation_id = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                                                                {
                                                                    list.applicable_from_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "E")
                                                                {
                                                                    list.applicable_to_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                                                                }
    #endregion ** END value in list**


                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **

                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                                                    {
                                                        list.designation_id = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "D")
                                                    {
                                                        list.applicable_from_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "E")
                                                    {
                                                        list.applicable_to_date = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                                                    }



    #endregion
                                                }
                                            }
                                        }

                                        excelResult.AppendLine();
                                        EmpDesignationDataList.Add(list);
                                    }

                                }
                                excelResult.Append("");

                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = EmpFamilyDataList;

                        var dataaa = CheckDesignationAllocFromExcel(EmpDesignationDataList);

                        var duplicate_dtl = dataaa.duplicateDesignationAlloc;
                        var missing_dtll = dataaa.missingDesignationAlloc;
                        var adddblistt = dataaa.addbempDesignationAlloc;
                        var missingDtlMessage = dataaa.MissingDtlMessage;


                        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                        {
                            return Ok(dataaa);
                        }
                        else
                        {
                            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                            int result = _clEmployeeDetail.SaveDesignationAllocDetailExcel(adddblistt);

                            if (result == 0)
                            {
                                objresponse.StatusCode = 0;
                                objresponse.Message = "Employee Designation Allocation successfully saved..";
                                return Ok(objresponse);
                            }
                            else
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Something went wrong, please try after sometime...";
                                return Ok(objresponse);
                            }
                        }

                    }
                }
                else if (objdetaills.UploadSection == "ManagerAllocation")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;
                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();

                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EmployeeManagerAlloc list = new EmployeeManagerAlloc();
                                        string currentcolumnno = string.Empty;

                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnno = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnno != "A")
                                            {
                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **

                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "C")
                                                                {
                                                                    list.m_one_id = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "D")
                                                                {
                                                                    list.m_one_final_approval = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "E")
                                                                {
                                                                    list.m_two_id = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "F")
                                                                {
                                                                    list.m_two_final_approval = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "G")
                                                                {
                                                                    list.m_three_id = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnno == "H")
                                                                {
                                                                    list.m_three_final_approval = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "I")
                                                                {
                                                                    list.applicable_from_date = DateTime.ParseExact(item.Text.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                                }
                                                                else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "J")
                                                                {
                                                                    list.applicable_to_date = DateTime.ParseExact(item.Text.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                                }
    #endregion ** END value in list**


                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **

                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }


                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "C")
                                                    {
                                                        list.m_one_id = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "D")
                                                    {
                                                        list.m_one_final_approval = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "E")
                                                    {
                                                        list.m_two_id = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "F")
                                                    {
                                                        list.m_two_final_approval = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "G")
                                                    {
                                                        list.m_three_id = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "H")
                                                    {
                                                        list.m_three_final_approval = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "I")
                                                    {
                                                        list.applicable_from_date = DateTime.ParseExact(thecurrentcell.InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnno == "J")
                                                    {
                                                        list.applicable_to_date = DateTime.ParseExact(thecurrentcell.InnerText, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                                    }


    #endregion
                                                }
                                            }
                                        }

                                        list.company_id = objdetaills.default_company_id;

                                        excelResult.AppendLine();
                                        EmpManagerDataList.Add(list);
                                    }

                                }
                                excelResult.Append("");

                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = EmpManagerDataList;

                        var dataaa = CheckManagerAllocFromExcel(EmpManagerDataList);

                        var duplicate_dtl = dataaa.duplicateManagerAlloc;
                        var missing_dtll = dataaa.missingManagerAlloc;
                        var adddblistt = dataaa.addbempManagerAlloc;
                        var missingDtlMessage = dataaa.MissingDtlMessage;


                        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                        {
                            return Ok(dataaa);
                        }
                        else
                        {
                            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                            int result = _clEmployeeDetail.SaveManagerAllocDetailExcel(adddblistt);

                            if (result == 0)
                            {
                                objresponse.StatusCode = 0;
                                objresponse.Message = "Employee Manager Allocation successfully saved..";
                                return Ok(objresponse);
                            }
                            else
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Something went wrong, please try after sometime...";
                                return Ok(objresponse);
                            }
                        }

                    }
                }
                else if (objdetaills.UploadSection == "PersonalSection")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();
                            //StringBuilder excelResult = new StringBuilder();


                            //array list to store employee code

                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();



                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EmployeePersonalSection list = new EmployeePersonalSection();
                                        string currentcolumnnoo = string.Empty;
                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnnoo != "A")
                                            {

                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **
                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
                                                                {
                                                                    list.blood_group_name = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "D")
                                                                {
                                                                    list.primary_contact_number = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "E")
                                                                {
                                                                    list.primary_email_id = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "F")
                                                                {
                                                                    list.permanent_address_line_one = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "G")
                                                                {
                                                                    list.country = item.Text.Text;
                                                                }

                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "H")
                                                                {
                                                                    list.state = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "I")
                                                                {
                                                                    list.city = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "J")
                                                                {
                                                                    list.permanent_pin_code = Convert.ToInt32(item.Text.Text);
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "K")
                                                                {
                                                                    list.emergency_contact_name = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "L")
                                                                {
                                                                    list.emergency_contact_relation = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "M")
                                                                {
                                                                    list.emergency_contact_mobile_number = item.Text.Text;
                                                                }

    #endregion ** END value in list**
                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //read columns value
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **


                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
                                                    {
                                                        list.blood_group_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "D")
                                                    {
                                                        list.primary_contact_number = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "E")
                                                    {
                                                        list.primary_email_id = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "F")
                                                    {
                                                        list.permanent_address_line_one = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "G")
                                                    {
                                                        list.country = thecurrentcell.InnerText;
                                                    }

                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "H")
                                                    {
                                                        list.state = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "I")
                                                    {
                                                        list.city = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "J")
                                                    {
                                                        list.permanent_pin_code = Convert.ToInt32(thecurrentcell.InnerText);
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "K")
                                                    {
                                                        list.emergency_contact_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "L")
                                                    {
                                                        list.emergency_contact_relation = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "M")
                                                    {
                                                        list.emergency_contact_mobile_number = thecurrentcell.InnerText;
                                                    }
    #endregion ** END value in list**

                                                }


                                            }



                                        }
                                        excelResult.AppendLine();
                                        list.created_by = objdetaills.created_by;
                                        list.default_company_id = objdetaills.default_company_id;
                                        personallist.Add(list);
                                    }

                                }
                                excelResult.Append("");
                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = personallist;

                        var dataaa = CheckEmpPersonalDetailsfromexcel(personallist);
                        var duplicate_dtl = dataaa.duplicatepersonaldtl;
                        var missing_dtll = dataaa.missingpersonaldtl;
                        var adddblistt = dataaa.adddbpersonaldtl;
                        var missingDtlMessage = dataaa.MissingDtlMessage;

                        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                        {
                            return Ok(dataaa);
                        }
                        else
                        {
                            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                            int returnnvalue = _clEmployeeDetail.SaveEmpPersonalDetailFromExcel(adddblistt);

                            if (returnnvalue < 0)
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Something went wrong in Excel Detail";
                                return Ok(objresponse);

                            }
                            else if (returnnvalue == 1)
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Server is Busy Please try after some time..";
                                return Ok(objresponse);
                            }
                            else
                            {
                                objresponse.StatusCode = 0;
                                objresponse.Message = "Personal Details Successfully Save..!";
                                return Ok(objresponse);
                            }
                        }
                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Something went wrong";
                        return Ok(objresponse);
                    }
                }
                else if (objdetaills.UploadSection == "AccountSection")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            //array list to store employee code
                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();


                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EployeeAccountDetailsForUpload list = new EployeeAccountDetailsForUpload();

                                        string currentcolumnnoo = string.Empty;
                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnnoo != "A")
                                            {

                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **
                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
                                                                {
                                                                    list.pan_card_name = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "D")
                                                                {
                                                                    list.pan_card_number = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "E")
                                                                {
                                                                    list.aadha_card_name = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "F")
                                                                {
                                                                    list.aadha_card_number = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "G")
                                                                {
                                                                    list.bank_id = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "H")
                                                                {
                                                                    list.bank_acc = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "I")
                                                                {
                                                                    list.ifsc_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "J")
                                                                {
                                                                    list.branch_name = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "K")
                                                                {
                                                                    // enmPaymentMode PayMode = (enmPaymentMode)Enum.Parse(typeof(enmPaymentMode), item.Text.Text, true);
                                                                    list.payment_mode = item.Text.Text; ;
                                                                }
    #endregion ** END value in list**
                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //read columns value
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **


                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
                                                    {
                                                        list.pan_card_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "D")
                                                    {
                                                        list.pan_card_number = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "E")
                                                    {
                                                        list.aadha_card_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "F")
                                                    {
                                                        list.aadha_card_number = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "G")
                                                    {
                                                        list.bank_id = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "H")
                                                    {
                                                        list.bank_acc = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "I")
                                                    {
                                                        list.ifsc_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "J")
                                                    {
                                                        list.branch_name = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "K")
                                                    {
                                                        // enmPaymentMode PayMode = (enmPaymentMode)Enum.Parse(typeof(enmPaymentMode), item.Text.Text, true);
                                                        list.payment_mode = thecurrentcell.InnerText;
                                                    }
    #endregion ** END value in list**

                                                }
                                            }
                                        }
                                        excelResult.AppendLine();
                                        list.created_by = objdetaills.created_by;

                                        AccountList.Add(list);
                                    }
                                }
                                excelResult.Append("");
                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = AccountList;

                        var dataaa = CheckEmpAccountDetailsfromexcel(AccountList);
                        var duplicate_dtl = dataaa.duplicateAccountdtl;
                        var missing_dtll = dataaa.missingAccountdtlc;
                        var adddblistt = dataaa.addbempAccountdtl;
                        var missingDtlMessage = dataaa.MissingDtlMessage;

                        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                        {
                            return Ok(dataaa);
                        }
                        else
                        {
                            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                            int returnnvalue = _clEmployeeDetail.SaveEmpAccountDetailFromExcel(adddblistt);


                            if (returnnvalue < 0)
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Something went wrong in Excel Detail";
                                return Ok(objresponse);

                            }
                            else if (returnnvalue == 1)
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Server is Busy Please try after some time..";
                                return Ok(objresponse);
                            }
                            else
                            {
                                objresponse.StatusCode = 0;
                                objresponse.Message = "Successfully saved";
                                return Ok(objresponse);
                            }



                        }

                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Something went wrong";
                        return Ok(objresponse);
                    }
                }
                else if (objdetaills.UploadSection == "UANSection")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            //array list to store employee code
                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();


                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EployeeUanEsicDetailsForUpload list = new EployeeUanEsicDetailsForUpload();

                                        string currentcolumnnoo = string.Empty;
                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnnoo != "A")
                                            {

                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **
                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
                                                                {
                                                                    list.uan_number = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "D")
                                                                {
                                                                    list.pf_number = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "E")
                                                                {
                                                                    list.pf_group = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "F")
                                                                {
                                                                    list.pf_celing = Convert.ToDouble(item.Text.Text);
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "G")
                                                                {
                                                                    list.vpf_Group = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "H")
                                                                {
                                                                    list.vpf_amount = Convert.ToDouble(item.Text.Text);
                                                                }

                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "I")
                                                                {
                                                                    list.bank_id = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "J")
                                                                {
                                                                    list.bank_acc = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "K")
                                                                {
                                                                    list.ifsc_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "L")
                                                                {
                                                                    list.esic_number = item.Text.Text;
                                                                }

    #endregion ** END value in list**
                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //read columns value
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **

                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
                                                    {
                                                        list.uan_number = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "D")
                                                    {
                                                        list.pf_number = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "E")
                                                    {
                                                        list.pf_group = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "F")
                                                    {
                                                        list.pf_celing = Convert.ToDouble(thecurrentcell.InnerText);
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "G")
                                                    {
                                                        list.vpf_Group = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "H")
                                                    {
                                                        list.vpf_amount = Convert.ToDouble(thecurrentcell.InnerText);
                                                    }

                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "I")
                                                    {
                                                        list.bank_id = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "J")
                                                    {
                                                        list.bank_acc = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "K")
                                                    {
                                                        list.ifsc_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "L")
                                                    {
                                                        list.esic_number = thecurrentcell.InnerText;
                                                    }
    #endregion ** END value in list**

                                                }
                                            }
                                        }
                                        excelResult.AppendLine();
                                        list.created_by = objdetaills.created_by;

                                        PfEsicList.Add(list);
                                    }
                                }
                                excelResult.Append("");
                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = PfEsicList;

                        var dataaa = CheckEmpUanEsicDetailsfromexcel(PfEsicList);
                        var duplicate_dtl = dataaa.duplicateUanEsicdtl;
                        var missing_dtll = dataaa.missingUanEsictlc;
                        var adddblistt = dataaa.addbempUanEsicdtl;
                        var missingDtlMessage = dataaa.MissingDtlMessage;

                        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                        {
                            return Ok(dataaa);
                        }
                        else
                        {
                            _clEmployeeDetail._company_id = objdetaills.default_company_id;
                            int returnnvalue = _clEmployeeDetail.SaveEmpUanEsicDetailFromExcel(adddblistt);


                            if (returnnvalue < 0)
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Something went wrong in Excel Detail";
                                return Ok(objresponse);

                            }
                            else if (returnnvalue == 1)
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Server is Busy Please try after some time..";
                                return Ok(objresponse);
                            }
                            else
                            {
                                objresponse.StatusCode = 0;
                                objresponse.Message = "Employee UAN & ESIC Details Successfully saved";
                                return Ok(objresponse);
                            }



                        }

                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Something went wrong";
                        return Ok(objresponse);
                    }
                }
                else if (objdetaills.UploadSection == "EmployeePunch")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            //array list to store employee code
                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();


                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EployeeManualAttendanceDetails list = new EployeeManualAttendanceDetails();

                                        string currentcolumnnoo = string.Empty;
                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnnoo != "A")
                                            {

                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **
                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
                                                                {
                                                                    list.attendance_dt = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);

                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "D")
                                                                {
                                                                    list.start_in = Convert.ToDateTime("2000-01-01 " + DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[106]);
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "E")
                                                                {
                                                                    list.start_out = Convert.ToDateTime("2000-01-01 " + DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[106]);


                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "F")
                                                                {
                                                                    list.day_status = item.Text.Text;
                                                                }

    #endregion ** END value in list**
                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //read columns value
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **

                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
                                                    {
                                                        list.attendance_dt = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);

                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "D")
                                                    {
                                                        list.start_in = Convert.ToDateTime("2000-01-01 " + DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[106]);


                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "E")
                                                    {
                                                        list.start_out = Convert.ToDateTime("2000-01-01 " + DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[106]);


                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "F")
                                                    {
                                                        list.day_status = thecurrentcell.InnerText;
                                                    }
    #endregion ** END value in list**

                                                }
                                            }
                                        }
                                        excelResult.AppendLine();


                                        AttendanceList.Add(list);
                                    }
                                }
                                excelResult.Append("");
                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = AttendanceList;




                        var dataaa = CheckEmpManualAttendanceDetailsfromexcel(AttendanceList);
                        var duplicate_dtl = dataaa.duplicateAttendancedtl;
                        var missing_dtll = dataaa.missinAttendancetlc;
                        var adddblistt = dataaa.addbempAttendancedtl;
                        var missingDtlMessage = dataaa.MissingDtlMessage;

                        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                        {
                            return Ok(dataaa);
                        }
                        else
                        {
                            clsManualAttendance obj_cls_emp = new clsManualAttendance(adddblistt, _context);
                            obj_cls_emp.SaveData();


                            objresponse.StatusCode = 0;
                            objresponse.Message = "Employee Attendance Successfully saved";
                            return Ok(objresponse);


                        }

                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Something went wrong";
                        return Ok(objresponse);
                    }
                }
                else if (objdetaills.UploadSection == "EmployeeAttendanceStatus")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            //array list to store employee code
                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();


                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EployeeManualAttendanceDetails list = new EployeeManualAttendanceDetails();

                                        string currentcolumnnoo = string.Empty;
                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnnoo != "A")
                                            {

                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **
                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
                                                                {
                                                                    try
                                                                    {
                                                                        list.attendance_dt = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);
                                                                    }
                                                                    catch (Exception)
                                                                    {
                                                                        list.attendance_dt = DateTime.MinValue;
                                                                    }


                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "D")
                                                                {
                                                                    list.day_status = item.Text.Text;
                                                                }

    #endregion ** END value in list**
                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //read columns value
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **

                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
                                                    {
                                                        try
                                                        {
                                                            list.attendance_dt = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                                                        }
                                                        catch (Exception)
                                                        {
                                                            list.attendance_dt = DateTime.MinValue;
                                                        }

                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "D")
                                                    {
                                                        list.day_status = thecurrentcell.InnerText;
                                                    }
    #endregion ** END value in list**

                                                }
                                            }
                                        }
                                        excelResult.AppendLine();


                                        AttendanceList.Add(list);
                                    }
                                }
                                excelResult.Append("");
                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = AttendanceList;

                        if (!(_clsCurrentUser.Is_SuperAdmin || _clsCurrentUser.Is_HRAdmin) && objdetaills.default_company_id > 0)
                        {
                            if (!_clsCurrentUser.CompanyId.Contains(objdetaills.default_company_id))
                            {
                                objresponse.StatusCode = 1;
                                objresponse.Message = "Unauthorized access for this company....";
                                return Ok(objresponse);
                            }
                        }

                        var dataaa = CheckEmpManualAttendanceStatusDetailsfromexcel(AttendanceList);
                        var duplicate_dtl = dataaa.duplicateAttendancelist;
                        var missing_dtll = dataaa.missinAttendancetlist;
                        var issue_dtll = dataaa.issueAttendencelist;
                        var adddblistt = dataaa.addbempAttendancelist;
                        objresponse = dataaa.objresponse;
                        var adddblistt1 = adddblistt.ConvertAll(x => new tbl_attendance_details_manual
                        {
                            user_id = x.user_id,
                            attendance_dt = x.attendance_dt,
                            emp_id = x.emp_id,
                            day_status = Convert.ToByte(x.day_status),
                            entry_date = x.entry_date
                        });
                        //var missingDtlMessage = dataaa.MissingDtlMessage;

                        if (adddblistt1.Count() > 0)
                        {
                            var _tadm = _context.tbl_attendance_details_manual.Join(adddblistt1, tb => new { tb.emp_id, tb.attendance_dt }, lst => new { lst.emp_id, lst.attendance_dt }, (tb, lst) => new { tb, lst }).Select(p => p.tb).ToList();
                            _context.tbl_attendance_details_manual.RemoveRange(_tadm);
                            _context.SaveChanges();

                            clsManualAttendance obj_cls_emp = new clsManualAttendance(adddblistt1, _context);
                            obj_cls_emp.SaveData();
                        }

                        objresponse.Message = adddblistt1.Count().ToString() + " Record Successfully saved";
                        return Ok(dataaa);
                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Something went wrong";
                        return Ok(objresponse);
                    }
                }
                else if (objdetaills.UploadSection == "DeleteManualPunch")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {

                        using (SpreadsheetDocument doc = SpreadsheetDocument.Open(get_file_path, false))
                        {

                            //create the object for workbook part  
                            WorkbookPart workbookPart = doc.WorkbookPart;
                            Sheets thesheetcollection = workbookPart.Workbook.GetFirstChild<Sheets>();

                            //array list to store employee code
                            var pathh = Path.GetTempPath();

                            //using for each loop to get the sheet from the sheetcollection  
                            foreach (Sheet thesheet in thesheetcollection)
                            {
                                excelResult.AppendLine("Excel Sheet Name : " + thesheet.Name);
                                excelResult.AppendLine("----------------------------------------------- ");
                                //statement to get the worksheet object by using the sheet id  
                                Worksheet theWorksheet = ((WorksheetPart)workbookPart.GetPartById(thesheet.Id)).Worksheet;


                                SheetData thesheetdata = (SheetData)theWorksheet.GetFirstChild<SheetData>();


                                foreach (Row thecurrentrow in thesheetdata)
                                {
                                    //skip header row
                                    if (thecurrentrow.RowIndex != 1)
                                    {
                                        EployeeManualAttendanceDetails list = new EployeeManualAttendanceDetails();

                                        string currentcolumnnoo = string.Empty;
                                        foreach (Cell thecurrentcell in thecurrentrow)
                                        {
                                            currentcolumnnoo = thecurrentcell.CellReference.ToString().Substring(0, 1).ToUpper();
                                            //skip sr no.
                                            if (currentcolumnnoo != "A")
                                            {

                                                //statement to take the integer value  
                                                string currentcellvalue = string.Empty;
                                                if (thecurrentcell.DataType != null)
                                                {
                                                    if (thecurrentcell.DataType == CellValues.SharedString)
                                                    {
                                                        int id;
                                                        if (Int32.TryParse(thecurrentcell.InnerText, out id))
                                                        {
                                                            SharedStringItem item = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(id);
                                                            if (item.Text != null)
                                                            {
                                                                //code to take the string value  
                                                                excelResult.Append(item.Text.Text + " ");
    #region ** START Add value in list **
                                                                if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "B")
                                                                {
                                                                    list.emp_code = item.Text.Text;
                                                                }
                                                                else if (!string.IsNullOrEmpty(item.Text.Text) && currentcolumnnoo == "C")
                                                                {
                                                                    list.attendance_dt = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(item.Text.Text)).GetDateTimeFormats()[5]);

                                                                }

    #endregion ** END value in list**
                                                            }
                                                            else if (item.InnerText != null)
                                                            {
                                                                currentcellvalue = item.InnerText;
                                                            }
                                                            else if (item.InnerXml != null)
                                                            {
                                                                currentcellvalue = item.InnerXml;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //read columns value
                                                    excelResult.Append(Convert.ToString(thecurrentcell.InnerText) + " ");
    #region ** START Add value in list **

                                                    if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "B")
                                                    {
                                                        list.emp_code = thecurrentcell.InnerText;
                                                    }
                                                    else if (!string.IsNullOrEmpty(thecurrentcell.InnerText) && currentcolumnnoo == "C")
                                                    {
                                                        list.attendance_dt = Convert.ToDateTime(DateTime.FromOADate(Convert.ToDouble(thecurrentcell.InnerText)).GetDateTimeFormats()[5]);
                                                    }
    #endregion ** END value in list**

                                                }
                                            }
                                        }
                                        excelResult.AppendLine();


                                        AttendanceList.Add(list);
                                    }
                                }
                                excelResult.Append("");
                            }
                        }

                        var data = excelResult.ToString();
                        var data1 = AttendanceList;




                        var dataaa = CheckEmpdDeleteManualAttendanceDetailsfromexcel(AttendanceList);
                        var duplicate_dtl = dataaa.duplicateAttendancedtl;
                        var missing_dtll = dataaa.missinAttendancetlc;
                        var adddblistt = dataaa.addbempAttendancedtl;
                        var missingDtlMessage = dataaa.MissingDtlMessage;

                        if (duplicate_dtl.Count > 0 || missing_dtll.Count > 0)
                        {
                            return Ok(dataaa);
                        }
                        else
                        {
                            clsManualAttendance obj_cls_emp = new clsManualAttendance(adddblistt, _context);
                            obj_cls_emp.DeleteData();


                            objresponse.StatusCode = 0;
                            objresponse.Message = "Employee Attendance Status Deleted Successfully...!";
                            return Ok(objresponse);


                        }

                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Something went wrong";
                        return Ok(objresponse);
                    }
                }
    #endregion
                else if (objdetaills.UploadSection == "FullUpload")
                {
                    if (!string.IsNullOrEmpty(get_file_path))
                    {
                        using (var stream = new MemoryStream())
                        {
                            await files[0].CopyToAsync(stream);

                            using (var package = new ExcelPackage(stream))
                            {
                                DataTable exdt = ExcelPackageToDataTable(package);
                                if (exdt != null && exdt.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in exdt.Rows)
                                    {
                                        EmployeeAllDataUpload list = new EmployeeAllDataUpload();

                                        list.emp_code = dr["Employee Code"].ToString();

                                        list.salutation = dr["Salutation"].ToString();

                                        list.emp_name = dr["EmpName"].ToString();

                                        list.father_husband_name = dr["Father Husband Name"].ToString();

                                        if (dr["Dateof Birth"].ToString() != "")
                                        {
                                            //list.date_of_birth = DateTime.FromOADate(Convert.ToDouble(dr["Dateof Birth"].ToString()));
                                            list.date_of_birth = DateTime.ParseExact(dr["Dateof Birth"].ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                        list.nationality = dr["Nationality"].ToString();

                                        list.gender = dr["Gender"].ToString();

                                        list.is_active = dr["Is Active"].ToString();

                                        list.blood_group = dr["Blood Group"].ToString();

                                        list.marital_status = dr["Marital Status"].ToString();

                                        list.adhar_no = dr["Adhar No"].ToString();

                                        list.adhar_name = dr["Adhar Name"].ToString();

                                        list.employee_status = dr["EmployeeStatus"].ToString();

                                        if (dr["Date of Joining"].ToString() != "")
                                        {
                                            //list.date_of_joining = DateTime.FromOADate(Convert.ToDouble(dr["Date of Joining"].ToString()));
                                            list.date_of_joining = DateTime.ParseExact(dr["Date of Joining"].ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                        if (dr["Probation Period"].ToString() != "")
                                        {
                                            list.probation_period = Convert.ToInt32(dr["Probation Period"].ToString());
                                        }
                                        try
                                        {
                                            if (dr["Confirmation Date"].ToString() != "")
                                            {
                                               // list.confirmation_date = DateTime.FromOADate(Convert.ToDouble(dr["Confirmation Date"].ToString()));
                                                list.confirmation_date = DateTime.ParseExact(dr["Confirmation Date"].ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                            }
                                            else
                                            {
                                                list.confirmation_date = list.date_of_joining.AddYears(1);
                                            }
                                        }
                                        catch
                                        {
                                            list.confirmation_date = list.date_of_joining.AddYears(1);
                                        }


                                        try
                                        {
                                            if (dr["ResignationDate"].ToString() != "")
                                            {
                                                //list.resignation_date = DateTime.FromOADate(Convert.ToDouble(dr["ResignationDate"].ToString()));
                                                list.resignation_date = DateTime.ParseExact(dr["ResignationDate"].ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                            }
                                            else
                                            {
                                                list.resignation_date = list.date_of_joining.AddYears(40);
                                            }
                                        }
                                        catch
                                        {
                                            list.resignation_date = list.date_of_joining.AddYears(40);
                                        }

                                        if (dr["Notice Period"].ToString() != "")
                                        {
                                            list.notice_period = Convert.ToInt32(dr["Notice Period"].ToString());
                                        }
                                        try
                                        {
                                            if (dr["LastworkingDate"].ToString() != "")
                                            {
                                                //list.last_working_date = DateTime.FromOADate(Convert.ToDouble(dr["LastworkingDate"].ToString()));
                                                list.last_working_date = DateTime.ParseExact(dr["LastworkingDate"].ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                            }
                                            else
                                            {
                                                list.last_working_date = list.date_of_joining.AddYears(40);
                                            }
                                        }
                                        catch
                                        {
                                            list.last_working_date = list.date_of_joining.AddYears(40);
                                        }

                                        try
                                        {
                                            if (dr["Card Number"].ToString() != "")
                                            {
                                                list.card_number = Convert.ToInt32(dr["Card Number"].ToString());
                                            }
                                        }
                                        catch { }

                                        list.email_work = dr["Email Work"].ToString();

                                        list.company_name = dr["Company Name"].ToString();

                                        list.location_name = dr["Location Name"].ToString();

                                        list.department_name = dr["Department Name"].ToString();

                                        list.designation_name = dr["Designation Name"].ToString();

                                        list.grade_name = dr["Grade Name"].ToString();

                                        list.salary_group = dr["Salary Group"].ToString();

                                        list.bank_name = dr["Bank Name"].ToString();
                                        list.bank_IFSC_Code = dr["Bank IFSC Code"].ToString();

                                        list.salary_account_no = dr["Salary Account No"].ToString();

                                        list.salary_bank_branch = dr["Salary Bank Branch"].ToString();

                                        list.current_address1 = dr["Current Address1"].ToString();

                                        list.current_address2 = dr["Current Address2"].ToString();

                                        try
                                        {
                                            list.current_pincode = Convert.ToInt32(dr["Current Pincode"].ToString().Replace(" ", string.Empty).Replace("-", string.Empty));
                                        }
                                        catch { }

                                        list.permenant_address1 = dr["Permenant Address1"].ToString();

                                        list.permenant_address2 = dr["Permenant Address2"].ToString();

                                        try
                                        {
                                            if (dr["Permenant Pincode"].ToString() != "")
                                            {
                                                list.permenant_pincode = Convert.ToInt32(dr["Permenant Pincode"].ToString().Replace(" ", string.Empty).Replace("-", string.Empty));
                                            }
                                        }
                                        catch { }

                                        list.permenant_city_name = dr["Permenant City Name"].ToString();

                                        list.permenant_state_name = dr["Permenant State Name"].ToString();

                                        list.payment_mode = dr["Payment Mode"].ToString();

                                        list.PAN_No = dr["PAN No"].ToString();

                                        list.UAN_number = dr["UAN Number"].ToString();

                                        list.PF_applicable = dr["PF Applicable"].ToString();

                                        list.PF_number = dr["PF Number"].ToString();

                                        list.PF_ceiling = dr["PF Ceiling"].ToString();

                                        list.PF_group = dr["PF Group"].ToString();

                                        list.ESIC_applicable = dr["ESIC Applicable"].ToString();

                                        list.ESIC_number = dr["ESIC Number"].ToString();

                                        list.ESIC_group = dr["ESIC Group"].ToString();

                                        list.PT_applicable = dr["PT Applicable"].ToString();

                                        list.PT_group = dr["PT Group"].ToString();

                                        list.VPF_percentage = dr["VPF Percentage"].ToString();

                                        list.SPT_description = dr["SPTDescription"].ToString();

                                        list.is_branch_ESIC_applicable = dr["Is Branch ESIC Applicable"].ToString();

                                        list.state_name = dr["Office State Name"].ToString();

                                        list.city_name = dr["Office City Name"].ToString();

                                        excelResult.AppendLine();
                                        list.created_by = objdetaills.created_by;
                                        list.company_id = objdetaills.default_company_id;

                                        FullUploadList.Add(list);
                                    }
                                }

                            }
                        }

                    
                        var data = excelResult.ToString();
                        var data1 = FullUploadList;

                        var dataaa = CheckEmpdaAllDatafromexcel(FullUploadList);
                        var duplicate_dtl = dataaa.duplicateFullUpladdtl;
                        var missing_dtll = dataaa.missinFullUpladtlc;
                        var adddblistt = dataaa.addbempFullUpladdtl;
                        var missingDtlMessage = dataaa.MissingDtlMessage;
                        objresponse = dataaa.objresponse;

                        int returnnvalue = 0;
                        if (adddblistt.Count() > 0)
                            returnnvalue = _clEmployeeDetail.SaveEmpAllDetailFromExcel(adddblistt);

                        if (returnnvalue == -1)
                        {
                            objresponse.StatusCode = 0;
                            objresponse.Message = "Employee Codee Already Exist...!";

                            return Ok(objresponse);

                        }
                        else if (returnnvalue == -2)
                        {
                            // string url = Convert.ToString(_config["License_domain_url"]) + objdetaills.default_company_id + "/" + Convert.ToString(_config["Instance_ID"]);// sample url

                            int total_no_of_employee = 1000;

                            //using (HttpClient client = new HttpClient())
                            //{
                            //    total_no_of_employee = Convert.ToInt32(client.GetStringAsync(url).Result);
                            //}

                            objresponse.StatusCode = 1;
                            objresponse.Message = "Employee limit exceed !!! Employee Range of Selected Company is:" + total_no_of_employee + "";
                            return Ok(objresponse);
                        }
                        else
                        {
                            objresponse.Message = adddblistt.Count().ToString() + " Records Saved Successfully..";
                            return Ok(dataaa);
                        }
                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Something went wrong";
                        return Ok(objresponse);
                    }
                }

                return Ok();
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Data is not valid in excel sheet please correct the data and then upload again...!";
                return Ok(objresponse);
                // return Ok(ex.Message);
            }
        }
        private EmployeeDetailListt CheckQualificationDetailFromExcel(List<EmployeeQualificationSection> list)
        {
            List<EmployeeQualificationSection> missingdetaillist = new List<EmployeeQualificationSection>();
            List<EmployeeQualificationSection> adddblist = new List<EmployeeQualificationSection>();
            List<EmployeeQualificationSection> duplicatedetaillist = new List<EmployeeQualificationSection>();
            List<EmployeeQualificationSection> issuedetaillist = new List<EmployeeQualificationSection>();
            Response_Msg objresponse = new Response_Msg();

            //int _company_id = 0;
            //int employee_id = 0;
            //bool _emp_code_not_exist = false;
            //int EducationType = 0;
            //int EductionLevel = 0;
            StringBuilder message = new StringBuilder();

            string empnameRegex = @"^[a-zA-Z'\s]{1,200}$";

            Regex rename = new Regex(empnameRegex);

            string passingyr = @"^[0-9]{4}$";

            Regex _passingyr = new Regex(passingyr);

            //            string markss= @"^[0-9'\s'\.'\]{4}$";
            string markss = @"^(\.0[1-9])|(\.[1-9]{1,2})|(?!^0*$)(?!^0*\.0*$)^\d{1,2}(\.\d{1,2})|(100|100\.0|100\.00)?$";
            Regex _marks = new Regex(markss);


            var all_Empdtl = new List<EmployeeBasicData>();

            StringBuilder MissingDtlMessage = new StringBuilder();
            for (int i = 0; i < _clsCurrentUser.CompanyId.Count(); i++)
            {
                var all_Empdtl1 = _clEmployeeDetail.GetEmployeeByDate(_clsCurrentUser.CompanyId[i], Convert.ToDateTime("01-01-2000"), DateTime.Now).ToList();
                all_Empdtl.AddRange(all_Empdtl1);
            }

            List<int> item_to_remove = new List<int>();
            try
            {
                MissingDtlMessage.Append("");
                for (int i = 0; i < list.ToList().Count; i++)
                {
                    bool _invalid = false;

                    if (string.IsNullOrEmpty(list[i].emp_code))
                    {
                        list[i].error_message = string.Format("Emp Code is missing...");
                        issuedetaillist.Add(list[i]);
                        item_to_remove.Add(i);
                        continue;
                    }
                    else
                    {

                        var _emp_code_exist = all_Empdtl.Where(x => x.emp_code.Trim().ToUpper() == list[i].emp_code.Trim().ToUpper()).FirstOrDefault();
                        if (_emp_code_exist != null)
                        {
                            list[i].employee_id = _emp_code_exist.employee_id;
                        }
                        else
                        {
                            list[i].error_message = string.Format("Emp Code not exist...");
                            issuedetaillist.Add(list[i]);
                            item_to_remove.Add(i);
                            continue;
                        }
                    }

                    if (string.IsNullOrEmpty(list[i].board_or_university))
                    {

                        list[i].error_message = string.Format("Board/University cannot be blank...");
                        issuedetaillist.Add(list[i]);
                        item_to_remove.Add(i);
                        continue;
                    }
                    else // check special character
                    {
                        if (!rename.IsMatch(list[i].board_or_university))
                        {
                            list[i].error_message = string.Format("No special characters or './,' are allowed in board university only alphabetical allowed...");
                            issuedetaillist.Add(list[i]);
                            item_to_remove.Add(i);
                            continue;
                        }
                    }
                    if (string.IsNullOrEmpty(list[i].institute_or_school))
                    {
                        list[i].error_message = string.Format("Institute/School cannot be blank...");
                        issuedetaillist.Add(list[i]);
                        item_to_remove.Add(i);
                        continue;
                    }
                    else
                    {
                        if (!rename.IsMatch(list[i].institute_or_school))
                        {
                            list[i].error_message = string.Format("No special characters or './,' are allowed in Institute/School only alphabetical allowed...");
                            issuedetaillist.Add(list[i]);
                            item_to_remove.Add(i);
                            continue;
                        }
                    }
                    if (string.IsNullOrEmpty(list[i].passing_year))
                    {
                        list[i].error_message = string.Format(" Passign Year cannot be blank...");
                        issuedetaillist.Add(list[i]);
                        item_to_remove.Add(i);
                        continue;
                    }
                    else
                    {
                        if (!_passingyr.IsMatch(list[i].passing_year))
                        {
                            list[i].error_message = string.Format(" Enter only numeric in passing year...");
                            issuedetaillist.Add(list[i]);
                            item_to_remove.Add(i);
                            continue;
                        }
                    }
                    if (string.IsNullOrEmpty(list[i].stream))
                    {
                        list[i].error_message = string.Format(" Course Cannot be blank...");
                        issuedetaillist.Add(list[i]);
                        item_to_remove.Add(i);
                        continue;
                    }
                    else
                    {
                        if (!rename.IsMatch(list[i].stream))
                        {
                            list[i].error_message = string.Format(" No special characters or './,' are allowed in course only alphabetical...");
                            issuedetaillist.Add(list[i]);
                            item_to_remove.Add(i);
                            continue;
                        }
                    }
                    if (string.IsNullOrEmpty(list[i].education_type))
                    {
                        list[i].error_message = string.Format(" Education Type cannot be blank...");
                        issuedetaillist.Add(list[i]);
                        item_to_remove.Add(i);
                        continue;
                    }
                    else
                    {
                        if (!rename.IsMatch(list[i].stream))
                        {
                            list[i].error_message = string.Format(" No special characters or './,' are allowed in course only alphabetical allowed...");
                            issuedetaillist.Add(list[i]);
                            item_to_remove.Add(i);
                            continue;
                        }
                        else
                        {
                            //  1 for Regular, 2 for Part-time , 3 for distance
                            var EducationType = list[i].education_type.Trim().ToUpper() == "REGULAR" ? 1 : list[i].education_type.Trim().ToUpper() == "PART-TIME" ? 2 : list[i].education_type.Trim().ToUpper() == "DISTANCE" ? 3 : 0;
                            if (EducationType == 0)
                            {
                                list[i].error_message = string.Format(" Invalid Education Type...");
                                issuedetaillist.Add(list[i]);
                                item_to_remove.Add(i);
                                continue;
                            }
                            else
                            {
                                list[i].education_type_ = EducationType;
                            }
                        }

                    }
                    if (string.IsNullOrEmpty(list[i].education_level))
                    {
                        list[i].error_message = string.Format(" Education Level cannot be blank...");
                        issuedetaillist.Add(list[i]);
                        item_to_remove.Add(i);
                        continue;
                    }
                    else
                    {
                        if (!rename.IsMatch(list[i].education_level))
                        {
                            list[i].error_message = string.Format("  No special characters or './,' are allowed in Education Level only alphabetical allowed...");
                            issuedetaillist.Add(list[i]);
                            item_to_remove.Add(i);
                            continue;
                        }
                        else
                        {
                            //  1 Not Educated, 2 Primary Education, 3 Secondary, 4 Sr Secondary, 5 Graduation, 6 Post Graduation, 7 Doctorate 
                            var EductionLevel = list[i].education_level.Trim().ToUpper() == "NOT EDUCATED" ? 1 : list[i].education_level.Trim().ToUpper() == "PRIMARY EDUCATION" ? 2 : list[i].education_level.Trim().ToUpper() == "SECONDARY" ? 3 : list[i].education_level.Trim().ToUpper() == "SR SECONDARY" ? 4 : list[i].education_level.Trim().ToUpper() == "GRADUATION" ? 5 : list[i].education_level.Trim().ToUpper() == "POST GRADUATION" ? 6 : list[i].education_level.Trim().ToUpper() == "DOCTORATE" ? 7 : list[i].education_level.Trim().ToUpper() == "DIPLOMA" ? 8 : list[i].education_level.Trim().ToUpper() == "CERTIFICATE" ? 9 : 0;
                            if (EductionLevel == 0)
                            {
                                list[i].error_message = string.Format(" Invalid Eduction Level...");
                                issuedetaillist.Add(list[i]);
                                item_to_remove.Add(i);
                                continue;
                            }
                            else
                            {
                                list[i].education_level_ = EductionLevel;
                            }
                        }

                    }
                    if (string.IsNullOrEmpty(list[i].marks_division_cgpa))
                    {
                        list[i].error_message = string.Format(" Marks/Division/CGPA cannot be blank...");
                        issuedetaillist.Add(list[i]);
                        item_to_remove.Add(i);
                        continue;
                    }
                    else
                    {
                        if (!_marks.IsMatch(list[i].marks_division_cgpa))
                        {
                            list[i].error_message = string.Format(" Invalid Marks, enter only numeric...");
                            issuedetaillist.Add(list[i]);
                            item_to_remove.Add(i);
                            continue;
                        }
                    }

                    if (!string.IsNullOrEmpty(list[i].remark))
                    {
                        if (!rename.IsMatch(list[i].remark))
                        {
                            list[i].error_message = string.Format(" Invalid remarks, enter remarks only in alphabets...");
                            issuedetaillist.Add(list[i]);
                            item_to_remove.Add(i);
                            continue;
                        }
                    }


                    bool _checkduplicate = adddblist.Any(x => x.emp_code == list[i].emp_code && x.employee_id == list[i].employee_id);

                    if (_checkduplicate) // Add in this list if any one field detail is found duplicate in list
                    {
                        list[i].error_message = "Duplicate Entry in Excel";
                        issuedetaillist.Add(list[i]);
                        MissingDtlMessage.Append("Duplicate Entry in Excel</br>");
                    }
                    else
                    {
                        EmployeeQualificationSection objlist = new EmployeeQualificationSection();

                        objlist.employee_id = list[i].employee_id;
                        objlist.emp_code = list[i].emp_code;
                        objlist.board_or_university = list[i].board_or_university;
                        objlist.institute_or_school = list[i].institute_or_school;
                        objlist.passing_year = list[i].passing_year;
                        objlist.stream = list[i].stream;
                        objlist.education_type = list[i].education_type;
                        objlist.education_level = list[i].education_level;
                        objlist.marks_division_cgpa = list[i].marks_division_cgpa;
                        objlist.created_by = list[i].created_by;
                        objlist.education_level_ = list[i].education_level_;
                        objlist.education_type_ = list[i].education_type_;
                        adddblist.Add(objlist);
                    }


                }
            }
            catch (Exception ex)
            {

            }

            if (item_to_remove.Count > 0)
            {
                list.RemoveAll(x => x.error_message != null);
            }


            return new EmployeeDetailListt
            {
                missingQualification = missingdetaillist,
                duplicateQualification = duplicatedetaillist,
                addbempQualificationl = adddblist,
                MissingDtlMessage = MissingDtlMessage.ToString(),
                issueQualificationl = issuedetaillist,
                objresponse = new Response_Msg()
            };

        }

        private EmployeeDetailListt CheckFamilySectionDetailFromExcel(List<EmployeeFamilySection> list)
        {
            List<EmployeeFamilySection> missingdetaillist = new List<EmployeeFamilySection>();
            List<EmployeeFamilySection> adddblist = new List<EmployeeFamilySection>();
            List<EmployeeFamilySection> duplicatedetaillist = new List<EmployeeFamilySection>();
            StringBuilder message = new StringBuilder();

            string empnameRegex = @"^[a-zA-Z'\s]{1,200}$";

            Regex rename = new Regex(empnameRegex);

            string passingyr = @"^[0-9]{4}$";

            Regex _passingyr = new Regex(passingyr);

            string markss = @"^[0-9'\s'\%''\.]{4}$";
            Regex _marks = new Regex(markss);

            string empcode = @"^[a-zA-Z0-9'\s]{1,50}$";

            Regex empcode_ = new Regex(empcode);


            string adhar_cardno = @"^[0-9]{12}$";
            Regex readhar_no = new Regex(adhar_cardno);


            var all_Empdtl = _clEmployeeDetail.GetEmployeeByDate(list[0].company_id, Convert.ToDateTime("01-01-2000"), DateTime.Now).ToList();


            StringBuilder MissingDtlMessage = new StringBuilder();

            try
            {
                MissingDtlMessage.Append("");
                for (int i = 0; i < list.Count; i++)
                {
                    bool _invalid = false;


                    MissingDtlMessage.Append(list[i].emp_code + " Detail:-");
                    if (string.IsNullOrEmpty(list[i].emp_code))
                    {
                        MissingDtlMessage.Append("Emp Code is missing,</br>");
                    }
                    else
                    {
                        if (!empcode_.IsMatch(list[i].emp_code))
                        {
                            _invalid = true;
                            MissingDtlMessage.Append(" Invalid Employee Code,</br>");
                        }
                        var _emp_code_exist = all_Empdtl.Where(a => a.emp_code.Trim().ToUpper() == list[i].emp_code.Trim().ToUpper() && a.company_id == list[i].company_id).FirstOrDefault();
                        if (_emp_code_exist != null)
                        {
                            list[i].employee_id = _emp_code_exist.employee_id;
                        }
                        else
                        {
                            _invalid = true;
                            MissingDtlMessage.Append(" Emp Code not exist,</br>");
                        }
                    }

                    if (string.IsNullOrEmpty(list[i].relation))
                    {
                        _invalid = true;
                        MissingDtlMessage.Append(" Relation cannot be blank,</br>");
                    }
                    else
                    {
                        if (!rename.IsMatch(list[i].relation))
                        {
                            _invalid = true;
                            MissingDtlMessage.Append(" Invalid Relation,</br>");
                        }
                        else
                        {

                            var relation = list[i].relation.Trim().ToUpper() == "FATHER" ? 1 : list[i].relation.Trim().ToUpper() == "MOTHER" ? 2 : list[i].relation.Trim().ToUpper() == "HUSBAND" ? 3 : list[i].relation.Trim().ToUpper() == "WIFE" ? 4 : list[i].relation.Trim().ToUpper() == "BROTHER" ? 5 : list[i].relation.Trim().ToUpper() == "SISTER" ? 6 : list[i].relation.Trim().ToUpper() == "CHILD" ? 7 : 0;
                            if (relation == 0)
                            {
                                _invalid = true;
                                MissingDtlMessage.Append("Invalid Relation,</br>");
                            }
                            else
                            {
                                list[i].relation_ = relation;
                            }

                        }
                    }

                    if (string.IsNullOrEmpty(list[i].occupation))
                    {
                        _invalid = true;
                        MissingDtlMessage.Append(" Occupation cannot be blank,</br>");
                    }
                    else
                    {
                        if (!rename.IsMatch(list[i].occupation))
                        {
                            _invalid = true;
                            MissingDtlMessage.Append(" Invalid Occuption, enter only in alphabetics,</br>");
                        }
                    }

                    if (!string.IsNullOrEmpty(list[i].name_as_per_aadhar_card))
                    {
                        if (!rename.IsMatch(list[i].name_as_per_aadhar_card))
                        {
                            _invalid = true;
                            MissingDtlMessage.Append("Invalid Name (same as aadhar card),</br>");
                        }
                    }
                    if (string.IsNullOrEmpty(list[i].gender))
                    {
                        // _gender = true;
                        _invalid = true;
                        MissingDtlMessage.Append(" Gender cannot be blank,</br>");
                    }
                    else
                    {
                        // 1 for Female , 2 Male , 3 Other 
                        var gender_id = list[i].gender.Trim().ToUpper() == "MALE" ? 1 : list[i].gender.Trim().ToUpper() == "FEMALE" ? 2 : list[i].gender.Trim().ToUpper() == "OTHER" || list[i].gender.Trim().ToUpper() == "OTHERS" ? 3 : 0;
                        if (gender_id == 0)
                        {
                            // _gender = true;
                            _invalid = true;
                            MissingDtlMessage.Append(" Gender not exist, please enter same gender as available in option under family section in employee,</br>");
                        }
                    }
                    if (string.IsNullOrEmpty(list[i].dependent))
                    {
                        // _gender = true;
                        _invalid = true;
                        MissingDtlMessage.Append(" Dependent cannot be blank,</br>");
                    }
                    else
                    {
                        // 1 for Female , 2 Male , 3 Other 
                        var dependent = list[i].dependent.Trim().ToUpper() == "YES" ? 1 : list[i].dependent.Trim().ToUpper() == "NO" ? 2 : 0;
                        if (dependent == 0)
                        {
                            // _gender = true;
                            _invalid = true;
                            MissingDtlMessage.Append(" Please enter only 'YES/NO' in dependent,</br>");
                        }
                    }
                    if (string.IsNullOrEmpty(list[i].is_nominee))
                    {
                        _invalid = true;
                        MissingDtlMessage.Append(" Please enter Nominee as 'YES/NO',</br>");
                    }
                    else
                    {

                        var nominee = list[i].is_nominee.Trim().ToUpper() == "YES" ? 1 : list[i].is_nominee.Trim().ToUpper() == "NO" ? 2 : 0;
                        if (nominee == 0)
                        {
                            _invalid = true;
                            MissingDtlMessage.Append(" Please enter Nominee as YES/NO only,</br>");
                        }
                        else
                        {
                            if (nominee == 1)
                            {
                                if (list[i].nominee_percentage.ToString() == "" || list[i].nominee_percentage == 0)
                                {
                                    _invalid = true;
                                    MissingDtlMessage.Append(" If Nominee is Yes than Nominee Percentage cannot be 0 or blank,</br>");
                                }
                            }
                        }
                    }

                    if (!string.IsNullOrEmpty(list[i].aadhar_card_no))
                    {
                        var exist_no = _context.tbl_emp_adhar_details.Where(x => x.is_deleted == 0 && x.aadha_card_number == list[i].aadhar_card_no).FirstOrDefault();
                        if (exist_no != null)
                        {
                            _invalid = true;
                            MissingDtlMessage.Append(" Aadhar Card No. already exists,</br>");
                        }
                        else
                        {
                            var tefs = _context.tbl_emp_family_sec.Where(x => x.aadhar_card_no == list[i].aadhar_card_no && x.is_deleted == 0).FirstOrDefault();
                            if (tefs != null)
                            {
                                if (tefs.employee_id == list[i].employee_id && tefs.relation.Trim().ToUpper() != list[i].relation.Trim().ToUpper())
                                {
                                    _invalid = true;
                                    MissingDtlMessage.Append("Aadhar Card no alredy exist..</br>");
                                }
                                else if (tefs.employee_id != list[i].employee_id && tefs.aadhar_card_no == list[i].aadhar_card_no)
                                {
                                    _invalid = true;
                                    MissingDtlMessage.Append("Aadhar Card no alredy exist..</br>");
                                }
                            }

                            //validation on adhar card that it correct or not
                            if (!readhar_no.IsMatch(list[i].aadhar_card_no))
                            {
                                _invalid = true;
                                MissingDtlMessage.Append(" Invalid Aadhar Card No.</br>");
                            }

                        }
                    }

                    if (_invalid)
                    {
                        EmployeeFamilySection objemptax = new EmployeeFamilySection();
                        objemptax.employee_id = list[i].employee_id;
                        objemptax.emp_code = list[i].emp_code;
                        objemptax.relation = list[i].relation;
                        objemptax.occupation = list[i].occupation;
                        objemptax.name_as_per_aadhar_card = list[i].name_as_per_aadhar_card;
                        objemptax.date_of_birth = list[i].date_of_birth;
                        objemptax.gender = list[i].gender;
                        objemptax.dependent = list[i].dependent;
                        objemptax.is_nominee = list[i].is_nominee;
                        objemptax.nominee_percentage = list[i].nominee_percentage;
                        objemptax.remark = list[i].remark;
                        objemptax.aadhar_card_no = list[i].aadhar_card_no;


                        missingdetaillist.Add(objemptax);

                        MissingDtlMessage.Append("</br>");
                    }
                    else
                    {
                        bool _checkduplicate = false;
                        var _duplicate_dtl = adddblist.Where(x => x.emp_code == list[i].emp_code && x.employee_id == list[i].employee_id && x.relation.Trim().ToUpper() == list[i].relation.Trim().ToUpper()).FirstOrDefault();
                        if (_duplicate_dtl != null)
                        {
                            if (_duplicate_dtl.relation_ != 5 && _duplicate_dtl.relation_ != 6 && _duplicate_dtl.relation_ != 7)
                            {
                                _checkduplicate = true;
                            }
                        }

                        var duplicateadharno = adddblist.Any(x => x.aadhar_card_no == list[i].aadhar_card_no);//.Any(x => x.emp_code != list[i].emp_code && x.aadhar_card_no == list[i].aadhar_card_no);
                        if (duplicateadharno)
                        {
                            _checkduplicate = true;
                        }

                        //bool _checkduplicate = adddblist.Any(x => x.emp_code == list[i].emp_code && x.employee_id == list[i].employee_id && x.relation.Trim().ToUpper()== list[i].relation.Trim().ToUpper());

                        if (_checkduplicate) // Add in this list if any one field detail is found duplicate in list
                        {
                            EmployeeFamilySection objduplist = new EmployeeFamilySection();

                            objduplist.employee_id = list[i].employee_id;
                            objduplist.emp_code = list[i].emp_code;
                            duplicatedetaillist.Add(objduplist);
                            MissingDtlMessage.Append("Employee relation or Aadhar card no and name must be unique in Excel</br>");
                        }
                        else
                        {
                            EmployeeFamilySection objlist = new EmployeeFamilySection();

                            objlist.employee_id = list[i].employee_id;
                            objlist.emp_code = list[i].emp_code;
                            objlist.relation = list[i].relation;
                            objlist.occupation = list[i].occupation;
                            objlist.name_as_per_aadhar_card = list[i].name_as_per_aadhar_card;
                            objlist.date_of_birth = list[i].date_of_birth;
                            objlist.gender = list[i].gender;
                            objlist.dependent = list[i].dependent;
                            objlist.is_nominee = list[i].is_nominee;
                            objlist.remark = list[i].remark;
                            objlist.created_by = list[i].created_by;
                            objlist.relation_ = list[i].relation_;
                            // objlist.created_by = list[i].created_by;
                            objlist.aadhar_card_no = list[i].aadhar_card_no;
                            objlist.company_id = list[i].company_id;
                            adddblist.Add(objlist);
                        }

                    }

                }
            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missingFamily = missingdetaillist, duplicateFamily = duplicatedetaillist, addbempFamily = adddblist, MissingDtlMessage = MissingDtlMessage.ToString() };

        }

        private EmployeeDetailListt CheckShiftAllocFromExcel(List<EmployeeShiftAlloc> list)
        {
            List<EmployeeShiftAlloc> missingdetaillist = new List<EmployeeShiftAlloc>();
            List<EmployeeShiftAlloc> adddblist = new List<EmployeeShiftAlloc>();
            List<EmployeeShiftAlloc> duplicatedetaillist = new List<EmployeeShiftAlloc>();
            Response_Msg objresponse = new Response_Msg();

            int _company_id = 0;
            int employee_id = 0;
            int shift_id = 0;


            StringBuilder MissingDtlMessage = new StringBuilder();

            try
            {
                MissingDtlMessage.Append("");
                for (int i = 0; i < list.Count; i++)
                {
                    bool _validd = false;


                    MissingDtlMessage.Append(list[i].emp_code + " Detail:-");
                    if (string.IsNullOrEmpty(list[i].emp_code))
                    {
                        MissingDtlMessage.Append("Emp Code is missing,");
                    }
                    else
                    {
                        var _emp_code_exist = _context.tbl_employee_master.OrderByDescending(x => x.employee_id).FirstOrDefault(a => a.emp_code == list[i].emp_code && a.is_active == 1);
                        if (_emp_code_exist != null)
                        {
                            employee_id = _emp_code_exist.employee_id;
                            _company_id = _context.tbl_employee_company_map.OrderByDescending(x => x.sno).FirstOrDefault(x => x.employee_id == _emp_code_exist.employee_id && x.is_deleted == 0).company_id ?? 0;
                            if (_company_id == 0)
                            {
                                _validd = true;
                                MissingDtlMessage.Append("Employee Detail Not Exist..,");
                            }
                        }
                        else
                        {
                            _validd = true;
                            MissingDtlMessage.Append(" Emp Code not exist,");
                        }
                    }
                    if (string.IsNullOrEmpty(list[i].shift_id))
                    {
                        MissingDtlMessage.Append("Shift is missing,");
                    }
                    else
                    {
                        var shift_details = _context.tbl_shift_details.Where(a => a.shift_name == list[i].shift_id && a.is_deleted == 0).FirstOrDefault();
                        var _emp_code_exist = _context.tbl_employee_master.OrderByDescending(x => x.employee_id).FirstOrDefault(a => a.emp_code == list[i].emp_code && a.is_active == 1);
                        if (shift_details == null)
                        {
                            _validd = true;
                            MissingDtlMessage.Append(" Shift not exist,");
                        }
                        else
                        {
                            shift_id = Convert.ToInt32(shift_details.shift_id);
                        }
                    }


                    if (_validd)
                    {
                        EmployeeShiftAlloc objemptax = new EmployeeShiftAlloc();
                        objemptax.employee_id = employee_id;
                        objemptax.emp_code = list[i].emp_code;


                        missingdetaillist.Add(objemptax);

                        MissingDtlMessage.Append("</br>");
                    }
                    else
                    {

                        bool _checkduplicate = adddblist.Any(x => x.emp_code == list[i].emp_code && x.employee_id == employee_id);

                        if (_checkduplicate) // Add in this list if any one field detail is found duplicate in list
                        {
                            EmployeeShiftAlloc objduplist = new EmployeeShiftAlloc();

                            objduplist.employee_id = employee_id;
                            objduplist.emp_code = list[i].emp_code;

                            objduplist.shift_id = list[i].shift_id;
                            objduplist.applicable_from_date = list[i].applicable_from_date;
                            objduplist.applicable_to_date = list[i].applicable_to_date;
                            duplicatedetaillist.Add(objduplist);
                            MissingDtlMessage.Append("Duplicate Entry in Excel</br>");
                        }
                        else
                        {
                            EmployeeShiftAlloc objlist = new EmployeeShiftAlloc();

                            objlist.employee_id = employee_id;
                            objlist.emp_code = list[i].emp_code;
                            objlist.shift_id = shift_id.ToString();
                            objlist.applicable_from_date = list[i].applicable_from_date;
                            objlist.applicable_to_date = list[i].applicable_to_date;

                            adddblist.Add(objlist);
                        }

                    }

                }
            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missingShiftAlloc = missingdetaillist, duplicateShiftAlloc = duplicatedetaillist, addbempShiftAlloc = adddblist, MissingDtlMessage = MissingDtlMessage.ToString() };

        }

        private EmployeeDetailListt CheckWeekOffAllocFromExcel(List<EmployeeOfficaialSection> list)
        {
            List<EmployeeOfficaialSection> missingdetaillist = new List<EmployeeOfficaialSection>();
            List<EmployeeOfficaialSection> adddblist = new List<EmployeeOfficaialSection>();
            List<EmployeeOfficaialSection> duplicatedetaillist = new List<EmployeeOfficaialSection>();
            Response_Msg objresponse = new Response_Msg();

            int _company_id = 0;
            int employee_id = 0;
            int week_off = 0;


            StringBuilder MissingDtlMessage = new StringBuilder();

            try
            {
                MissingDtlMessage.Append("");
                for (int i = 0; i < list.Count; i++)
                {
                    bool _validd = false;


                    MissingDtlMessage.Append(list[i].emp_code + " Detail:-");
                    if (string.IsNullOrEmpty(list[i].emp_code))
                    {
                        MissingDtlMessage.Append("Emp Code is missing,");
                    }
                    else
                    {
                        var _emp_code_exist = _context.tbl_employee_master.OrderByDescending(x => x.employee_id).FirstOrDefault(a => a.emp_code == list[i].emp_code && a.is_active == 1);
                        if (_emp_code_exist != null)
                        {
                            employee_id = _emp_code_exist.employee_id;
                            _company_id = _context.tbl_employee_company_map.OrderByDescending(x => x.sno).FirstOrDefault(x => x.employee_id == _emp_code_exist.employee_id && x.is_deleted == 0).company_id ?? 0;
                            if (_company_id == 0)
                            {
                                _validd = true;
                                MissingDtlMessage.Append("Employee Detail Not Exist..,");
                            }
                        }
                        else
                        {
                            _validd = true;
                            MissingDtlMessage.Append(" Emp Code not exist,");
                        }
                    }
                    if (string.IsNullOrEmpty(list[i].weekly_off))
                    {
                        MissingDtlMessage.Append("Week off type is missing,");
                    }
                    else
                    {
                        week_off = list[i].weekly_off.Trim().ToUpper() == "FIXED" ? 1 : list[i].weekly_off.Trim().ToUpper() == "DYNAMIC" ? 2 : 0;
                        if (week_off == 0)
                        {
                            _validd = true;
                            MissingDtlMessage.Append(" Week off,");
                        }
                    }


                    if (_validd)
                    {
                        EmployeeOfficaialSection objemptax = new EmployeeOfficaialSection();
                        objemptax.employee_id = employee_id;
                        objemptax.emp_code = list[i].emp_code;

                        missingdetaillist.Add(objemptax);
                        MissingDtlMessage.Append("</br>");
                    }
                    else
                    {

                        bool _checkduplicate = adddblist.Any(x => x.emp_code == list[i].emp_code && x.employee_id == employee_id);

                        if (_checkduplicate) // Add in this list if any one field detail is found duplicate in list
                        {
                            EmployeeOfficaialSection objduplist = new EmployeeOfficaialSection();

                            objduplist.employee_id = employee_id;
                            objduplist.emp_code = list[i].emp_code;

                            objduplist.weekly_off = list[i].weekly_off;

                            duplicatedetaillist.Add(objduplist);
                            MissingDtlMessage.Append("Duplicate Entry in Excel</br>");
                        }
                        else
                        {
                            EmployeeOfficaialSection objlist = new EmployeeOfficaialSection();

                            objlist.employee_id = employee_id;
                            objlist.emp_code = list[i].emp_code;
                            objlist.is_fixed_weekly_off = week_off;

                            adddblist.Add(objlist);
                        }

                    }

                }
            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missingdetaillist = missingdetaillist, duplicatedetaillist = duplicatedetaillist, adddblist = adddblist, MissingDtlMessage = MissingDtlMessage.ToString() };

        }

        private EmployeeDetailListt CheckGradeAllocFromExcel(List<EmployeeGradeAlloc> list)
        {
            List<EmployeeGradeAlloc> missingdetaillist = new List<EmployeeGradeAlloc>();
            List<EmployeeGradeAlloc> adddblist = new List<EmployeeGradeAlloc>();
            List<EmployeeGradeAlloc> duplicatedetaillist = new List<EmployeeGradeAlloc>();
            Response_Msg objresponse = new Response_Msg();

            int _company_id = 0;
            int employee_id = 0;
            int grade_id = 0;


            StringBuilder MissingDtlMessage = new StringBuilder();

            try
            {
                MissingDtlMessage.Append("");
                for (int i = 0; i < list.Count; i++)
                {
                    bool _validd = false;


                    MissingDtlMessage.Append(list[i].emp_code + " Detail:-");
                    if (string.IsNullOrEmpty(list[i].emp_code))
                    {
                        MissingDtlMessage.Append("Emp Code is missing,");
                    }
                    else
                    {
                        var _emp_code_exist = _context.tbl_employee_master.OrderByDescending(x => x.employee_id).FirstOrDefault(a => a.emp_code == list[i].emp_code && a.is_active == 1);
                        if (_emp_code_exist != null)
                        {
                            employee_id = _emp_code_exist.employee_id;
                            _company_id = _context.tbl_employee_company_map.OrderByDescending(x => x.sno).FirstOrDefault(x => x.employee_id == _emp_code_exist.employee_id && x.is_deleted == 0).company_id ?? 0;
                            if (_company_id == 0)
                            {
                                _validd = true;
                                MissingDtlMessage.Append("Employee Detail Not Exist..,");
                            }
                        }
                        else
                        {
                            _validd = true;
                            MissingDtlMessage.Append(" Emp Code not exist,");
                        }
                    }
                    if (string.IsNullOrEmpty(list[i].grade_id))
                    {
                        MissingDtlMessage.Append("Grade is missing,");
                    }
                    else
                    {
                        var grade_details = _context.tbl_grade_master.Where(a => a.grade_name == list[i].grade_id && a.is_active == 1).FirstOrDefault();

                        if (grade_details == null)
                        {
                            _validd = true;
                            MissingDtlMessage.Append(" Grade not exist,");
                        }
                        else
                        {
                            grade_id = Convert.ToInt32(grade_details.grade_id);
                        }
                    }


                    if (_validd)
                    {
                        EmployeeGradeAlloc objemptax = new EmployeeGradeAlloc();
                        objemptax.employee_id = employee_id;
                        objemptax.emp_code = list[i].emp_code;


                        missingdetaillist.Add(objemptax);

                        MissingDtlMessage.Append("</br>");
                    }
                    else
                    {

                        bool _checkduplicate = adddblist.Any(x => x.emp_code == list[i].emp_code && x.employee_id == employee_id);

                        if (_checkduplicate) // Add in this list if any one field detail is found duplicate in list
                        {
                            EmployeeGradeAlloc objduplist = new EmployeeGradeAlloc();

                            objduplist.employee_id = employee_id;
                            objduplist.emp_code = list[i].emp_code;

                            objduplist.grade_id = list[i].grade_id;
                            objduplist.applicable_from_date = list[i].applicable_from_date;
                            objduplist.applicable_to_date = list[i].applicable_to_date;
                            duplicatedetaillist.Add(objduplist);
                            MissingDtlMessage.Append("Duplicate Entry in Excel</br>");
                        }
                        else
                        {
                            EmployeeGradeAlloc objlist = new EmployeeGradeAlloc();

                            objlist.employee_id = employee_id;
                            objlist.emp_code = list[i].emp_code;
                            objlist.grade_id = grade_id.ToString();
                            objlist.applicable_from_date = list[i].applicable_from_date;
                            objlist.applicable_to_date = list[i].applicable_to_date;

                            adddblist.Add(objlist);
                        }

                    }

                }
            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missingGradeAlloc = missingdetaillist, duplicateGradeAlloc = duplicatedetaillist, addbempGradeAlloc = adddblist, MissingDtlMessage = MissingDtlMessage.ToString() };

        }

        private EmployeeDetailListt CheckDesignationAllocFromExcel(List<EmployeeDesignationAlloc> list)
        {
            List<EmployeeDesignationAlloc> missingdetaillist = new List<EmployeeDesignationAlloc>();
            List<EmployeeDesignationAlloc> adddblist = new List<EmployeeDesignationAlloc>();
            List<EmployeeDesignationAlloc> duplicatedetaillist = new List<EmployeeDesignationAlloc>();
            Response_Msg objresponse = new Response_Msg();

            int _company_id = 0;
            int employee_id = 0;
            int designation_id = 0;


            StringBuilder MissingDtlMessage = new StringBuilder();

            try
            {
                MissingDtlMessage.Append("");
                for (int i = 0; i < list.Count; i++)
                {
                    bool _validd = false;


                    MissingDtlMessage.Append(list[i].emp_code + " Detail:-");
                    if (string.IsNullOrEmpty(list[i].emp_code))
                    {
                        MissingDtlMessage.Append("Emp Code is missing,");
                    }
                    else
                    {
                        var _emp_code_exist = _context.tbl_employee_master.OrderByDescending(x => x.employee_id).FirstOrDefault(a => a.emp_code == list[i].emp_code && a.is_active == 1);
                        if (_emp_code_exist != null)
                        {
                            employee_id = _emp_code_exist.employee_id;
                            _company_id = _context.tbl_employee_company_map.OrderByDescending(x => x.sno).FirstOrDefault(x => x.employee_id == _emp_code_exist.employee_id && x.is_deleted == 0).company_id ?? 0;
                            if (_company_id == 0)
                            {
                                _validd = true;
                                MissingDtlMessage.Append("Employee Detail Not Exist..,");
                            }
                        }
                        else
                        {
                            _validd = true;
                            MissingDtlMessage.Append(" Emp Code not exist,");
                        }
                    }
                    if (string.IsNullOrEmpty(list[i].designation_id))
                    {
                        MissingDtlMessage.Append("Grade is missing,");
                    }
                    else
                    {
                        var designation_details = _context.tbl_designation_master.Where(a => a.designation_name == list[i].designation_id && a.is_active == 1).FirstOrDefault();

                        if (designation_details == null)
                        {
                            _validd = true;
                            MissingDtlMessage.Append(" Grade not exist,");
                        }
                        else
                        {
                            designation_id = Convert.ToInt32(designation_details.designation_id);
                        }
                    }


                    if (_validd)
                    {
                        EmployeeDesignationAlloc objemptax = new EmployeeDesignationAlloc();
                        objemptax.employee_id = employee_id;
                        objemptax.emp_code = list[i].emp_code;


                        missingdetaillist.Add(objemptax);

                        MissingDtlMessage.Append("</br>");
                    }
                    else
                    {

                        bool _checkduplicate = adddblist.Any(x => x.emp_code == list[i].emp_code && x.employee_id == employee_id);

                        if (_checkduplicate) // Add in this list if any one field detail is found duplicate in list
                        {
                            EmployeeDesignationAlloc objduplist = new EmployeeDesignationAlloc();

                            objduplist.employee_id = employee_id;
                            objduplist.emp_code = list[i].emp_code;

                            objduplist.designation_id = list[i].designation_id;
                            objduplist.applicable_from_date = list[i].applicable_from_date;
                            objduplist.applicable_to_date = list[i].applicable_to_date;
                            duplicatedetaillist.Add(objduplist);
                            MissingDtlMessage.Append("Duplicate Entry in Excel</br>");
                        }
                        else
                        {
                            EmployeeDesignationAlloc objlist = new EmployeeDesignationAlloc();

                            objlist.employee_id = employee_id;
                            objlist.emp_code = list[i].emp_code;
                            objlist.designation_id = designation_id.ToString();
                            objlist.applicable_from_date = list[i].applicable_from_date;
                            objlist.applicable_to_date = list[i].applicable_to_date;

                            adddblist.Add(objlist);
                        }

                    }

                }
            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missingDesignationAlloc = missingdetaillist, duplicateDesignationAlloc = duplicatedetaillist, addbempDesignationAlloc = adddblist, MissingDtlMessage = MissingDtlMessage.ToString() };

        }

        private EmployeeDetailListt CheckManagerAllocFromExcel(List<EmployeeManagerAlloc> list)
        {
            List<EmployeeManagerAlloc> missingdetaillist = new List<EmployeeManagerAlloc>();
            List<EmployeeManagerAlloc> adddblist = new List<EmployeeManagerAlloc>();
            List<EmployeeManagerAlloc> duplicatedetaillist = new List<EmployeeManagerAlloc>();
            Response_Msg objresponse = new Response_Msg();


            //int employee_id = 0;


            StringBuilder MissingDtlMessage = new StringBuilder();

            try
            {
                bool _invalid = false;
                MissingDtlMessage.Append("");

                var empids = _context.tbl_employee_company_map.Where(x => x.is_deleted == 0).ToList();
                var _Codes = _context.tbl_employee_master.Where(x => x.is_active == 1 && empids.Any(y => y.employee_id == x.employee_id)).ToList();
                var emp_off_sec = _context.tbl_emp_officaial_sec.Where(x => x.is_deleted == 0 && empids.Any(y => y.employee_id == x.employee_id)).ToList();

                if (list.Any(x => string.IsNullOrEmpty(x.emp_code) || x.emp_code.Trim().ToUpper() == "NA" || x.emp_code.Trim().ToUpper() == "N.A" || x.emp_code.Trim().ToUpper() == "N.A."))
                {
                    _invalid = true;
                    MissingDtlMessage.Append("Employee Code Cannot be blank");
                }
                else
                {
                    var invalidcode = list.Where(x => !_Codes.Any(y => y.emp_code.Trim().ToUpper() == x.emp_code.Trim().ToUpper())).ToList();
                    if (invalidcode.Count > 0)
                    {
                        _invalid = true;
                        MissingDtlMessage.Append("Invalid Employee Code:-");
                        invalidcode.ForEach(y => MissingDtlMessage.Append("" + y.emp_code + ", "));
                        MissingDtlMessage.Append("</br>");
                    }
                    else
                    {
                        list.ForEach(x =>
                        {
                            x.employee_id = _Codes.FirstOrDefault(y => y.emp_code.Trim().ToUpper() == x.emp_code.Trim().ToUpper()).employee_id;
                        });
                    }
                }

                if (list.Any(x => string.IsNullOrEmpty(x.m_one_id) || x.m_one_id.Trim().ToUpper() == "NA" || x.m_one_id.Trim().ToUpper() == "N.A" || x.m_one_id.Trim().ToUpper() == "N.A."))
                {
                    _invalid = true;
                    MissingDtlMessage.Append("Reporting Manager1 Cannot be blank of following employee code:- ");
                    list.Where(x => string.IsNullOrEmpty(x.m_one_id) || x.m_one_id.Trim().ToUpper() == "NA" || x.m_one_id.Trim().ToUpper() == "N.A" || x.m_one_id.Trim().ToUpper() == "N.A.").ToList().ForEach(y =>
                    {
                        MissingDtlMessage.Append("" + y.emp_code + "");
                    });
                    MissingDtlMessage.Append("</br>");
                }
                else
                {
                    var invalidmone = list.Where(x => !_Codes.Any(y => y.emp_code.Trim().ToUpper() == x.m_one_id.Trim().ToUpper())).ToList();
                    if (invalidmone.Count > 0)
                    {
                        _invalid = true;
                        MissingDtlMessage.Append("Invalid Reporitng Manager1 Code of following Employee Code:-");
                        invalidmone.ForEach(x => MissingDtlMessage.Append("" + x.emp_code + ", "));
                        MissingDtlMessage.Append("</br>");
                    }
                    else
                    {
                        list.ForEach(y =>
                        {
                            y.m_one = _Codes.FirstOrDefault(x => x.emp_code.Trim().ToUpper() == y.m_one_id.Trim().ToUpper()).employee_id;
                        });
                    }
                }

                var m_two = list.Where(x => !string.IsNullOrEmpty(x.m_two_id) && x.m_two_id.Trim().ToUpper() != "NA" && x.m_two_id.Trim().ToUpper() != "N.A" && x.m_two_id.Trim().ToUpper() != "N.A.").ToList();
                if (m_two.Count() > 0)
                {
                    var invalidmtwo = m_two.Where(x => !_Codes.Any(y => y.emp_code.Trim().ToUpper() == x.m_two_id.Trim().ToUpper())).ToList();
                    if (invalidmtwo.Count() > 0)
                    {
                        _invalid = true;
                        MissingDtlMessage.Append("Invalid Reporting Manager2 of following Employee");
                        invalidmtwo.ForEach(x => MissingDtlMessage.Append("" + x.emp_code + ", "));
                        MissingDtlMessage.Append("</br>");

                    }
                    else
                    {
                        m_two.ForEach(x => x.m_two = _Codes.FirstOrDefault(y => y.emp_code.Trim().ToUpper() == x.m_two_id.Trim().ToUpper()).employee_id);
                    }
                }
                else
                {
                    list.ForEach(x => x.m_two = null);
                }


                var m_three_ = list.Where(x => !string.IsNullOrEmpty(x.m_three_id) && x.m_three_id.Trim().ToUpper() != "NA" && x.m_three_id.Trim().ToUpper() != "N.A" && x.m_three_id.Trim().ToUpper() != "N.A.").ToList();
                if (m_three_.Count() > 0)
                {
                    var invalidmthree = m_three_.Where(x => !_Codes.Any(y => y.emp_code.Trim().ToUpper() == x.m_three_id.Trim().ToUpper())).ToList();
                    if (invalidmthree.Count() > 0)
                    {
                        _invalid = true;
                        MissingDtlMessage.Append("Invalid Reporting Manager3 of following Employee");
                        invalidmthree.ForEach(x => MissingDtlMessage.Append("" + x.emp_code + ", "));
                        MissingDtlMessage.Append("</br>");
                    }
                    else
                    {
                        m_three_.ForEach(x => x.m_three = _Codes.FirstOrDefault(y => y.emp_code.Trim().ToUpper() == x.m_three_id.Trim().ToUpper()).employee_id);
                    }
                }
                else
                {
                    m_three_.ForEach(y => y.m_three = null);
                }


                var emp_rpt_same = list.Where(x => (x.m_one != null && x.m_one != 0 && x.employee_id == x.m_one) || (x.m_two != null && x.m_two != 0 && x.employee_id == x.m_two) || (x.m_three != null && x.m_three != 0 && x.employee_id == x.m_three)).ToList();
                if (emp_rpt_same.Count() > 0)
                {
                    _invalid = true;
                    MissingDtlMessage.Append("Employee and Reporting Manager Cannot be Same for following Employee Code:- ");
                    emp_rpt_same.ForEach(x => MissingDtlMessage.Append("" + x.emp_code + ", "));
                    MissingDtlMessage.Append("</br>");
                }

                var _same_rpt_m1 = list.Where(x => x.m_one != null && x.m_one != 0 && (x.m_one == x.m_two || x.m_one == x.m_three)).ToList();
                if (_same_rpt_m1.Count() > 0)
                {
                    _invalid = true;
                    MissingDtlMessage.Append("Reporting Manager1,2,3 cannot be same for following Employee Code:-");
                    _same_rpt_m1.ForEach(x => MissingDtlMessage.Append("" + x.emp_code + ", "));
                    MissingDtlMessage.Append("</br>");
                }

                var _same_rpt_m2 = list.Where(x => x.m_two != null && x.m_two != 0 && (x.m_one == x.m_two || x.m_two == x.m_three)).ToList();
                if (_same_rpt_m2.Count() > 0)
                {
                    _invalid = true;
                    MissingDtlMessage.Append("Reporting Manager1,2,3 cannot be same for following Employee Code:-");
                    _same_rpt_m2.ForEach(x => MissingDtlMessage.Append("" + x.emp_code + ", "));
                    MissingDtlMessage.Append("</br>");
                }

                var _final_approver = list.Where(x => x.m_one != null && x.m_one != 0 && x.m_two != null && x.m_two != 0 && x.m_three != null && x.m_three != 0).ToList();
                if (_final_approver.Count() > 0)
                {
                    var _approver = _final_approver.Where(x =>
                     (!string.IsNullOrEmpty(x.m_one_final_approval) && !string.IsNullOrEmpty(x.m_two_final_approval)
                     && x.m_one_final_approval.Trim().ToUpper() == "YES" && x.m_two_final_approval.Trim().ToUpper() == "YES") ||
                     (!string.IsNullOrEmpty(x.m_two_final_approval) && !string.IsNullOrEmpty(x.m_three_final_approval)
                     && x.m_two_final_approval.Trim().ToUpper() == "YES" && x.m_three_final_approval.Trim().ToUpper() == "YES") ||
                     (!string.IsNullOrEmpty(x.m_one_final_approval) && !string.IsNullOrEmpty(x.m_three_final_approval)
                     && x.m_one_final_approval.Trim().ToUpper() == "YES" && x.m_three_final_approval.Trim().ToUpper() == "YES")).ToList();
                    if (_approver.Count() > 0)
                    {
                        _invalid = true;
                        MissingDtlMessage.Append("Only One Reporting Manager Can be set as Final Approver of following Employee Code:- ");
                        _approver.ForEach(x => MissingDtlMessage.Append("" + x.emp_code + ", "));
                        MissingDtlMessage.Append("</br>");
                    }
                }


                list.ForEach(x =>
                {
                    if (x.m_one_final_approval.Trim().ToUpper() == "YES")
                    {
                        x.final_approval = 1;
                    }
                    else if (x.m_two_final_approval.Trim().ToUpper() == "YES")
                    {
                        x.final_approval = 2;
                    }
                    else if (x.m_three_final_approval.Trim().ToUpper() == "YES")
                    {
                        x.final_approval = 3;
                    }
                    else
                    {
                        x.final_approval = 0;
                    }
                });

                var _nofinalapprover = list.Where(x => x.final_approval == 0).ToList();
                if (_nofinalapprover.Count() > 0)
                {
                    _invalid = true;
                    MissingDtlMessage.Append("Please enter Final Approval Yes/No against Reporting Manager, there must be atleast one final approver for following Employee Code:-");
                    _nofinalapprover.ForEach(x => MissingDtlMessage.Append("" + x.emp_code + ", "));
                    MissingDtlMessage.Append("</br>");
                }

                var _dates = list.Where(x => x.applicable_from_date != null && x.applicable_to_date != null && x.applicable_from_date.Date != Convert.ToDateTime("0001-01-01").Date && x.applicable_to_date.Date != Convert.ToDateTime("0001-01-01").Date && x.applicable_from_date.Date != new DateTime(2000, 01, 01).Date && x.applicable_to_date.Date != new DateTime(2000, 01, 01)).ToList();
                if (_dates.Count() > 0)
                {
                    var _invaliddate = _dates.Where(x => x.applicable_to_date.Date <= x.applicable_from_date.Date).ToList();
                    if (_invaliddate.Count() > 0)
                    {
                        _invalid = true;
                        MissingDtlMessage.Append("Applicable To date must be greater than from date for following employee code:-");
                        _invaliddate.ForEach(y => MissingDtlMessage.Append("" + y.emp_code + ", "));
                        MissingDtlMessage.Append("</br>");
                    }
                    else
                    {
                        //var _invalidate2 = _dates.Where(x => emp_off_sec.Any(y => y.date_of_joining.Date > x.applicable_from_date.Date || y.date_of_joining.Date > x.applicable_to_date.Date)).ToList();
                        //if (_invalidate2.Count() > 0)
                        //{
                        //    MissingDtlMessage.Append("Applicable Form or to Date cannot be less than Employee Joining Date for following employee code:-");
                        //    _invalidate2.ForEach(y => MissingDtlMessage.Append("" + y.emp_code + ", "));
                        //    MissingDtlMessage.Append("</br>");
                        //}

                    }
                }
                else
                {
                    list.ForEach(x =>
                    {
                        x.applicable_from_date = emp_off_sec.Where(y => y.employee_id == x.employee_id).FirstOrDefault() != null ? emp_off_sec.Where(y => y.employee_id == x.employee_id).FirstOrDefault().date_of_joining : new DateTime(2000, 01, 01);
                        x.applicable_to_date = Convert.ToDateTime("2500-01-01");
                    });
                }


                if (_invalid)
                {
                    missingdetaillist.AddRange(list);
                }
                else
                {

                    var _checkduplicate = list.GroupBy(x => x.emp_code)
              .Where(g => g.Count() > 1)
              .Select(y => y.Key)
              .ToList();

                    if (_checkduplicate.Count() > 0) // Add in this list if any one field detail is found duplicate in list
                    {
                        duplicatedetaillist.AddRange(list);
                        MissingDtlMessage.Append("Duplicate Entry in Excel</br>");
                    }
                    else
                    {
                        adddblist.AddRange(list);
                    }

                }



                //for (int i = 0; i < list.Count; i++)
                //{
                //    int final_approval = 0;
                //    int _company_id = 0;

                //    MissingDtlMessage.Append(list[i].emp_code + " Detail:-");


                //    var emp_dtl = _context.tbl_employee_master.Where(x => x.is_active == 1 && x.tbl_employee_company_map
                //            .FirstOrDefault(y=>y.is_deleted==0 && y.company_id==list[i].company_id).company_id==list[i].company_id).ToList();
                //    var emp_company_map = _context.tbl_employee_company_map.Where(x =>x.company_id==list[i].company_id && x.is_deleted == 0 && emp_dtl.Any(y => y.employee_id == x.employee_id)).ToList();
                //    var emp_off_sec = _context.tbl_emp_officaial_sec.Where(x => x.is_deleted == 0 && emp_dtl.Any(y => y.employee_id == x.employee_id)).ToList();

                //    if (emp_dtl.Count > 0 && emp_company_map.Count>0)
                //    {





                //        if (list[i].m_one!=null&&list[i].m_one != 0)
                //        {
                //            if ((list[i].m_one == list[i].m_two) || (list[i].m_one == list[i].m_three))
                //            {
                //                _invalid = true;
                //                MissingDtlMessage.Append("Reporting Manager1,2,3 must be different </br>");
                //            }
                //        }

                //        if (list[i].m_two!=null&&list[i].m_two != 0)
                //        {
                //            if ((list[i].m_one == list[i].m_two) || (list[i].m_two == list[i].m_three))
                //            {
                //                _invalid = true;
                //                MissingDtlMessage.Append("Reporting Manager1,2,3 must be different </br>");

                //            }

                //        }

                //        if (list[i].m_three!=null&&list[i].m_three != 0)
                //        {
                //            if ((list[i].m_one == list[i].m_three) || (list[i].m_two == list[i].m_three))
                //            {
                //                _invalid = true;
                //                MissingDtlMessage.Append("Reporting Manager1,2,3 must be different </br>");
                //            }
                //        }

                //        if (list[i].m_one != null && list[i].m_one != 0 && list[i].m_two != null && list[i].m_two != 0 && list[i].m_three != null && list[i].m_three != 0)
                //        {
                //            if ((!string.IsNullOrEmpty(list[i].m_one_final_approval) && !string.IsNullOrEmpty(list[i].m_two_final_approval)) ||
                //            (!string.IsNullOrEmpty(list[i].m_one_final_approval) && !string.IsNullOrEmpty(list[i].m_three_final_approval)) ||
                //            (!string.IsNullOrEmpty(list[i].m_two_final_approval) && !string.IsNullOrEmpty(list[i].m_three_final_approval)))
                //            {
                //                if (((list[i].m_one_final_approval.Trim().ToUpper() == "YES") && list[i].m_two_final_approval.Trim().ToUpper() == "YES") ||
                //                    (list[i].m_one_final_approval.Trim().ToUpper() == "YES" && list[i].m_three_final_approval.Trim().ToUpper() == "YES") ||
                //                    (list[i].m_two_final_approval.Trim().ToUpper() == "YES" && list[i].m_three_final_approval.Trim().ToUpper() == "YES"))
                //                {
                //                    _invalid = true;
                //                    MissingDtlMessage.Append("Only One Reporting Manager Can be treated as a final Approver </br>");
                //                }
                //            }


                //        }






                //        if (!string.IsNullOrEmpty(list[i].m_one_id) && list[i].m_one_final_approval != "")
                //        {

                //            if (list[i].m_one_final_approval.ToUpper() == "YES")
                //            {
                //                final_approval = 1;
                //            }
                //        }
                //        else if (!string.IsNullOrEmpty(list[i].m_two_id) && list[i].m_three_final_approval != "")
                //        {
                //            if (list[i].m_three_final_approval.ToUpper() == "YES")
                //            {
                //                final_approval = 3;
                //            }
                //        }
                //        else if (!string.IsNullOrEmpty(list[i].m_two_id) && list[i].m_two_final_approval != "")
                //        {
                //            if (list[i].m_two_final_approval.ToUpper() == "YES")
                //            {
                //                final_approval = 2;
                //            }
                //        }
                //        else
                //        {
                //            _invalid = true;
                //            MissingDtlMessage.Append(" Please enter Final Approval Yes/No against Reporting Manager, there must be atleast one final approver </br>");

                //        }

                //        if (final_approval == 0)
                //        {
                //            _invalid = true;
                //            MissingDtlMessage.Append(" There must be atleast one Final Approver </br>");
                //        }

                //        var teos = emp_off_sec.Where(x => x.employee_id == list[i].employee_id).FirstOrDefault();
                //        if (teos != null)
                //        {
                //            if (list[i].applicable_from_date != null && list[i].applicable_to_date != null && list[i].applicable_from_date.Date!= Convert.ToDateTime("0001-01-01").Date && list[i].applicable_to_date.Date!= Convert.ToDateTime("0001-01-01").Date)
                //            {
                //                if (list[i].applicable_to_date.Date <= list[i].applicable_from_date.Date)
                //                {
                //                    _invalid = true;
                //                    MissingDtlMessage.Append("Applicable To date must be greater than from date </br>");
                //                }
                //                else if (list[i].applicable_from_date.Date < teos.date_of_joining.Date || list[i].applicable_to_date.Date <= teos.date_of_joining.Date)
                //                {
                //                    _invalid = true;
                //                    MissingDtlMessage.Append("Applicable Form or to Date cannot be less than Employee Joining Date </br>");
                //                }
                //            }
                //            else
                //            {
                //                    list[i].applicable_from_date = teos.date_of_joining;
                //                    list[i].applicable_to_date = Convert.ToDateTime("2500-01-01");   
                //            }
                //        }
                //        else
                //        {
                //            _invalid = true;
                //            MissingDtlMessage.Append("Please firstly enter official employee details in official section </br>");
                //        }

                //    }
                //    else
                //    {
                //        _invalid = true;
                //        MissingDtlMessage.Append(" Invalid Emloyee, Reporting Manager 1, Reporting Manager 2, Reporting Manager 3 Code </br>");
                //    }


                //    if (_invalid)
                //    {
                //        EmployeeManagerAlloc objemptax = new EmployeeManagerAlloc();
                //        objemptax.employee_id = list[i].employee_id;
                //        objemptax.emp_code = list[i].emp_code;


                //        missingdetaillist.Add(objemptax);

                //        MissingDtlMessage.Append("</br>");
                //    }
                //    else
                //    {

                //        bool _checkduplicate = adddblist.Any(x => x.emp_code == list[i].emp_code && x.employee_id == list[i].employee_id);

                //        if (_checkduplicate) // Add in this list if any one field detail is found duplicate in list
                //        {
                //            EmployeeManagerAlloc objduplist = new EmployeeManagerAlloc();

                //            objduplist.employee_id = list[i].employee_id;
                //            objduplist.emp_code = list[i].emp_code;

                //            objduplist.m_one_id = list[i].m_one_id;
                //            objduplist.m_two_id = list[i].m_two_id;
                //            objduplist.m_three_id = list[i].m_three_id;

                //            objduplist.applicable_from_date = list[i].applicable_from_date;
                //            objduplist.applicable_to_date = list[i].applicable_to_date;
                //            duplicatedetaillist.Add(objduplist);
                //            MissingDtlMessage.Append("Duplicate Entry in Excel</br>");
                //        }
                //        else
                //        {
                //            EmployeeManagerAlloc objlist = new EmployeeManagerAlloc();


                //            objlist.employee_id = list[i].m_one??0;
                //            objlist.emp_code = list[i].emp_code;
                //            objlist.m_one_id = list[i].m_one_id;
                //            objlist.m_one = list[i].m_one;
                //            objlist.m_two_id = list[i].m_two_id;
                //            objlist.m_two = list[i].m_two;
                //            objlist.m_three_id = list[i].m_three_id;
                //            objlist.m_three = list[i].m_three;
                //            objlist.final_approval = Convert.ToByte(final_approval);


                //            objlist.applicable_from_date = list[i].applicable_from_date;
                //            objlist.applicable_to_date = list[i].applicable_to_date;

                //            adddblist.Add(objlist);
                //        }

                //    }

                //}
            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missingManagerAlloc = missingdetaillist, duplicateManagerAlloc = duplicatedetaillist, addbempManagerAlloc = adddblist, MissingDtlMessage = MissingDtlMessage.ToString() };

        }
        [Route("Get_EmpName_ESeperation/{companyid}/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Get_EmpName_ESeperation([FromRoute] int companyid, int emp_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                var user_dtl = _context.tbl_user_master.Where(x => x.employee_id == _clsCurrentUser.EmpId && x.is_active == 1).FirstOrDefault();


                clsUsersDetails objuser_dtl = new clsUsersDetails(_context, _config, user_dtl.username.Trim().ToUpper(), user_dtl.password.Trim(), 0);

                mdlLoginOutput mdl_output = new mdlLoginOutput();
                mdl_output.user_id = objuser_dtl._UserId;
                mdl_output.user_name = objuser_dtl._tbl_user_master.username;
                mdl_output.emp_id = objuser_dtl._tbl_user_master.employee_id ?? 0;
                objuser_dtl.LoadEmpSpecificDetail(mdl_output);


                mdl_output.emp_company_lst = objuser_dtl.Get_emp_company_lst(mdl_output.emp_id, mdl_output);
                var emplist1 = objuser_dtl.Get_Emp_dtl_under_login_emp(mdl_output, _clEmployeeDetail).ToList();

                var esperation_emp = _context.tbl_emp_separation.Where(x => x.is_final_approve == 1 && x.company_id == companyid && x.is_deleted == 0 && x.is_cancel == 0).Select(x => x.emp_id).ToList();

                List<EmployeeList> emplist = emplist1.Where(x => esperation_emp.Contains(x._empid)).ToList();
                return Ok(emplist);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(ex.Message);
            }
        }

        [Route("Get_Employee_Under_LoginEmp_from_all_Company/{companyid}/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Get_Employee_Under_LoginEmp_from_all_Company([FromRoute] int companyid, int emp_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                var user_dtl = _context.tbl_user_master.Where(x => x.employee_id == _clsCurrentUser.EmpId && x.is_active == 1).FirstOrDefault();


                clsUsersDetails objuser_dtl = new clsUsersDetails(_context, _config, user_dtl.username.Trim().ToUpper(), user_dtl.password.Trim(), 0);

                mdlLoginOutput mdl_output = new mdlLoginOutput();
                mdl_output.user_id = objuser_dtl._UserId;
                mdl_output.user_name = objuser_dtl._tbl_user_master.username;
                mdl_output.emp_id = objuser_dtl._tbl_user_master.employee_id ?? 0;
                objuser_dtl.LoadEmpSpecificDetail(mdl_output);


                mdl_output.emp_company_lst = objuser_dtl.Get_emp_company_lst(mdl_output.emp_id, mdl_output);
                List<EmployeeList> emplist = objuser_dtl.Get_Emp_dtl_under_login_emp(mdl_output, _clEmployeeDetail).ToList();

                return Ok(emplist);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(ex.Message);
            }
        }

        [Route("Get_Employee_Under_LoginEmp_Active_Inactive/{companyid}/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Get_Employee_Under_LoginEmp_Active_Inactive([FromRoute] int companyid, int emp_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                var user_dtl = _context.tbl_user_master.Where(x => x.employee_id == _clsCurrentUser.EmpId && x.is_active == 1).FirstOrDefault();


                clsUsersDetails objuser_dtl = new clsUsersDetails(_context, _config, user_dtl.username.Trim().ToUpper(), user_dtl.password.Trim(), 0);

                mdlLoginOutput mdl_output = new mdlLoginOutput();
                mdl_output.user_id = objuser_dtl._UserId;
                mdl_output.user_name = objuser_dtl._tbl_user_master.username;
                mdl_output.emp_id = objuser_dtl._tbl_user_master.employee_id ?? 0;
                
                objuser_dtl.LoadEmpSpecificDetail(mdl_output);


                mdl_output.emp_company_lst = objuser_dtl.Get_emp_company_lst(mdl_output.emp_id, mdl_output);
                List<EmployeeList> emplist = objuser_dtl.Get_Emp_dtl_under_login_emp_Active_Inactive(mdl_output, _clEmployeeDetail).ToList();

                return Ok(emplist);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(ex.Message);
            }
        }

        [Route("Get_Employee_Under_LoginEmp_from_all_CompanyForEsep/{companyid}/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Get_Employee_Under_LoginEmp_from_all_CompanyForEsep([FromRoute] int companyid, int emp_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                var user_dtl = _context.tbl_user_master.Where(x => x.employee_id == _clsCurrentUser.EmpId && x.is_active == 1).FirstOrDefault();


                clsUsersDetails objuser_dtl = new clsUsersDetails(_context, _config, user_dtl.username.Trim().ToUpper(), user_dtl.password.Trim(), 0);

                mdlLoginOutput mdl_output = new mdlLoginOutput();
                mdl_output.user_id = objuser_dtl._UserId;
                mdl_output.user_name = objuser_dtl._tbl_user_master.username;
                mdl_output.emp_id = objuser_dtl._tbl_user_master.employee_id ?? 0;
                objuser_dtl.LoadEmpSpecificDetail(mdl_output);


                mdl_output.emp_company_lst = objuser_dtl.Get_emp_company_lst(mdl_output.emp_id, mdl_output);
                List<EmployeeList> emplist = objuser_dtl.Get_Emp_dtl_under_login_emp(mdl_output, _clEmployeeDetail).ToList();

                emplist = emplist.Where(x => x.emp_status != (int)EmployeeType.FNF && x.emp_status != (int)EmployeeType.Terminate && x.emp_status != (int)EmployeeType.Notice).Distinct().ToList();

                return Ok(emplist);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(ex.Message);
            }
        }

    #region Get employee directory / Birthday / Anniversary method 

        [Route("Get_Employee_from_all_Company_dir/{companyid}/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Get_Employee_from_all_Company_dir([FromRoute] int companyid, int emp_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                var user_dtl = _context.tbl_user_master.Where(x => x.employee_id == _clsCurrentUser.EmpId && x.is_active == 1).FirstOrDefault();
                clsUsersDetails objuser_dtl = new clsUsersDetails(_context, _config, user_dtl.username.Trim().ToUpper(), user_dtl.password.Trim(), 0);
                List<EmployeeList> emplist = objuser_dtl.Get_Emp_dtl_for_dir(_clEmployeeDetail).Distinct().ToList();
                if (_clsCurrentUser.RoleId != null && !(_clsCurrentUser.RoleId.Contains((int)enmRoleMaster.SuperAdmin) || _clsCurrentUser.RoleId.Contains((int)enmRoleMaster.HRAdmin) ||
                    _clsCurrentUser.RoleId.Contains((int)enmRoleMaster.AttendanceAdmin))
                    )
                {                    
                  emplist.ForEach(p=> {
                      p.email = "xxxx@xxxx.com";
                      p.mobileno = "xxxxxxxxxxx";
                  });
                }
                return Ok(emplist);
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(ex.Message);
            }
        }

        [Route("Employee_Birthday_ByCompID/{companyid}/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Employee_Birthday_ByCompID([FromRoute] int companyid, int emp_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                var user_dtl = _context.tbl_user_master.Where(x => x.employee_id == _clsCurrentUser.EmpId && x.is_active == 1).FirstOrDefault();

                clsUsersDetails objuser_dtl = new clsUsersDetails(_context, _config, user_dtl.username.Trim().ToUpper(), user_dtl.password.Trim(), 0);

                List<EmployeeList> emplist = objuser_dtl.Get_Emp_dtl_for_birthday(_clEmployeeDetail).Distinct().ToList();

                return Ok(emplist);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(ex.Message);
            }
        }

        [Route("Employee_Annivery_ByCompID/{companyid}/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Employee_Annivery_ByCompID([FromRoute] int companyid, int emp_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                var user_dtl = _context.tbl_user_master.Where(x => x.employee_id == _clsCurrentUser.EmpId && x.is_active == 1).FirstOrDefault();

                clsUsersDetails objuser_dtl = new clsUsersDetails(_context, _config, user_dtl.username.Trim().ToUpper(), user_dtl.password.Trim(), 0);

                List<EmployeeList> emplist = objuser_dtl.Get_Emp_dtl_for_aniversary(_clEmployeeDetail).Distinct().ToList();

                return Ok(emplist);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(ex.Message);
            }
        }

    #endregion
        [HttpGet("Get_PaymentMode")]

        public IActionResult Get_PaymentMode()
        {
            try
            {
                List<object> list = new List<object>();
                foreach (enmPaymentMode PaymentMode in Enum.GetValues(typeof(enmPaymentMode)))
                {
                    int value = (int)Enum.Parse(typeof(enmPaymentMode), Enum.GetName(typeof(enmPaymentMode), PaymentMode));

                    Type type = PaymentMode.GetType();
                    MemberInfo[] memInfo = type.GetMember(PaymentMode.ToString());
                    if (memInfo != null && memInfo.Length > 0)
                    {
                        object[] attrs = (object[])memInfo[0].GetCustomAttributes(typeof(DescriptionAttribute), false);
                        if (attrs != null && attrs.Length > 0)
                        {
                            string strvalue = ((DescriptionAttribute)attrs[0]).Description;

                            list.Add(new
                            {

                                payment_mode_id = value,
                                payment_mode_name = strvalue
                            });
                        }
                    }
                }
                return Ok(list);
            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }



        [Route("EmployeeAccountDetails")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.AccountDetails))]
        public async Task<IActionResult> EmployeeAccountDetails(EployeeAccountDetails tbl_emp_personal_sec)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { tbl_emp_personal_sec.employee_id ?? 0 });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }


                if (_context.tbl_emp_bank_details.Where(p => p.bank_id == tbl_emp_personal_sec.bank_id && p.bank_acc.Trim() == tbl_emp_personal_sec.bank_acc.Trim() && p.is_deleted == 0 && p.employee_id != tbl_emp_personal_sec.employee_id && _clEmployeeDetail.EmpIDs.Contains(p.employee_id ?? 0)).Count() > 0)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Account number already Exists");
                    return Ok(objResult);
                }
                if (tbl_emp_personal_sec.aadha_card_number != "NA")
                {
                    if (_context.tbl_emp_adhar_details.Where(p => p.aadha_card_number == tbl_emp_personal_sec.aadha_card_number && p.aadha_card_number != "" && p.is_deleted == 0 && p.employee_id != tbl_emp_personal_sec.employee_id && _clEmployeeDetail.EmpIDs.Contains(p.employee_id ?? 0)).Count() > 0)
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = string.Format("Adhar number already Exists");
                        return Ok(objResult);
                    }
                }
                if (tbl_emp_personal_sec.pan_card_number != "NA")
                {
                    if (tbl_emp_personal_sec.pan_card_number.Length > 0)
                    {
                        if (_context.tbl_emp_pan_details.Where(p => p.pan_card_number == tbl_emp_personal_sec.pan_card_number && p.pan_card_number != "" && p.is_deleted == 0 && p.employee_id != tbl_emp_personal_sec.employee_id && _clEmployeeDetail.EmpIDs.Contains(p.employee_id ?? 0)).Count() > 0)
                        {
                            objResult.StatusCode = 1;
                            objResult.Message = string.Format("Pan number already Exists");
                            return Ok(objResult);
                        }
                    }
                }



                tbl_emp_bank_details emp_bank_details = new tbl_emp_bank_details();
                tbl_emp_bank_details tblemp_bank_details = _context.tbl_emp_bank_details.OrderByDescending(a => a.bank_details_id).Where(a => a.is_deleted == 0 && a.employee_id == tbl_emp_personal_sec.employee_id).FirstOrDefault();
                if (tblemp_bank_details != null)
                {
                    tblemp_bank_details.is_deleted = 1;

                    _context.tbl_emp_bank_details.Attach(tblemp_bank_details);
                    _context.Entry(tblemp_bank_details).State = EntityState.Modified;
                    await _context.SaveChangesAsync();
                }

                emp_bank_details.payment_mode = tbl_emp_personal_sec.payment_mode;
                emp_bank_details.bank_id = tbl_emp_personal_sec.bank_id;
                emp_bank_details.branch_name = tbl_emp_personal_sec.branch_name;
                emp_bank_details.ifsc_code = tbl_emp_personal_sec.ifsc_code;
                emp_bank_details.bank_acc = tbl_emp_personal_sec.bank_acc;
                emp_bank_details.employee_id = tbl_emp_personal_sec.employee_id;
                emp_bank_details.is_deleted = 2;
                emp_bank_details.created_by = tbl_emp_personal_sec.Created_by;
                emp_bank_details.created_date = DateTime.Now;

                _context.tbl_emp_bank_details.Attach(emp_bank_details);
                _context.Entry(emp_bank_details).State = EntityState.Added;
                await _context.SaveChangesAsync();



                tbl_emp_pan_details emp_pan_details = new tbl_emp_pan_details();
                tbl_emp_pan_details tblemp_pan_details = _context.tbl_emp_pan_details.OrderByDescending(a => a.pan_details_id).Where(a => a.is_deleted == 0 && a.employee_id == tbl_emp_personal_sec.employee_id).FirstOrDefault();
                if (tblemp_pan_details != null)
                {
                    tblemp_pan_details.is_deleted = 1;

                    _context.tbl_emp_pan_details.Attach(tblemp_pan_details);
                    _context.Entry(tblemp_pan_details).State = EntityState.Modified;
                    await _context.SaveChangesAsync();

    #region  //////////////////////////////// start pan_card_image //////////////////////////////////////

                    if (tblemp_pan_details.pan_card_image != null && tblemp_pan_details.pan_card_image != "" && tblemp_pan_details.pan_card_image != tbl_emp_personal_sec.pan_card_image)
                    {
                        string[] replaceThese = { "data:image/png;base64,", "data:image/jpeg;base64,", "data:image/jpg;base64," };
                        string img_data = tbl_emp_personal_sec.pan_card_image;


                        if (img_data != null && img_data != "")
                        {
                            foreach (string curr in replaceThese)
                            {
                                img_data = img_data.Replace(curr, string.Empty);
                            }

                            byte[] imageBytes = System.Convert.FromBase64String(img_data);
                            string imageName = tbl_emp_personal_sec.pan_card_image + ".jpg";

                            var allowedExtensions = new[] { ".Jpg", ".png", ".jpg", "jpeg" };

                            var ext = ".jpg"; //getting the extension
                            if (allowedExtensions.Contains(ext.ToLower())) //check what type of extension  
                            {
                                string name = "EmpId_" + (tbl_emp_personal_sec.employee_id).ToString();//getting file name without extension  
                                string MyFileName = name + ext;

                                var webRoot = _hostingEnvironment.WebRootPath;

                                if (!Directory.Exists(webRoot + "/EmployeeDocs/Pan/" + tbl_emp_personal_sec.employee_id + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDocs/Pan/" + tbl_emp_personal_sec.employee_id + "/");
                                }

                                var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDocs/Pan/" + tbl_emp_personal_sec.employee_id + "/", MyFileName);
                                System.IO.File.WriteAllBytes(path, imageBytes);//save image file
                                                                               //update file name
                                emp_pan_details.pan_card_image = "/EmployeeDocs/Pan/" + tbl_emp_personal_sec.employee_id + "/" + MyFileName;
                            }
                        }

                    }
                    else
                    {
                        emp_pan_details.pan_card_image = tbl_emp_personal_sec.pan_card_image;
                    }

    #endregion
                }
                else
                {

                    string[] replaceThese = { "data:image/png;base64,", "data:image/jpeg;base64,", "data:image/jpg;base64," };
                    string img_data = tbl_emp_personal_sec.pan_card_image;


                    if (img_data != null && img_data != "")
                    {
                        foreach (string curr in replaceThese)
                        {
                            img_data = img_data.Replace(curr, string.Empty);
                        }

                        byte[] imageBytes = System.Convert.FromBase64String(img_data);
                        string imageName = tbl_emp_personal_sec.pan_card_image + ".jpg";

                        var allowedExtensions = new[] { ".Jpg", ".png", ".jpg", "jpeg" };

                        var ext = ".jpg"; //getting the extension
                        if (allowedExtensions.Contains(ext.ToLower())) //check what type of extension  
                        {
                            string name = "EmpId_" + (tbl_emp_personal_sec.employee_id).ToString();//getting file name without extension  
                            string MyFileName = name + ext;

                            var webRoot = _hostingEnvironment.WebRootPath;

                            if (!Directory.Exists(webRoot + "/EmployeeDocs/Pan/" + tbl_emp_personal_sec.employee_id + "/"))
                            {
                                Directory.CreateDirectory(webRoot + "/EmployeeDocs/Pan/" + tbl_emp_personal_sec.employee_id + "/");
                            }

                            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDocs/Pan/" + tbl_emp_personal_sec.employee_id + "/", MyFileName);
                            System.IO.File.WriteAllBytes(path, imageBytes);//save image file
                                                                           //update file name
                            emp_pan_details.pan_card_image = "/EmployeeDocs/Pan/" + tbl_emp_personal_sec.employee_id + "/" + MyFileName;
                        }
                    }
                }


                emp_pan_details.employee_id = tbl_emp_personal_sec.employee_id;
                emp_pan_details.pan_card_name = tbl_emp_personal_sec.pan_card_name;
                emp_pan_details.pan_card_number = tbl_emp_personal_sec.pan_card_number;
                emp_pan_details.is_deleted = 2;
                emp_pan_details.created_by = tbl_emp_personal_sec.Created_by;
                emp_pan_details.created_date = DateTime.Now;

                _context.tbl_emp_pan_details.Attach(emp_pan_details);
                _context.Entry(emp_pan_details).State = EntityState.Added;
                await _context.SaveChangesAsync();


                tbl_emp_adhar_details emp_adhar_details = new tbl_emp_adhar_details();
                tbl_emp_adhar_details tblemp_adhar_details = _context.tbl_emp_adhar_details.OrderByDescending(a => a.pan_details_id).Where(a => a.is_deleted == 0 && a.employee_id == tbl_emp_personal_sec.employee_id).FirstOrDefault();
                if (tblemp_adhar_details != null)
                {
                    tblemp_adhar_details.is_deleted = 1;

                    _context.tbl_emp_adhar_details.Attach(tblemp_adhar_details);
                    _context.Entry(tblemp_adhar_details).State = EntityState.Modified;
                    await _context.SaveChangesAsync();

    #region /////////////////////////////// start aadha_card_image ///////////////////////////////////////////

                    if (tblemp_adhar_details.aadha_card_image != null && tblemp_adhar_details.aadha_card_image != "" && tblemp_adhar_details.aadha_card_image != tbl_emp_personal_sec.aadha_card_image)
                    {
                        string[] replaceThese = { "data:image/png;base64,", "data:image/jpeg;base64,", "data:image/jpg;base64," };
                        string img_data = tbl_emp_personal_sec.aadha_card_image;


                        if (img_data != null && img_data != "")
                        {
                            foreach (string curr in replaceThese)
                            {
                                img_data = img_data.Replace(curr, string.Empty);
                            }

                            byte[] imageBytes = System.Convert.FromBase64String(img_data);
                            string imageName = tbl_emp_personal_sec.aadha_card_image + ".jpg";

                            var allowedExtensions = new[] { ".Jpg", ".png", ".jpg", "jpeg" };

                            var ext = ".jpg"; //getting the extension
                            if (allowedExtensions.Contains(ext.ToLower())) //check what type of extension  
                            {
                                string name = "EmpId_" + (tbl_emp_personal_sec.employee_id).ToString();//getting file name without extension  
                                string MyFileName = name + ext;

                                var webRoot = _hostingEnvironment.WebRootPath;

                                if (!Directory.Exists(webRoot + "/EmployeeDocs/Aadha/" + tbl_emp_personal_sec.employee_id + "/"))
                                {
                                    Directory.CreateDirectory(webRoot + "/EmployeeDocs/Aadha/" + tbl_emp_personal_sec.employee_id + "/");
                                }

                                var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDocs/Aadha/" + tbl_emp_personal_sec.employee_id + "/", MyFileName);
                                System.IO.File.WriteAllBytes(path, imageBytes);//save image file
                                                                               //update file name
                                emp_adhar_details.aadha_card_image = "/EmployeeDocs/Aadha/" + tbl_emp_personal_sec.employee_id + "/" + MyFileName;
                            }
                        }

                    }
                    else
                    {
                        emp_adhar_details.aadha_card_image = tbl_emp_personal_sec.aadha_card_image;
                    }
    #endregion
                }
                else
                {
                    string[] replaceThese = { "data:image/png;base64,", "data:image/jpeg;base64,", "data:image/jpg;base64," };
                    string img_data = tbl_emp_personal_sec.aadha_card_image;


                    if (img_data != null && img_data != "")
                    {
                        foreach (string curr in replaceThese)
                        {
                            img_data = img_data.Replace(curr, string.Empty);
                        }

                        byte[] imageBytes = System.Convert.FromBase64String(img_data);
                        string imageName = tbl_emp_personal_sec.aadha_card_image + ".jpg";

                        var allowedExtensions = new[] { ".Jpg", ".png", ".jpg", "jpeg" };

                        var ext = ".jpg"; //getting the extension
                        if (allowedExtensions.Contains(ext.ToLower())) //check what type of extension  
                        {
                            string name = "EmpId_" + (tbl_emp_personal_sec.employee_id).ToString();//getting file name without extension  
                            string MyFileName = name + ext;

                            var webRoot = _hostingEnvironment.WebRootPath;

                            if (!Directory.Exists(webRoot + "/EmployeeDocs/Aadha/" + tbl_emp_personal_sec.employee_id + "/"))
                            {
                                Directory.CreateDirectory(webRoot + "/EmployeeDocs/Aadha/" + tbl_emp_personal_sec.employee_id + "/");
                            }

                            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/EmployeeDocs/Aadha/" + tbl_emp_personal_sec.employee_id + "/", MyFileName);
                            System.IO.File.WriteAllBytes(path, imageBytes);//save image file
                                                                           //update file name
                            emp_adhar_details.aadha_card_image = "/EmployeeDocs/Aadha/" + tbl_emp_personal_sec.employee_id + "/" + MyFileName;
                        }
                    }
                }


                emp_adhar_details.employee_id = tbl_emp_personal_sec.employee_id;
                emp_adhar_details.aadha_card_name = tbl_emp_personal_sec.aadha_card_name;
                emp_adhar_details.aadha_card_number = tbl_emp_personal_sec.aadha_card_number;
                emp_adhar_details.is_deleted = 2;
                emp_adhar_details.created_by = tbl_emp_personal_sec.Created_by;
                emp_adhar_details.created_date = DateTime.Now;

                _context.tbl_emp_adhar_details.Attach(emp_adhar_details);
                _context.Entry(emp_adhar_details).State = EntityState.Added;
                await _context.SaveChangesAsync();



                objResult.StatusCode = 1;
                objResult.Message = "Employee Account details request sent to checker for approval...!";


                return Ok(objResult);
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }




        [HttpGet("GetEmployeeAccountDetails/{employee_id}")]
        [Authorize(Policy = nameof(enmMenuMaster.AccountDetails))]
        public async Task<IActionResult> GetEmployeeAccountDetails([FromRoute] int employee_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { employee_id });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }



                var data_bank_details = _context.tbl_emp_bank_details.Where(a => a.employee_id == employee_id && a.is_deleted == 0).Select(a => new { a.bank_id, a.bank_acc, a.branch_name, a.ifsc_code, a.payment_mode }).FirstOrDefault();
                var data_pan_details = _context.tbl_emp_pan_details.Where(a => a.employee_id == employee_id && a.is_deleted == 0).Select(a => new { a.pan_card_image, a.pan_card_name, a.pan_card_number }).FirstOrDefault();
                var data_adhar_details = _context.tbl_emp_adhar_details.Where(a => a.employee_id == employee_id && a.is_deleted == 0).Select(a => new { a.aadha_card_image, a.aadha_card_name, a.aadha_card_number }).FirstOrDefault();

                return Ok(new { bank_details = data_bank_details, pan_details = data_pan_details, adhar_details = data_adhar_details });
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }

        [HttpGet("GetEmployeeAccountDetailsForEmp/{employee_id}")]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> GetEmployeeAccountDetailsForEmp([FromRoute] int employee_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { employee_id });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }



                var data_bank_details = _context.tbl_emp_bank_details.Where(a => a.employee_id == employee_id && a.is_deleted == 0).Select(a => new { a.bank_id, a.bank_acc, a.branch_name, a.ifsc_code, a.payment_mode }).FirstOrDefault();
                var data_pan_details = _context.tbl_emp_pan_details.Where(a => a.employee_id == employee_id && a.is_deleted == 0).Select(a => new { a.pan_card_image, a.pan_card_name, a.pan_card_number }).FirstOrDefault();
                var data_adhar_details = _context.tbl_emp_adhar_details.Where(a => a.employee_id == employee_id && a.is_deleted == 0).Select(a => new { a.aadha_card_image, a.aadha_card_name, a.aadha_card_number }).FirstOrDefault();

                return Ok(new { bank_details = data_bank_details, pan_details = data_pan_details, adhar_details = data_adhar_details });
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 1;
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }


        [HttpGet("Get_PFGroup")]
        ////[Authorize(Policy = "3063")]
        public IActionResult Get_PFGroup()
        {
            try
            {
                List<object> list = new List<object>();
                foreach (enmPFGroup PaymentMode in Enum.GetValues(typeof(enmPFGroup)))
                {
                    int value = (int)Enum.Parse(typeof(enmPFGroup), Enum.GetName(typeof(enmPFGroup), PaymentMode));

                    Type type = PaymentMode.GetType();
                    MemberInfo[] memInfo = type.GetMember(PaymentMode.ToString());
                    if (memInfo != null && memInfo.Length > 0)
                    {
                        object[] attrs = (object[])memInfo[0].GetCustomAttributes(typeof(DescriptionAttribute), false);
                        if (attrs != null && attrs.Length > 0)
                        {
                            string strvalue = ((DescriptionAttribute)attrs[0]).Description;

                            list.Add(new
                            {

                                pf_group_id = value,
                                pf_group_name = strvalue
                            });
                        }
                    }
                }
                return Ok(list);
            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }

        [HttpGet("Get_VPFGroup")]

        public IActionResult Get_VPFGroup()
        {
            try
            {
                List<object> list = new List<object>();
                foreach (enmVPFGroup PaymentMode in Enum.GetValues(typeof(enmVPFGroup)))
                {
                    int value = (int)Enum.Parse(typeof(enmVPFGroup), Enum.GetName(typeof(enmVPFGroup), PaymentMode));

                    Type type = PaymentMode.GetType();
                    MemberInfo[] memInfo = type.GetMember(PaymentMode.ToString());
                    if (memInfo != null && memInfo.Length > 0)
                    {
                        object[] attrs = (object[])memInfo[0].GetCustomAttributes(typeof(DescriptionAttribute), false);
                        if (attrs != null && attrs.Length > 0)
                        {
                            string strvalue = ((DescriptionAttribute)attrs[0]).Description;

                            list.Add(new
                            {

                                vpf_group_id = value,
                                vpf_group_name = strvalue
                            });
                        }
                    }
                }
                return Ok(list);
            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }

        [Route("EmployeePfEsicDetails")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.ProvidentFund))]
        public async Task<IActionResult> EmployeePfEsicDetails(EployeePfEsicDetails tbl_emp_personal_sec)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {

                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { tbl_emp_personal_sec.employee_id ?? 0 });
                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }

                if (tbl_emp_personal_sec.is_pf_applicable == 1)
                {
                    switch (tbl_emp_personal_sec.pf_group)
                    {
                        case enmPFGroup.PercentageOnBasic:
                        case enmPFGroup.PercentageOnMinBasicSlab: break;
                        default:
                            objResult.StatusCode = 1;
                            objResult.Message = string.Format("select PF Group");
                            return Ok(objResult);
                    }
                    if (_context.tbl_emp_pf_details.Where(p => p.pf_number == tbl_emp_personal_sec.pf_number && p.pf_number != "NA" && p.is_deleted == 0 && p.employee_id != tbl_emp_personal_sec.employee_id && _clEmployeeDetail.EmpIDs.Contains(p.employee_id ?? 0)).Count() > 0)
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = string.Format("PF number already Exists");
                        return Ok(objResult);
                    }
                }
                if (tbl_emp_personal_sec.is_vpf_applicable == 1)
                {
                    switch (tbl_emp_personal_sec.vpf_Group)
                    {
                        case enmVPFGroup.BasicPercentage:
                        case enmVPFGroup.FixedAmount: break;
                        default:
                            objResult.StatusCode = 1;
                            objResult.Message = string.Format("select VPF Group");
                            return Ok(objResult);
                    }
                }

                if (tbl_emp_personal_sec.is_esic_applicable == 1)
                {
                    if (_context.tbl_emp_esic_details.Where(p => p.esic_number == tbl_emp_personal_sec.esic_number && p.esic_number != "NA" && p.is_deleted == 0 && p.employee_id != tbl_emp_personal_sec.employee_id && _clEmployeeDetail.EmpIDs.Contains(p.employee_id ?? 0)).Count() > 0)
                    {
                        objResult.StatusCode = 1;
                        objResult.Message = string.Format("ESIC number already Exists");
                        return Ok(objResult);
                    }
                }



                tbl_emp_pf_details emp_pf_details = new tbl_emp_pf_details();
                tbl_emp_pf_details obj_tbl_emp_pf_details = _context.tbl_emp_pf_details.OrderByDescending(a => a.pf_details_id).Where(a => a.employee_id == tbl_emp_personal_sec.employee_id).FirstOrDefault();
                if (obj_tbl_emp_pf_details != null)
                {
                    obj_tbl_emp_pf_details.is_deleted = 1;

                    _context.tbl_emp_pf_details.Attach(obj_tbl_emp_pf_details);
                    _context.Entry(obj_tbl_emp_pf_details).State = EntityState.Modified;
                    await _context.SaveChangesAsync();
                }


                emp_pf_details.is_pf_applicable = tbl_emp_personal_sec.is_pf_applicable;
                emp_pf_details.uan_number = tbl_emp_personal_sec.uan_number;
                emp_pf_details.pf_number = tbl_emp_personal_sec.pf_number;
                emp_pf_details.pf_group = tbl_emp_personal_sec.pf_group;
                emp_pf_details.is_vpf_applicable = tbl_emp_personal_sec.is_vpf_applicable;
                emp_pf_details.vpf_Group = tbl_emp_personal_sec.vpf_Group;
                emp_pf_details.vpf_amount = tbl_emp_personal_sec.vpf_amount;
                emp_pf_details.pf_celing = tbl_emp_personal_sec.pf_celing;
                emp_pf_details.bank_id = null; //tbl_emp_personal_sec.bank_id;
                emp_pf_details.ifsc_code = "";//tbl_emp_personal_sec.ifsc_code;
                emp_pf_details.bank_acc = "";// tbl_emp_personal_sec.bank_acc;
                emp_pf_details.employee_id = tbl_emp_personal_sec.employee_id;
                emp_pf_details.is_eps_applicable = tbl_emp_personal_sec.is_eps_applicable;
                emp_pf_details.is_deleted = 2;
                emp_pf_details.created_by = tbl_emp_personal_sec.created_by;
                emp_pf_details.created_date = DateTime.Now;

                _context.tbl_emp_pf_details.Attach(emp_pf_details);
                _context.Entry(emp_pf_details).State = EntityState.Added;
                await _context.SaveChangesAsync();





                tbl_emp_esic_details emp_esic_details = new tbl_emp_esic_details();
                tbl_emp_esic_details obj_tbl_emp_esic_details = _context.tbl_emp_esic_details.OrderByDescending(a => a.esic_details_id).Where(a => a.employee_id == tbl_emp_personal_sec.employee_id).FirstOrDefault();
                if (obj_tbl_emp_esic_details != null)
                {
                    obj_tbl_emp_esic_details.is_deleted = 1;

                    _context.tbl_emp_esic_details.Attach(obj_tbl_emp_esic_details);
                    _context.Entry(obj_tbl_emp_esic_details).State = EntityState.Modified;
                    await _context.SaveChangesAsync();
                }

                emp_esic_details.employee_id = tbl_emp_personal_sec.employee_id;
                emp_esic_details.is_esic_applicable = tbl_emp_personal_sec.is_esic_applicable;
                emp_esic_details.esic_number = tbl_emp_personal_sec.esic_number;
                emp_esic_details.is_deleted = 2;
                emp_esic_details.created_by = tbl_emp_personal_sec.created_by;
                emp_esic_details.created_date = DateTime.Now;


                _context.tbl_emp_esic_details.Attach(emp_esic_details);
                _context.Entry(emp_esic_details).State = EntityState.Added;
                await _context.SaveChangesAsync();

                objResult.StatusCode = 1;
                objResult.Message = "Employee UAN and ESIC details request sent to checker for approval...!";


                return Ok(objResult);
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 0;
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }

        [HttpGet("GetEmployeePfEsicAccDetailsReq")]
        //[Authorize(Policy=nameof(enmMenuMaster.ProvidentFund))]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> GetEmployeePfEsicAccDetailsReq()
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {
                var result = (from epfd in _context.tbl_emp_pf_details
                              join eed in _context.tbl_emp_esic_details on epfd.employee_id equals eed.employee_id
                              join ebd in _context.tbl_emp_bank_details on epfd.employee_id equals ebd.employee_id
                              join bd in _context.tbl_bank_master on ebd.bank_id equals bd.bank_id
                              join epd in _context.tbl_emp_pan_details on epfd.employee_id equals epd.employee_id
                              join ead in _context.tbl_emp_adhar_details on epfd.employee_id equals ead.employee_id
                              join eem in _context.tbl_employee_master on epfd.employee_id equals eem.employee_id
                              join eos in _context.tbl_emp_officaial_sec on epfd.employee_id equals eos.employee_id
                              where epfd.is_deleted == 2 && eed.is_deleted == 2 && ebd.is_deleted == 2 && epd.is_deleted == 2 && ead.is_deleted == 2 && eos.is_deleted == 0
                              select new
                              {
                                  pf_details = epfd,
                                  esic_details = eed,
                                  bank_details = ebd,
                                  pan_details = epd,
                                  adhar_details = ead,
                                  bank_name = bd.bank_name,
                                  emp_code_ = eem.emp_code,
                                  emp_name = eos.employee_first_name + ' ' + eos.employee_middle_name + ' ' + eos.employee_last_name
                              }).Distinct().ToList();


                return Ok(result);
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }


        [Route("ApproveEmpStatutoryRequests")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.ProvidentFund))]
        public IActionResult ApproveEmpStatutoryRequests([FromBody] EmployeeStatutoryDetail objSatuSec)
        {
            Response_Msg objResult = new Response_Msg();

            try
            {
                using (var tran = _context.Database.BeginTransaction())
                {
                    try
                    {
                        for (int i = 0; i < objSatuSec.pf_Ids.Count; i++)
                        {

                            //check req exist or not
                            var req = _context.tbl_emp_pf_details.Where(x => x.pf_details_id == Convert.ToInt32(objSatuSec.pf_Ids[i]) && x.is_deleted == 2).FirstOrDefault();
                            var req1 = _context.tbl_emp_esic_details.Where(x => x.esic_details_id == Convert.ToInt32(objSatuSec.esic_Ids[i]) && x.is_deleted == 2).FirstOrDefault();
                            var req2 = _context.tbl_emp_pan_details.Where(x => x.pan_details_id == Convert.ToInt32(objSatuSec.pan_Ids[i]) && x.is_deleted == 2).FirstOrDefault();
                            var req3 = _context.tbl_emp_adhar_details.Where(x => x.pan_details_id == Convert.ToInt32(objSatuSec.adhar_Ids[i]) && x.is_deleted == 2).FirstOrDefault();
                            var req4 = _context.tbl_emp_bank_details.Where(x => x.bank_details_id == Convert.ToInt32(objSatuSec.bank_Ids[i]) && x.is_deleted == 2).FirstOrDefault();

                            if (req == null || req1 == null || req2 == null || req3 == null || req4 == null)
                            {
                                objResult.StatusCode = 1;
                                objResult.Message = "Selected Qualification Request already approved or not exist. Please Retry after refreshing the page!!";
                                return Ok(objResult);
                            }
                            else
                            {
                                req.is_deleted = 0;
                                req1.is_deleted = 0;
                                req2.is_deleted = 0;
                                req3.is_deleted = 0;
                                req4.is_deleted = 0;
                                _context.tbl_emp_pf_details.UpdateRange(req);
                                _context.tbl_emp_esic_details.UpdateRange(req1);
                                _context.tbl_emp_pan_details.UpdateRange(req2);
                                _context.tbl_emp_adhar_details.UpdateRange(req3);
                                _context.tbl_emp_bank_details.UpdateRange(req4);
                            }
                        }

                        _context.SaveChanges();
                        tran.Commit();

                        objResult.StatusCode = 0;
                        objResult.Message = objSatuSec.is_deleted == 0 ? "Employee Statutory Section Requests approved successfully !!" : "Employee Statutory Section Requests Rejected successfully !!";
                        return Ok(objResult);
                    }
                    catch (Exception ex)
                    {
                        tran.Rollback();
                        objResult.StatusCode = 2;
                        objResult.Message = ex.Message;
                        return Ok(objResult);
                    }
                }
            }
            catch (Exception ex)
            {

                objResult.StatusCode = 2;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }

        [HttpGet("GetEmployeePfEsicDetails/{employee_id}")]
        //[Authorize(Policy=nameof(enmMenuMaster.ProvidentFund))]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> GetEmployeePfEsicDetails([FromRoute] int employee_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            try
            {
                var data = _clEmployeeDetail.EmpPermissionExists(new int[] { employee_id });


                if (!data.Key)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = string.Format("Unauthorize Access for ({0})...!", data.Value);
                    return Ok(objResult);
                }



                var data_pf_details = _context.tbl_emp_pf_details.Where(a => a.employee_id == employee_id && a.is_deleted == 0).Select(a => new { a.is_pf_applicable, a.uan_number, a.pf_number, a.pf_group, a.is_vpf_applicable, a.vpf_Group, a.vpf_amount, a.pf_celing, a.bank_id, a.ifsc_code, a.bank_acc, a.is_eps_applicable }).FirstOrDefault();
                var data_esic_details = _context.tbl_emp_esic_details.Where(a => a.employee_id == employee_id && a.is_deleted == 0).Select(a => new { a.is_esic_applicable, a.esic_number }).FirstOrDefault();

                return Ok(new { pf_details = data_pf_details, esic_details = data_esic_details });
            }
            catch (Exception ex)
            {
                objResult.Message = ex.ToString();
                return Ok(objResult);
            }
        }



        public EmployeeDetailListt CheckEmpAccountDetailsfromexcel(List<EployeeAccountDetailsForUpload> list)
        {
            List<EployeeAccountDetailsForUpload> missingdetaillist = new List<EployeeAccountDetailsForUpload>();
            List<EployeeAccountDetailsForUpload> adddblist = new List<EployeeAccountDetailsForUpload>();
            List<EployeeAccountDetailsForUpload> duplicatedetaillist = new List<EployeeAccountDetailsForUpload>();
            Response_Msg objresponse = new Response_Msg();

            StringBuilder MissingDtlMessage = new StringBuilder();

            string adhar_cardno = @"^[0-9]{12}$";
            Regex readhar_no = new Regex(adhar_cardno);

            string adharcardname = @"^[a-zA-Z'\s]{1,50}$";
            Regex re = new Regex(adharcardname);


            string pancardRegex = @"^[A-Z]{5}[0-9]{4}[A-Z]{1}$";
            Regex repan = new Regex(pancardRegex);


            string aadharcardRegex = @"^[0-9]{12}$";
            Regex readharno = new Regex(aadharcardRegex);

            try
            {
                MissingDtlMessage.Append("");

                using (var checktrans = _context.Database.BeginTransaction())
                {

                    try
                    {
                        for (int i = 0; i < list.Count; i++)
                        {
                            bool exist_ = false;
                            int payment_mode = 0;
                            int employee_id = 0;
                            int bank_id = 0;

                            MissingDtlMessage.Append(list[i].emp_code + " Detail:-");

                            if (string.IsNullOrEmpty(list[i].emp_code))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append("Emp Code is missing,");
                            }
                            else
                            {
                                var _emp_code_exist = _context.tbl_employee_master.OrderByDescending(x => x.employee_id).Where(a => a.emp_code == list[i].emp_code).FirstOrDefault();
                                if (_emp_code_exist != null)
                                {
                                    employee_id = _context.tbl_employee_master.Where(x => x.emp_code == list[i].emp_code && x.is_active == 1).Select(p => p.employee_id).FirstOrDefault();
                                    if (employee_id == 0)
                                    {
                                        exist_ = true;
                                        MissingDtlMessage.Append("Emp Code not exist,");
                                    }
                                }
                                else
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Emp Code not exist,");
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].pan_card_name))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" PAN Card Name is missing,");
                            }
                            else
                            {
                                //validate pan name
                                if (!re.IsMatch(list[i].pan_card_name))
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Invalid PAN Name.,");
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].pan_card_number))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" PAN Card Number,");
                            }
                            else
                            {
                                var _existpannumer = _context.tbl_emp_pan_details.OrderByDescending(x => x.pan_details_id).Where(x => x.pan_card_number == list[i].pan_card_number && x.is_deleted == 0).FirstOrDefault();
                                if (_existpannumer != null)
                                {
                                    // _existpancard = true;
                                    exist_ = true;
                                    MissingDtlMessage.Append(" PAN Number already exist,");
                                }
                                else
                                {

                                    //validate pan no
                                    if (!repan.IsMatch(list[i].pan_card_number))
                                    {
                                        exist_ = true;
                                        MissingDtlMessage.Append(" Invalid PAN Card No.,");
                                    }
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].aadha_card_name))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" Adhaar Card Name,");
                            }
                            else
                            {
                                //validate adhar card name

                                if (!re.IsMatch(list[i].aadha_card_name))
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Invalid Adhaar Card Name,");
                                }

                            }

                            if (string.IsNullOrEmpty(list[i].aadha_card_number))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" Adhaar Card Number,");
                            }
                            else
                            {
                                var _existadharnumber1 = _context.tbl_emp_adhar_details.OrderByDescending(x => x.pan_details_id).Where(x => x.aadha_card_number == list[i].aadha_card_number && x.is_deleted == 0).FirstOrDefault();
                                if (_existadharnumber1 != null)
                                {
                                    //_existadharnumber = true;
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Adhaar Card Numer already exist,");
                                }
                                else
                                {
                                    //validate adhar no
                                    if (!readharno.IsMatch(list[i].aadha_card_number))
                                    {
                                        exist_ = true;
                                        MissingDtlMessage.Append(" Invalid Adhaar Card No.,");
                                    }
                                }
                            }

                            //Start check Account Details
                            if (string.IsNullOrEmpty(list[i].bank_id))
                            {
                                // _exist_bankname = true;
                                exist_ = true;
                                MissingDtlMessage.Append("Bank Name Cannot be Blank");
                            }
                            else
                            {
                                bank_id = _context.tbl_bank_master.Where(x => x.is_deleted == 0 && x.bank_name.Trim().ToUpper() == list[i].bank_id.Trim().ToUpper() && x.bank_status == 1).Select(p => p.bank_id).FirstOrDefault();
                                if (bank_id == 0)
                                {
                                    // _exist_bankname = true;
                                    exist_ = true;
                                    MissingDtlMessage.Append("Invalid Bank name");
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].bank_acc))
                            {
                                //_bank_account_no = true;
                                exist_ = true;
                                MissingDtlMessage.Append("Account No cannot be blank");
                            }
                            else
                            {
                                //validate primary email
                                string bank_acc = @"^[0-9]{9,18}$";

                                Regex rebank = new Regex(bank_acc);
                                if (!rebank.IsMatch(list[i].bank_acc))
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Bank Account No.,");
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].ifsc_code))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append("IFSC Code Cannot be blank");
                            }
                            else
                            {
                                // validate ifsc code
                                string ifsccodee = @"^[A-Za-z]{4}0[A-Z0-9a-z]{6}$";

                                Regex reifsc = new Regex(ifsccodee);
                                if (!reifsc.IsMatch(list[i].ifsc_code))
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append("Invalid IFSC Code");
                                }
                            }
                            if (string.IsNullOrEmpty(list[i].payment_mode))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append("Payment Mode cannot be blank");
                            }
                            else
                            {
                                // 1 for Female , 2 Male , 3 Other 
                                payment_mode = list[i].payment_mode.Trim().ToUpper() == "BANK TRANSFER" ? 1 : list[i].payment_mode.Trim().ToUpper() == "CHEQUE" ? 2 : list[i].payment_mode.Trim().ToUpper() == "CASH" || list[i].payment_mode.Trim().ToUpper() == "DEMAND DRAFT" ? 3 : 0;
                                if (payment_mode == 0)
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Payment Mode,");
                                }
                            }

                            if (exist_)
                            {
                                EployeeAccountDetailsForUpload objlist = new EployeeAccountDetailsForUpload();
                                objlist.employee_id = employee_id;
                                objlist.emp_code = list[i].emp_code;
                                objlist.pan_card_name = list[i].pan_card_name;
                                objlist.pan_card_number = list[i].pan_card_number;
                                objlist.aadha_card_name = list[i].aadha_card_name;
                                objlist.aadha_card_number = list[i].aadha_card_number;
                                objlist.payment_mode = payment_mode.ToString();
                                objlist.bank_id = bank_id.ToString();
                                objlist.branch_name = list[i].branch_name;
                                objlist.ifsc_code = list[i].ifsc_code;
                                objlist.bank_acc = list[i].bank_acc;

                                missingdetaillist.Add(objlist);

                                MissingDtlMessage.Append("</br>");
                            }
                            else
                            {
                                bool _checkduplicate = adddblist.Any(x => x.emp_code == list[i].emp_code || x.pan_card_number == list[i].pan_card_number || x.aadha_card_number == list[i].aadha_card_number || x.bank_acc == list[i].bank_acc);

                                if (_checkduplicate) // Add in this list if any one field detail is found duplicate in list
                                {
                                    EployeeAccountDetailsForUpload objduplist = new EployeeAccountDetailsForUpload();

                                    objduplist.employee_id = employee_id;
                                    objduplist.emp_code = list[i].emp_code;
                                    objduplist.pan_card_name = list[i].pan_card_name;
                                    objduplist.pan_card_number = list[i].pan_card_number;
                                    objduplist.aadha_card_name = list[i].aadha_card_name;
                                    objduplist.aadha_card_number = list[i].aadha_card_number;
                                    objduplist.payment_mode = payment_mode.ToString();
                                    objduplist.bank_id = bank_id.ToString();
                                    objduplist.branch_name = list[i].branch_name;
                                    objduplist.ifsc_code = list[i].ifsc_code;
                                    objduplist.bank_acc = list[i].bank_acc;

                                    duplicatedetaillist.Add(objduplist);
                                    MissingDtlMessage.Append(" Details Must be Unique</br>");
                                }
                                else
                                {
                                    EployeeAccountDetailsForUpload objlist = new EployeeAccountDetailsForUpload();
                                    objlist.employee_id = employee_id;
                                    objlist.emp_code = list[i].emp_code;
                                    objlist.pan_card_name = list[i].pan_card_name;
                                    objlist.pan_card_number = list[i].pan_card_number;
                                    objlist.aadha_card_name = list[i].aadha_card_name;
                                    objlist.aadha_card_number = list[i].aadha_card_number;
                                    objlist.payment_mode = payment_mode.ToString();
                                    objlist.bank_id = bank_id.ToString();
                                    objlist.branch_name = list[i].branch_name;
                                    objlist.ifsc_code = list[i].ifsc_code;
                                    objlist.bank_acc = list[i].bank_acc;

                                    adddblist.Add(objlist);
                                }

                            }

                        }

                        checktrans.Commit();
                    }
                    catch (Exception ex)
                    {
                        checktrans.Rollback();
                    }
                }


            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missingAccountdtlc = missingdetaillist, duplicateAccountdtl = duplicatedetaillist, addbempAccountdtl = adddblist, MissingDtlMessage = MissingDtlMessage.ToString() };
        }

        public EmployeeDetailListt CheckEmpUanEsicDetailsfromexcel(List<EployeeUanEsicDetailsForUpload> list)
        {
            List<EployeeUanEsicDetailsForUpload> missingdetaillist = new List<EployeeUanEsicDetailsForUpload>();
            List<EployeeUanEsicDetailsForUpload> adddblist = new List<EployeeUanEsicDetailsForUpload>();
            List<EployeeUanEsicDetailsForUpload> duplicatedetaillist = new List<EployeeUanEsicDetailsForUpload>();
            Response_Msg objresponse = new Response_Msg();

            StringBuilder MissingDtlMessage = new StringBuilder();
            try
            {
                MissingDtlMessage.Append("");

                using (var checktrans = _context.Database.BeginTransaction())
                {

                    try
                    {
                        for (int i = 0; i < list.Count; i++)
                        {
                            bool exist_ = false;
                            int employee_id = 0;
                            int bank_id = 0;
                            int pf_group = 0;
                            int vpf_group = 0;
                            MissingDtlMessage.Append(list[i].emp_code + " Detail:-");

                            if (string.IsNullOrEmpty(list[i].emp_code))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append("Emp Code is missing,");
                            }
                            else
                            {
                                var _emp_code_exist = _context.tbl_employee_master.OrderByDescending(x => x.employee_id).Where(a => a.emp_code == list[i].emp_code).FirstOrDefault();
                                if (_emp_code_exist != null)
                                {
                                    employee_id = _context.tbl_employee_master.Where(x => x.emp_code == list[i].emp_code && x.is_active == 1).Select(p => p.employee_id).FirstOrDefault();
                                    if (employee_id == 0)
                                    {
                                        exist_ = true;
                                        MissingDtlMessage.Append("Emp Code not exist,");
                                    }
                                }
                                else
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Emp Code not exist,");
                                }
                            }


                            if (string.IsNullOrEmpty(list[i].uan_number))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" UAN Number, ");
                            }
                            if (string.IsNullOrEmpty(list[i].pf_number))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" PF Number, ");
                            }
                            //Start check Account Details
                            if (string.IsNullOrEmpty(list[i].bank_id))
                            {
                                // _exist_bankname = true;
                                exist_ = true;
                                MissingDtlMessage.Append("Bank Name Cannot be Blank");
                            }
                            else
                            {
                                bank_id = _context.tbl_bank_master.Where(x => x.is_deleted == 0 && x.bank_name.Trim().ToUpper() == list[i].bank_id.Trim().ToUpper() && x.bank_status == 1).Select(p => p.bank_id).FirstOrDefault();
                                if (bank_id == 0)
                                {
                                    // _exist_bankname = true;
                                    exist_ = true;
                                    MissingDtlMessage.Append("Invalid Bank name");
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].bank_acc))
                            {
                                //_bank_account_no = true;
                                exist_ = true;
                                MissingDtlMessage.Append("Account No cannot be blank");
                            }
                            else
                            {
                                //validate primary email
                                string bank_acc = @"^[0-9]{9,18}$";

                                Regex re = new Regex(bank_acc);
                                if (!re.IsMatch(list[i].bank_acc))
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Bank Account No.,");
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].ifsc_code))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append("IFSC Code Cannot be blank");
                            }
                            else
                            {
                                // validate ifsc code
                                string ifsccodee = @"^[A-Za-z]{4}0[A-Z0-9a-z]{6}$";

                                Regex re = new Regex(ifsccodee);
                                if (!re.IsMatch(list[i].ifsc_code))
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append("Invalid IFSC Code");
                                }
                            }
                            if (string.IsNullOrEmpty(list[i].pf_group))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append("PF Group cannot be blank");
                            }
                            else
                            {
                                // 1 for Female , 2 Male , 3 Other 
                                pf_group = list[i].pf_group.Trim().ToUpper() == "BANK TRANSFER" ? 1 : list[i].pf_group.Trim().ToUpper() == "12% OF BASIC" ? 2 : 0;
                                if (pf_group == 0)
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" PF Group, ");
                                }
                            }

                            if (string.IsNullOrEmpty(list[i].vpf_Group))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append("VPF Group cannot be blank");
                            }
                            else
                            {
                                // 1 for Female , 2 Male , 3 Other 
                                vpf_group = list[i].vpf_Group.Trim().ToUpper() == "FIXED AMOUNT" ? 1 : list[i].vpf_Group.Trim().ToUpper() == "BASIC PERCENTAGE" ? 2 : 0;
                                if (pf_group == 0)
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" VPF Group, ");
                                }
                            }

                            if (exist_)
                            {
                                EployeeUanEsicDetailsForUpload objlist = new EployeeUanEsicDetailsForUpload();
                                objlist.employee_id = employee_id;
                                objlist.emp_code = list[i].emp_code;
                                objlist.uan_number = list[i].uan_number;
                                objlist.pf_number = list[i].pf_number;
                                objlist.pf_group = pf_group.ToString();
                                objlist.vpf_Group = vpf_group.ToString();
                                objlist.bank_id = bank_id.ToString();
                                objlist.pf_celing = list[i].pf_celing;
                                objlist.ifsc_code = list[i].ifsc_code;
                                objlist.bank_acc = list[i].bank_acc;
                                objlist.esic_number = list[i].esic_number;
                                objlist.vpf_amount = list[i].vpf_amount;
                                missingdetaillist.Add(objlist);

                                MissingDtlMessage.Append("</br>");
                            }
                            else
                            {
                                bool _checkduplicate = adddblist.Any(x => x.emp_code == list[i].emp_code || x.uan_number == list[i].uan_number || x.pf_number == list[i].pf_number || x.bank_acc == list[i].bank_acc);

                                if (_checkduplicate) // Add in this list if any one field detail is found duplicate in list
                                {
                                    EployeeUanEsicDetailsForUpload objduplist = new EployeeUanEsicDetailsForUpload();

                                    objduplist.employee_id = employee_id;
                                    objduplist.emp_code = list[i].emp_code;
                                    objduplist.uan_number = list[i].uan_number;
                                    objduplist.pf_number = list[i].pf_number;
                                    objduplist.pf_group = pf_group.ToString();
                                    objduplist.vpf_Group = vpf_group.ToString();
                                    objduplist.bank_id = bank_id.ToString();
                                    objduplist.pf_celing = list[i].pf_celing;
                                    objduplist.ifsc_code = list[i].ifsc_code;
                                    objduplist.bank_acc = list[i].bank_acc;
                                    objduplist.esic_number = list[i].esic_number;
                                    objduplist.vpf_amount = list[i].vpf_amount;
                                    duplicatedetaillist.Add(objduplist);
                                    MissingDtlMessage.Append(" Details Must be Unique</br>");
                                }
                                else
                                {
                                    EployeeUanEsicDetailsForUpload objlist = new EployeeUanEsicDetailsForUpload();
                                    objlist.employee_id = employee_id;
                                    objlist.emp_code = list[i].emp_code;
                                    objlist.uan_number = list[i].uan_number;
                                    objlist.pf_number = list[i].pf_number;
                                    objlist.pf_group = pf_group.ToString();
                                    objlist.vpf_Group = vpf_group.ToString();
                                    objlist.bank_id = bank_id.ToString();
                                    objlist.pf_celing = list[i].pf_celing;
                                    objlist.ifsc_code = list[i].ifsc_code;
                                    objlist.bank_acc = list[i].bank_acc;
                                    objlist.esic_number = list[i].esic_number;
                                    objlist.vpf_amount = list[i].vpf_amount;
                                    adddblist.Add(objlist);
                                }

                            }

                        }

                        checktrans.Commit();
                    }
                    catch (Exception ex)
                    {
                        checktrans.Rollback();
                    }
                }


            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missingUanEsictlc = missingdetaillist, duplicateUanEsicdtl = duplicatedetaillist, addbempUanEsicdtl = adddblist, MissingDtlMessage = MissingDtlMessage.ToString() };
        }

        public EmployeeDetailListt CheckEmpManualAttendanceDetailsfromexcel(List<EployeeManualAttendanceDetails> list)
        {
            List<tbl_attendance_details_manual> missingdetaillist = new List<tbl_attendance_details_manual>();
            List<tbl_attendance_details_manual> adddblist = new List<tbl_attendance_details_manual>();
            List<tbl_attendance_details_manual> duplicatedetaillist = new List<tbl_attendance_details_manual>();
            Response_Msg objresponse = new Response_Msg();

            StringBuilder MissingDtlMessage = new StringBuilder();
            StringBuilder CurrentlMissingDtlMessage = new StringBuilder("");

            try
            {
                MissingDtlMessage.Append("");


                {

                    var RequiredEmp = list.Select(p => p.emp_code);

                    var _emp_code_exist = _context.tbl_employee_master.Where(a => RequiredEmp.Contains(a.emp_code)).Select(p => new { p.employee_id, p.emp_code }).ToList();

                    try
                    {
                        for (int i = 0; i < list.Count; i++)
                        {
                            CurrentlMissingDtlMessage.Clear();
                            bool exist_ = false;
                            int employee_id = 0;
                            int user_id = 0;
                            int bank_id = 0;
                            int pf_group = 0;
                            int vpf_group = 0;
                            int day_status = 0;
                            CurrentlMissingDtlMessage.Append(list[i].emp_code + " Detail:-");

                            if (string.IsNullOrEmpty(list[i].emp_code))
                            {
                                exist_ = true;
                                CurrentlMissingDtlMessage.Append("Emp Code is missing,");
                            }
                            else
                            {

                                if (_emp_code_exist.Any(p => p.emp_code.Trim().ToLower() == list[i].emp_code.Trim().ToLower()))
                                {
                                    employee_id = _emp_code_exist.FirstOrDefault(p => p.emp_code.Trim().ToLower() == list[i].emp_code.Trim().ToLower()).employee_id;
                                    if (employee_id == 0)
                                    {
                                        exist_ = true;
                                        CurrentlMissingDtlMessage.Append("Emp Code not exist,");
                                    }
                                }
                                else
                                {
                                    exist_ = true;
                                    CurrentlMissingDtlMessage.Append(" Emp Code not exist,");
                                }
                            }


                            if (Convert.ToDateTime(list[i].attendance_dt).ToString() == "")
                            {
                                exist_ = true;
                                CurrentlMissingDtlMessage.Append(" Attendance Date  cannot be blank, ");
                            }
                            if (Convert.ToDateTime(list[i].start_in).ToString() == "")
                            {
                                exist_ = true;
                                CurrentlMissingDtlMessage.Append(" Punch In  cannot be blank, ");
                            }
                            if (Convert.ToDateTime(list[i].start_out).ToString() == "")
                            {
                                exist_ = true;
                                CurrentlMissingDtlMessage.Append(" Punch Out  cannot be blank, ");
                            }
                            if (string.IsNullOrEmpty(list[i].day_status))
                            {
                                exist_ = true;
                                CurrentlMissingDtlMessage.Append(" Attendance Status, ");
                            }
                            if (string.IsNullOrEmpty(list[i].day_status))
                            {
                                exist_ = true;
                                CurrentlMissingDtlMessage.Append("Attendance Status cannot be blank");
                            }
                            else
                            {
                                day_status = list[i].day_status.Trim().ToUpper() == "PRESENT" ? 1 : list[i].day_status.Trim().ToUpper() == "ABSENT" ? 2 : list[i].day_status.Trim().ToUpper() == "LEAVE" ? 3 : list[i].day_status.Trim().ToUpper() == "PRESENT-HALF DAY ABSENT" ? 4 : list[i].day_status.Trim().ToUpper() == "HALF DAY PRESENT- HALF DAY LEAVE" ? 5 : list[i].day_status.Trim().ToUpper() == "HALF DAY LEAVE-HALFDAY ABSENT" ? 6 : 0;
                                if (day_status == 0)
                                {
                                    exist_ = true;
                                    CurrentlMissingDtlMessage.Append(" Attendance Status, ");
                                }
                            }

                            if (exist_)
                            {
                                MissingDtlMessage.Append(CurrentlMissingDtlMessage);
                                tbl_attendance_details_manual objlist = new tbl_attendance_details_manual();
                                objlist.user_id = user_id;
                                objlist.attendance_dt = list[i].attendance_dt;
                                objlist.start_in = list[i].start_in;
                                objlist.emp_id = employee_id;
                                objlist.start_out = list[i].start_out;
                                objlist.day_status = Convert.ToByte(day_status);
                                objlist.entry_date = DateTime.Now;

                                missingdetaillist.Add(objlist);

                                MissingDtlMessage.Append("</br>");
                            }
                            else
                            {
                                bool _checkduplicate = adddblist.Any(x => x.emp_id == employee_id && x.attendance_dt == list[i].attendance_dt);

                                if (_checkduplicate) // Add in this list if any one field detail is found duplicate in list
                                {
                                    tbl_attendance_details_manual objduplist = new tbl_attendance_details_manual();

                                    objduplist.user_id = user_id;
                                    objduplist.attendance_dt = list[i].attendance_dt;
                                    objduplist.start_in = list[i].start_in;
                                    objduplist.user_id = user_id;
                                    objduplist.emp_id = employee_id;
                                    objduplist.start_out = list[i].start_out;
                                    objduplist.day_status = Convert.ToByte(day_status);
                                    objduplist.entry_date = DateTime.Now;

                                    duplicatedetaillist.Add(objduplist);
                                    MissingDtlMessage.Append(" Details Must be Unique</br>");
                                }
                                else
                                {
                                    tbl_attendance_details_manual objlist = new tbl_attendance_details_manual();

                                    objlist.attendance_dt = list[i].attendance_dt;
                                    objlist.start_in = list[i].start_in;
                                    objlist.user_id = user_id;
                                    objlist.emp_id = employee_id;
                                    objlist.start_out = list[i].start_out;
                                    objlist.day_status = Convert.ToByte(day_status);
                                    objlist.entry_date = DateTime.Now;
                                    adddblist.Add(objlist);
                                }

                            }

                        }


                    }
                    catch (Exception ex)
                    {

                    }
                }


            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missinAttendancetlc = missingdetaillist, duplicateAttendancedtl = duplicatedetaillist, addbempAttendancedtl = adddblist, MissingDtlMessage = MissingDtlMessage.ToString() };

        }


        public EmployeeDetailListt CheckEmpManualAttendanceStatusDetailsfromexcel(List<EployeeManualAttendanceDetails> list)
        {
            List<EployeeManualAttendanceDetails> missingdetaillist = new List<EployeeManualAttendanceDetails>();
            List<EployeeManualAttendanceDetails> adddblist = new List<EployeeManualAttendanceDetails>();
            List<EployeeManualAttendanceDetails> duplicatedetaillist = new List<EployeeManualAttendanceDetails>();
            List<EployeeManualAttendanceDetails> issuedetaillist = new List<EployeeManualAttendanceDetails>();

            Response_Msg objresponse = new Response_Msg();

            StringBuilder MissingDtlMessage = new StringBuilder();
            try
            {
                //MissingDtlMessage.Append("");

                using (var checktrans = _context.Database.BeginTransaction())
                {

                    try
                    {
                        for (int i = 0; i < list.ToList().Count; i++)
                        {
                            bool exist_ = false;
                            int employee_id = 0;
                            int user_id = 0;
                            int day_status = 0;

                            //MissingDtlMessage.Append(list[i].emp_code + " Detail:-");

                            if (string.IsNullOrEmpty(list[i].emp_code) || list[i].emp_code.ToUpper() == "NA" || list[i].emp_code.ToUpper() == "N.A" || list[i].emp_code.ToUpper() == "N.A.")
                            {
                                list[i].error_message = string.Format("Employee Code cannot be blank... ");
                                issuedetaillist.Add(list[i]);
                                //list.RemoveAt(i);
                                //exist_ = true;
                                MissingDtlMessage.Append("Employee Code cannot be blank... ");
                                continue;
                            }
                            else
                            {
                                var _emp_code_exist = _context.tbl_employee_master.OrderByDescending(x => x.employee_id).Where(a => a.emp_code == list[i].emp_code).FirstOrDefault();
                                if (_emp_code_exist != null)
                                {
                                    employee_id = _context.tbl_employee_master.Where(x => x.emp_code == list[i].emp_code && x.is_active == 1).Select(p => p.employee_id).FirstOrDefault();
                                    if (employee_id == 0)
                                    {
                                        list[i].error_message = string.Format("Emp Code not exist... ");
                                        issuedetaillist.Add(list[i]);
                                        //list.RemoveAt(i);
                                        //exist_ = true;
                                        MissingDtlMessage.Append("Emp Code not exist..");
                                        continue;
                                    }
                                    else
                                    {
                                        user_id = _context.tbl_user_master.Where(a => a.employee_id == employee_id & a.is_active == 1).Select(a => a.user_id).FirstOrDefault();
                                    }
                                }
                                else
                                {
                                    list[i].error_message = string.Format("Emp Code not exist... ");
                                    issuedetaillist.Add(list[i]);
                                    //list.RemoveAt(i);
                                    //exist_ = true;
                                    MissingDtlMessage.Append(" Emp Code not exist...");
                                    continue;
                                }
                            }


                            if (Convert.ToDateTime(list[i].attendance_dt).ToString() == "")
                            {
                                list[i].error_message = string.Format(" Attendance Date cannot be blank.... ");
                                issuedetaillist.Add(list[i]);
                                //list.RemoveAt(i);
                                //exist_ = true;
                                MissingDtlMessage.Append(" Attendance Date cannot be blank... ");
                                continue;
                            }
                            if (list[i].attendance_dt == DateTime.MinValue)
                            {
                                list[i].error_message = string.Format(" Invalid Attendance Date.... ");
                                issuedetaillist.Add(list[i]);
                                //list.RemoveAt(i);
                                //exist_ = true;
                                MissingDtlMessage.Append(" Attendance Date cannot be blank... ");
                                continue;
                            }


                            if (string.IsNullOrEmpty(list[i].day_status))
                            {
                                list[i].error_message = string.Format("Attendance Status cannot be blank.... ");
                                issuedetaillist.Add(list[i]);
                                //list.RemoveAt(i);
                                //exist_ = true;
                                MissingDtlMessage.Append("Attendance Status cannot be blank");
                                continue;
                            }
                            else
                            {
                                day_status = list[i].day_status.Trim().ToUpper() == "PRESENT" ? 1 : list[i].day_status.Trim().ToUpper() == "ABSENT" ? 2 : list[i].day_status.Trim().ToUpper() == "LEAVE" ? 3 : list[i].day_status.Trim().ToUpper() == "PRESENT-HALF DAY ABSENT" ? 4 : list[i].day_status.Trim().ToUpper() == "HALF DAY PRESENT- HALF DAY LEAVE" ? 5 : list[i].day_status.Trim().ToUpper() == "HALF DAY LEAVE-HALFDAY ABSENT" ? 6 : 0;
                                if (day_status == 0)
                                {
                                    list[i].error_message = string.Format("Invalid Attendance Status... ");
                                    issuedetaillist.Add(list[i]);
                                    //list.RemoveAt(i);
                                    //exist_ = true;
                                    MissingDtlMessage.Append(" Invalid Attendance Status.. ");
                                    continue;
                                }
                            }

                            if (exist_)
                            {
                                EployeeManualAttendanceDetails objlist = new EployeeManualAttendanceDetails();
                                objlist.user_id = user_id;
                                objlist.attendance_dt = list[i].attendance_dt;
                                objlist.emp_id = employee_id;
                                objlist.day_status = Convert.ToString(day_status);
                                objlist.entry_date = DateTime.Now;

                                missingdetaillist.Add(objlist);

                                MissingDtlMessage.Append("</br>");
                            }
                            else
                            {
                                bool _checkduplicate = adddblist.Any(x => x.emp_id == employee_id && x.attendance_dt == list[i].attendance_dt);

                                if (_checkduplicate)
                                {
                                    list[i].error_message = string.Format("Duplicate Record..");
                                    issuedetaillist.Add(list[i]);
                                    //list.RemoveAt(i);
                                    //exist_ = true;
                                    MissingDtlMessage.Append(" Duplicate Record..");
                                    continue;
                                }

                                EployeeManualAttendanceDetails objlist = new EployeeManualAttendanceDetails();

                                objlist.attendance_dt = list[i].attendance_dt;
                                objlist.user_id = user_id;
                                objlist.emp_id = employee_id;
                                objlist.day_status = Convert.ToString(day_status);
                                objlist.entry_date = DateTime.Now;
                                adddblist.Add(objlist);
                            }

                        }

                        checktrans.Commit();
                    }
                    catch (Exception ex)
                    {
                        checktrans.Rollback();
                    }
                }


            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missinAttendancetlist = missingdetaillist, duplicateAttendancelist = duplicatedetaillist, addbempAttendancelist = adddblist, MissingDtlMessage = MissingDtlMessage.ToString(), issueAttendencelist = issuedetaillist, objresponse = new Response_Msg() };

        }

        public EmployeeDetailListt CheckEmpdDeleteManualAttendanceDetailsfromexcel(List<EployeeManualAttendanceDetails> list)
        {
            List<tbl_attendance_details_manual> missingdetaillist = new List<tbl_attendance_details_manual>();
            List<tbl_attendance_details_manual> adddblist = new List<tbl_attendance_details_manual>();
            List<tbl_attendance_details_manual> duplicatedetaillist = new List<tbl_attendance_details_manual>();
            Response_Msg objresponse = new Response_Msg();

            StringBuilder MissingDtlMessage = new StringBuilder();
            try
            {
                MissingDtlMessage.Append("");

                using (var checktrans = _context.Database.BeginTransaction())
                {

                    try
                    {
                        for (int i = 0; i < list.Count; i++)
                        {
                            bool exist_ = false;
                            int employee_id = 0;
                            int user_id = 0;

                            int day_status = 0;
                            MissingDtlMessage.Append(list[i].emp_code + " Detail:-");

                            if (string.IsNullOrEmpty(list[i].emp_code))
                            {
                                exist_ = true;
                                MissingDtlMessage.Append("Emp Code is missing,");
                            }
                            else
                            {
                                var _emp_code_exist = _context.tbl_employee_master.OrderByDescending(x => x.employee_id).Where(a => a.emp_code == list[i].emp_code).FirstOrDefault();
                                if (_emp_code_exist != null)
                                {
                                    employee_id = _context.tbl_employee_master.Where(x => x.emp_code == list[i].emp_code && x.is_active == 1).Select(p => p.employee_id).FirstOrDefault();
                                    if (employee_id == 0)
                                    {
                                        exist_ = true;
                                        MissingDtlMessage.Append("Emp Code not exist,");
                                    }
                                    else
                                    {
                                        user_id = _context.tbl_user_master.Where(a => a.employee_id == employee_id & a.is_active == 1).Select(a => a.user_id).FirstOrDefault();
                                    }
                                }
                                else
                                {
                                    exist_ = true;
                                    MissingDtlMessage.Append(" Emp Code not exist,");
                                }
                            }


                            if (Convert.ToDateTime(list[i].attendance_dt).ToString() == "")
                            {
                                exist_ = true;
                                MissingDtlMessage.Append(" Attendance Date  cannot be blank, ");
                            }


                            if (exist_)
                            {
                                tbl_attendance_details_manual objlist = new tbl_attendance_details_manual();
                                objlist.user_id = user_id;
                                objlist.attendance_dt = list[i].attendance_dt;
                                objlist.emp_id = employee_id;
                                objlist.entry_date = DateTime.Now;

                                missingdetaillist.Add(objlist);

                                MissingDtlMessage.Append("</br>");
                            }
                            else
                            {
                                bool _checkduplicate = adddblist.Any(x => x.emp_id == list[i].emp_id || x.attendance_dt == list[i].attendance_dt);


                                tbl_attendance_details_manual objlist = new tbl_attendance_details_manual();

                                objlist.attendance_dt = list[i].attendance_dt;
                                objlist.user_id = user_id;
                                objlist.emp_id = employee_id;
                                objlist.entry_date = DateTime.Now;
                                adddblist.Add(objlist);


                            }

                        }

                        checktrans.Commit();
                    }
                    catch (Exception ex)
                    {
                        checktrans.Rollback();
                    }
                }


            }
            catch (Exception ex)
            {

            }

            return new EmployeeDetailListt { missinAttendancetlc = missingdetaillist, duplicateAttendancedtl = duplicatedetaillist, addbempAttendancedtl = adddblist, MissingDtlMessage = MissingDtlMessage.ToString() };

        }


    #region ** START BY SUPRIYA, PREVIOUS EMPLOYEMENT DETAL ON 01-06-2020 **
        [Route("Save_Previous_EmployementDetail")]
        [HttpPost]
        ////[Authorize(Policy = "3067")]
        public IActionResult Save_Previous_EmployementDetail([FromBody] tbl_emp_prev_employement objprev_emp)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                var exist = _context.tbl_emp_prev_employement.Where(x => x.is_deleted == 0 && x.emp_id == objprev_emp.emp_id && x.pr_comp_name.Trim().ToUpper() == objprev_emp.pr_comp_name.Trim().ToUpper()).FirstOrDefault();
                if (exist != null)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Company Name already exist";
                }
                else
                {
                    objprev_emp.is_deleted = 0;
                    objprev_emp.created_dt = DateTime.Now;
                    objprev_emp.last_modified_by = 0;
                    objprev_emp.last_modifed_dt = Convert.ToDateTime("01-01-2000");

                    _context.Entry(objprev_emp).State = EntityState.Added;
                    _context.SaveChanges();

                    objresponse.StatusCode = 0;
                    objresponse.Message = "Previous Employement detail successfully saved";

                }
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
            }
            return Ok(objresponse);
        }

        [Route("Get_Previous_EmployementDetail/{prev_id}/{emp_id}")]
        [HttpGet]
        ////[Authorize(Policy ="3068")]
        public IActionResult Get_Previous_EmployementDetail([FromRoute]  int prev_id, int emp_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {
                if (prev_id > 0)
                {
                    var data = _context.tbl_emp_prev_employement.Where(x => x.emp_pr_employment_id == prev_id && x.emp_id == emp_id && x.is_deleted == 0).Select(p => new
                    {

                        p.emp_pr_employment_id,
                        p.current_comp_id,
                        p.comp_mstr.company_name,
                        p.emp_id,
                        p.pr_comp_name,
                        p.pr_comp_address,
                        p.pr_comp_doj,
                        p.pr_comp_relieve_dt,
                        p.is_relieved,
                        p.designation,
                        p.salary,
                        p.job_type,
                        p.relieve_reason,
                        p.reporting_to,
                        p.reporting_name,
                        p.rpting_no,
                        p.rpting_email,
                        p.remarks,
                        p.created_dt,
                        p.last_modifed_dt,
                        p.total_exp,
                        p.relevant_exp,
                    }).FirstOrDefault();

                    return Ok(data);
                }
                else
                {
                    var data = _context.tbl_emp_prev_employement.Where(x => x.is_deleted == 0 && x.emp_id == emp_id).Select(p => new
                    {

                        p.emp_pr_employment_id,
                        p.comp_mstr.company_name,
                        p.emp_id,
                        p.pr_comp_name,
                        p.pr_comp_address,
                        p.pr_comp_doj,
                        p.pr_comp_relieve_dt,
                        is_relieved = p.is_relieved == 1 ? "Yes" : p.is_relieved == 2 ? "No" : p.is_relieved == 3 ? "Pending" : "-",
                        p.designation,
                        p.salary,
                        job_type = p.job_type == 1 ? "Full Time" : p.job_type == 2 ? "Part Time" : "-",
                        p.relieve_reason,
                        p.reporting_to,
                        p.reporting_name,
                        p.rpting_no,
                        p.rpting_email,
                        p.remarks,
                        p.created_dt,
                        p.last_modifed_dt,
                        p.total_exp,
                        p.relevant_exp,

                    }).ToList();

                    return Ok(data);

                }
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }

        }
    #endregion ** End BY SUPRIYA, PREVIOUS EMPLOYEMENT DETAL ON 01-06-2020 **


        public EmployeeDetailListt CheckEmpdaAllDatafromexcel(List<EmployeeAllDataUpload> list)
        {
            List<EmployeeAllDataUpload> missingdetaillist = new List<EmployeeAllDataUpload>();
            List<EmployeeAllDataUpload> adddblist = new List<EmployeeAllDataUpload>();
            List<EmployeeAllDataUpload> duplicatedetaillist = new List<EmployeeAllDataUpload>();
            List<EmployeeAllDataUpload> issuedetaillist = new List<EmployeeAllDataUpload>();
            Response_Msg objresponse = new Response_Msg();

    #region ********* Load basic Details ************************

            int indexofEmptyEmp = -1;
            while ((indexofEmptyEmp = list.FindIndex(p => p.emp_code?.Trim() == string.Empty || p.emp_code?.Trim() == null)) >= 0)
            {
                list[indexofEmptyEmp].error_message = string.Format("Employee code is blank at {0}", (indexofEmptyEmp + 2));
                issuedetaillist.Add(list[indexofEmptyEmp]);
                list.RemoveAt(indexofEmptyEmp);
                indexofEmptyEmp = -1;
                //throw new Exception(string.Format("Employee code is blank at {0}", (indexofEmptyEmp + 2)));
            }

            string[] Duplicateid = string.Join(", ", list.GroupBy(p => p.emp_code).Select(p => new { keyval = p.Key, totalcount = p.Count() }).Where(p => p.totalcount >= 2).Select(p => p.keyval)).Split(',').ToArray();
            if (Duplicateid.Count() > 0)
            {
                foreach (var item in Duplicateid)
                {
                    while ((indexofEmptyEmp = list.FindIndex(p => p.emp_code?.Trim() == item)) >= 0)
                    {
                        list[indexofEmptyEmp].error_message = string.Format("Duplicate ID {0}", item);
                        issuedetaillist.Add(list[indexofEmptyEmp]);
                        list.RemoveAt(indexofEmptyEmp);
                        indexofEmptyEmp = -1;
                        //throw new Exception(string.Format("Duplicate ID {0}", Duplicateid));
                    }
                }
            }
            List<int> zx = _clsCurrentUser.RoleId;

            var Empdatas = _context.tbl_employee_master.Where(p => list.Select(q => q.emp_code).Contains(p.emp_code)).ToList();

            var existing_company_list = _context.tbl_company_master.Where(a => a.is_active == 1 && _clsCurrentUser.CompanyId.Contains(a.company_id)).Select(a => new { company_id = a.company_id, company_name = a.company_name, company_code = a.company_code, country_id = a.country_id }).ToList();
            foreach (var comReq in list.ToList())
            {
                if (comReq.emp_code != null)
                {
                    var data = existing_company_list.FirstOrDefault(p => p.company_code.Trim().ToUpper() == comReq.company_name?.Trim().ToUpper());
                    if (data == null)
                    {
                        data = existing_company_list.FirstOrDefault(p => p.company_name.Trim().ToUpper() == comReq.company_name?.Trim().ToUpper());
                        if (data == null)
                        {
                            //data = existing_company_list.FirstOrDefault(p => string.Join(p.company_code, "-", p.company_name).Trim().ToUpper() == comReq.company_name?.Trim().ToUpper());
                            //if (data == null)
                            //{
                            data = existing_company_list.FirstOrDefault(p => string.Join(p.company_code, " - ", p.company_name).Trim().ToUpper() == comReq.company_name?.Trim().ToUpper());
                            if (data == null)
                            {
                                comReq.error_message = string.Format("Either company {0} does not exist or you dont have permission ", comReq.company_name);
                                issuedetaillist.Add(comReq);
                                list.Remove(comReq);
                                continue;
                                // throw new Exception(string.Format("Either company {0} does not exist or you dont have permission ", comReq.company_name));
                            }
                            //}
                        }
                    }
                    comReq.company_id = data.company_id;
                    comReq.country_id = data.country_id ?? 0;
                    var Empdata = Empdatas.FirstOrDefault(p => p.emp_code == comReq.emp_code);
                    if (Empdata != null)
                    {
                        comReq.emp_id = Empdata.employee_id;
                    }
                }
            }


        LoadDepartmentAgain:
            var existing_dept_list = _context.tbl_department_master.Where(p => p.is_active == 1).Select(p => new { p.department_id, p.department_code, p.department_name, p.company_id, p.department_short_name }).ToList();
            foreach (var comReq in list)
            {
                if (comReq.emp_code != null)
                {
                    if (comReq.department_name == null || comReq.department_name == string.Empty)
                    {
                        continue;
                    }
                    var data = existing_dept_list.FirstOrDefault(p => p.company_id == comReq.company_id && p.department_name.Trim().ToUpper() == comReq.department_name?.Trim().ToUpper() || p.department_short_name.Trim().ToUpper() == comReq.department_name?.Trim().ToUpper());
                    if (data == null)
                    {
                        var data1 = existing_dept_list.FirstOrDefault(p => p.company_id == comReq.company_id && p.department_code.Trim().ToUpper() == comReq.department_name?.Trim().ToUpper());
                        if (data1 == null)
                        {
                            _context.tbl_department_master.Add(new tbl_department_master()
                            {
                                department_code = "L" + DateTime.Now.ToString("yyMMddhhmmss") + new Random().Next(100, 999),
                                company_id = comReq.company_id,
                                department_name = comReq.department_name,
                                department_short_name = comReq.department_name,
                                employee_id = null,
                                last_modified_by = _clsCurrentUser.UserId,
                                created_by = _clsCurrentUser.UserId,
                                created_date = DateTime.Now,
                                is_active = 1,
                                last_modified_date = DateTime.Now,


                            });
                            _context.SaveChanges();
                            goto LoadDepartmentAgain;
                        }
                        comReq.dept_id = data.department_id;

                    }
                    else
                    {
                        comReq.dept_id = data.department_id;
                    }
                }
            }
        LoadDesigAgain:
            var existing_desig_list = _context.tbl_designation_master.Where(p => p.is_active == 1).Select(p => new { p.designation_id, p.designation_name }).ToList();
            foreach (var comReq in list)
            {
                if (comReq.emp_code != null)
                {
                    if (comReq.designation_name == null || comReq.designation_name == string.Empty)
                    {
                        continue;
                    }
                    var data = existing_desig_list.FirstOrDefault(p => p.designation_name.Trim().ToUpper() == comReq.designation_name?.Trim().ToUpper());
                    if (data == null)
                    {
                        _context.tbl_designation_master.Add(new tbl_designation_master()
                        {


                            designation_name = comReq.designation_name,
                            last_modified_by = _clsCurrentUser.UserId,
                            created_by = _clsCurrentUser.UserId,
                            created_date = DateTime.Now,
                            is_active = 1,
                            last_modified_date = DateTime.Now,
                        });
                        _context.SaveChanges();
                        goto LoadDesigAgain;
                    }
                    else
                    {
                        comReq.desig_id = data.designation_id;
                    }
                }
            }

        LoadGradeAgain:
            var existing_grade_list = _context.tbl_grade_master.Where(p => p.is_active == 1).Select(p => new { p.grade_id, p.grade_name }).ToList();
            foreach (var comReq in list)
            {
                if (comReq.emp_code != null)
                {
                    if (comReq.grade_name == null || comReq.grade_name == string.Empty)
                    {
                        continue;
                    }

                    var data = existing_grade_list.FirstOrDefault(p => p.grade_name.Trim().ToUpper() == comReq.grade_name?.Trim().ToUpper());
                    if (data == null)
                    {
                        _context.tbl_grade_master.Add(new tbl_grade_master()
                        {


                            grade_name = comReq.grade_name,
                            last_modified_by = _clsCurrentUser.UserId,
                            created_by = _clsCurrentUser.UserId,
                            created_date = DateTime.Now,
                            is_active = 1,
                            last_modified_date = DateTime.Now,
                        });
                        _context.SaveChanges();
                        goto LoadGradeAgain;
                    }
                    else
                    {
                        comReq.grade_id = data.grade_id;
                    }
                }
            }


            var existing_sg_list = _context.tbl_salary_group.Where(p => p.is_active == 1).Select(p => new { p.group_id, p.group_name }).ToList();
            foreach (var comReq in list.ToList())
            {
                if (comReq.emp_code != null)
                {
                    var data = existing_sg_list.FirstOrDefault(p => p.group_name.Trim().ToUpper() == comReq.salary_group?.Trim().ToUpper());
                    if (data == null)
                    {
                        comReq.error_message = string.Format("Salary Group ({0}) not define ", comReq.salary_group);
                        issuedetaillist.Add(comReq);
                        list.Remove(comReq);
                        continue;
                        //throw new Exception(string.Format("Salary Group ({0}) not define ", comReq.salary_group));
                    }
                    else
                    {
                        comReq.salary_group_id = data.group_id;
                    }
                }
            }

        LoadBankAgain:
            var existing_bank_list = _context.tbl_bank_master.Where(p => p.is_deleted == 0).Select(p => new { p.bank_id, p.bank_name }).ToList();
            foreach (var comReq in list)
            {
                if (comReq.emp_code != null)
                {
                    if (comReq.bank_name == null || comReq.bank_name?.Trim() == string.Empty)
                    { continue; }
                    else
                    {
                        var data = existing_bank_list.FirstOrDefault(p => p.bank_name.Trim().ToUpper() == comReq.bank_name?.Trim().ToUpper());
                        if (data == null)
                        {
                            _context.tbl_bank_master.Add(new tbl_bank_master()
                            {


                                bank_name = comReq.bank_name,
                                bank_status = 1,

                                deleted_by = _clsCurrentUser.UserId,
                                created_by = _clsCurrentUser.UserId,
                                created_dt = DateTime.Now,
                                is_deleted = 0,
                                modified_dt = DateTime.Now,
                                modified_by = _clsCurrentUser.UserId,
                            });
                            _context.SaveChanges();
                            goto LoadBankAgain;
                        }
                        else
                        {
                            comReq.bank_id = data.bank_id;
                        }
                    }
                }

            }

        LoadStateAgain:
            var COUNTRYlIST = existing_company_list.Select(q => q.country_id).ToList();
            var existing_State_list = _context.tbl_state.Where(p => p.is_deleted == 0 && COUNTRYlIST.Contains(p.country_id)).Select(p => new { p.country_id, p.state_id, p.name }).ToList();
            var stateListIds = existing_State_list.Select(q => q.state_id).ToList();
            var existing_City_list = _context.tbl_city.Where(p => p.is_deleted == 0 && stateListIds.Contains(p.state_id ?? 0)).Select(p => new { p.city_id, p.state_id, p.name }).ToList();
            foreach (var comReq in list)
            {
                if (comReq.emp_code != null)
                {
                    if (comReq.current_address1 != null)
                    {
                        try
                        {
                            existing_State_list.ForEach(p =>
                            {
                                if (comReq.current_address1?.Trim().ToLower().IndexOf(p.name.Trim().ToLower()) > -1)
                                {
                                    comReq.state_id = p.state_id;
                                }
                            });
                        }
                        catch
                        {
                            continue;
                        }
                    }
                    else if (comReq.permenant_state_name == null || comReq.permenant_state_name?.Trim() == string.Empty)
                    {
                        continue;
                    }
                    else if (comReq.permenant_city_name == null || comReq.permenant_city_name?.Trim() == string.Empty)
                    {
                        continue;
                    }



                    var data = existing_State_list.FirstOrDefault(p => p.country_id == comReq.country_id && p.name?.Trim().ToUpper() == (comReq.permenant_state_name == null ? comReq.permenant_state_name : comReq.permenant_state_name?.Trim().ToUpper()));
                    if (data == null)
                    {
                        _context.tbl_state.Add(new tbl_state()
                        {
                            country_id = comReq.country_id,
                            name = comReq.permenant_state_name,
                            created_by = _clsCurrentUser.UserId,
                            created_date = DateTime.Now,
                            is_deleted = 0,
                            last_modified_date = DateTime.Now,
                            last_modified_by = _clsCurrentUser.UserId,
                        });
                        _context.SaveChanges();
                        goto LoadStateAgain;
                    }
                    else
                    {
                        comReq.state_id = data.state_id;
                    }

                    if (!string.IsNullOrEmpty(comReq.permenant_city_name))
                    {
                        var data1 = existing_City_list.FirstOrDefault(p => p.state_id == comReq.state_id && p.name.Trim().ToUpper() == comReq.permenant_city_name?.Trim().ToUpper());
                        if (data1 == null)
                        {
                            _context.tbl_city.Add(new tbl_city()
                            {
                                state_id = comReq.state_id,
                                name = comReq.permenant_city_name,
                                created_by = _clsCurrentUser.UserId,
                                created_date = DateTime.Now,
                                is_deleted = 0,
                                last_modified_date = DateTime.Now,
                                last_modified_by = _clsCurrentUser.UserId,
                            });
                            _context.SaveChanges();
                            goto LoadStateAgain;
                        }
                        else
                        {
                            comReq.city_id = data1.city_id;
                        }
                    }
                    else
                    {
                        comReq.city_id = existing_City_list.FirstOrDefault(q => q.state_id == comReq.state_id && q.name.Trim().ToUpper() == "NA").city_id;
                    }
                }
            }


        LoadLocationAgain:
            var existing_location_list = _context.tbl_location_master.Where(p => p.is_active == 1).Select(p => new { p.company_id, p.location_id, p.location_code, p.location_name }).ToList();
            foreach (var comReq in list)
            {
                if (comReq.emp_code != null)
                {

                    if (comReq.location_name == null || comReq.location_name == string.Empty)
                    {
                        continue;
                    }
                    var data = existing_location_list.FirstOrDefault(p => p.company_id == comReq.company_id && p.location_name.Trim().ToUpper() == comReq.location_name?.Trim().ToUpper());
                    if (data == null)
                    {
                        var data1 = existing_location_list.FirstOrDefault(p => p.company_id == comReq.company_id && p.location_code.Trim().ToUpper() == comReq.location_name?.Trim().ToUpper());
                        if (data1 == null)
                        {
                            _context.tbl_location_master.Add(new tbl_location_master()
                            {
                                location_code = "L" + DateTime.Now.ToString("yyMMddhhmmss") + new Random().Next(100, 999),
                                company_id = comReq.company_id,
                                address_line_one = "",
                                address_line_two = "",
                                city_id = comReq.city_id,
                                country_id = comReq.country_id,
                                state_id = null,
                                primary_email_id = "",
                                last_modified_by = _clsCurrentUser.UserId,
                                created_by = _clsCurrentUser.UserId,
                                created_date = DateTime.Now,
                                is_active = 1,
                                last_modified_date = DateTime.Now,
                                location_name = comReq.location_name,
                                pin_code = 0,
                                primary_contact_number = "",
                                secondary_contact_number = "",
                                secondary_email_id = "",
                                type_of_location = 1,
                                website = "",

                            });
                            _context.SaveChanges();
                            goto LoadLocationAgain;
                        }
                        comReq.location_id = data.location_id;

                    }
                    else
                    {
                        comReq.location_id = data.location_id;
                    }
                }
            }



    #endregion

            StringBuilder MissingDtlMessage = new StringBuilder();
            StringBuilder CurrentMissingDtlMessage = new StringBuilder("");
            try
            {

                bool _invalid = false;
                string stringformat = @"^[a-zA-Z0-9'\s]{1,200}$";
                Regex stringrgx = new Regex(stringformat);

                try
                {
                    indexofEmptyEmp = -1;
                    var empcode = list.Any(x => string.IsNullOrEmpty(x.emp_code) || x.emp_code.Trim().ToUpper() == "NA" || x.emp_code.Trim().ToUpper() == "N.A" || x.emp_code.Trim().ToUpper() == "N.A.");
                    if (empcode)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => string.IsNullOrEmpty(p.emp_code) || p.emp_code.Trim().ToUpper() == "NA" || p.emp_code.Trim().ToUpper() == "N.A" || p.emp_code.Trim().ToUpper() == "N.A.")) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Employee Code cannot be blank... ");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }
                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Employee Code cannot be blank... </br>");
                    }


                    var invalid_empcode = list.Where(x => !stringrgx.IsMatch(x.emp_code.Trim().ToUpper())).ToList();
                    if (invalid_empcode.Count > 0)
                    {
                        foreach (var item in invalid_empcode)
                        {
                            while ((indexofEmptyEmp = list.FindIndex(p => p.emp_code?.Trim() == item.emp_code)) >= 0)
                            {
                                list[indexofEmptyEmp].error_message = string.Format("Invalid Employee Code, only alphabetics and numeric are allowed in Employee Code");
                                issuedetaillist.Add(list[indexofEmptyEmp]);
                                list.RemoveAt(indexofEmptyEmp);
                                indexofEmptyEmp = -1;
                            }
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Invalid Employee Code, only alphabetics and numeric are allowed in Employee Code... </br> ");
                        //invalid_empcode.ForEach(x => { CurrentMissingDtlMessage.Append("" + x.emp_code + ","); });
                        //CurrentMissingDtlMessage.Append("</br>");
                    }



                    var _Saluation = list.Where(x => string.IsNullOrEmpty(x.salutation)).ToList();
                    if (_Saluation.Count > 0)
                    {
                        foreach (var item in _Saluation)
                        {
                            while ((indexofEmptyEmp = list.FindIndex(p => string.IsNullOrEmpty(p.salutation))) >= 0)
                            {
                                list[indexofEmptyEmp].error_message = string.Format("Saluation cannot be blank for following Employee... ");
                                issuedetaillist.Add(list[indexofEmptyEmp]);
                                list.RemoveAt(indexofEmptyEmp);
                                indexofEmptyEmp = -1;
                            }
                        }
                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Saluation cannot be blank for following Employee... <br/>");
                        //_Saluation.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});

                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    list.ForEach(x =>
                    {
                        if (x.salutation.Trim().ToUpper() == "MR" || x.salutation.Trim().ToUpper() == "MR.")
                        {
                            x.salutation_id = 1;
                        }
                        else if (x.salutation.Trim().ToUpper() == "MRS" || x.salutation.Trim().ToUpper() == "MRS.")
                        {
                            x.salutation_id = 2;
                        }
                        else if (x.salutation.Trim().ToUpper() == "MISS" || x.salutation.Trim().ToUpper() == "MISS." || x.salutation.Trim().ToUpper() == "MS" || x.salutation.Trim().ToUpper() == "MS.")
                        {
                            x.salutation_id = 3;
                        }
                    });

                    if (list.Any(x => x.salutation_id == 0))
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.salutation_id == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Invalid Saluation... ");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }
                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Invalid Saluation... <br/>");
                        //var invalid_saluation = list.Where(x => x.salutation_id == 0).ToList();
                        //invalid_saluation.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});

                        //CurrentMissingDtlMessage.Append("</br>");
                    }




                    var _empname = list.Where(x => string.IsNullOrEmpty(x.emp_name) || x.emp_name.Trim().ToUpper() == "NA" || x.emp_name.Trim().ToUpper() == "N.A" || x.emp_name.Trim().ToUpper() == "N.A.").ToList();
                    if (_empname.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => string.IsNullOrEmpty(p.emp_name) || p.emp_name.Trim().ToUpper() == "NA" || p.emp_name.Trim().ToUpper() == "N.A" || p.emp_name.Trim().ToUpper() == "N.A.")) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Employee Name cannot be blank for following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Employee Name cannot be blank for following Employee Code... <br/>");
                        //_Saluation.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});

                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    var invalidname = list.Where(x => !stringrgx.IsMatch(x.emp_name.Trim().ToUpper())).ToList();
                    if (invalidname.Count > 0)
                    {
                        foreach (var item in invalidname)
                        {
                            while ((indexofEmptyEmp = list.FindIndex(p => !stringrgx.IsMatch(p.emp_name.Trim().ToUpper()))) >= 0)
                            {
                                list[indexofEmptyEmp].error_message = string.Format("Invalid Name, Only Alphabetics and Numeric are allowed in Name");
                                issuedetaillist.Add(list[indexofEmptyEmp]);
                                list.RemoveAt(indexofEmptyEmp);
                                indexofEmptyEmp = -1;
                            }
                        }
                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Invalid Name, Only Alphabetics and Numeric are allowed in Name <br/>");
                        //invalidname.ForEach(x => { CurrentMissingDtlMessage.Append("" + x.emp_code + ","); });
                        //CurrentMissingDtlMessage.Append("</br>");
                    }


                    var _father_husband = list.Where(x => string.IsNullOrEmpty(x.father_husband_name) || x.father_husband_name.Trim().ToUpper() == "NA" || x.father_husband_name.Trim().ToUpper() == "N.A." || x.father_husband_name.Trim().ToUpper() == "N.A").ToList();
                    if (_father_husband.Count > 0)
                    {
                        _father_husband.ForEach(x => x.father_husband_name = "NA");
                        //_invalid = true;
                        //CurrentMissingDtlMessage.Append("Father/Husband name cannot be blank for following Employee Code....:-");
                        //_father_husband.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    var invalid_fh_name = list.Where(x => !stringrgx.IsMatch(x.father_husband_name.Trim().ToUpper())).ToList();
                    if (invalid_fh_name.Count > 0)
                    {
                        foreach (var item in invalid_fh_name)
                        {
                            while ((indexofEmptyEmp = list.FindIndex(p => !stringrgx.IsMatch(p.father_husband_name.Trim().ToUpper()))) >= 0)
                            {
                                list[indexofEmptyEmp].error_message = string.Format("Invalid Father or Husband Name, only numeric and alphabetics are allowed");
                                issuedetaillist.Add(list[indexofEmptyEmp]);
                                list.RemoveAt(indexofEmptyEmp);
                                indexofEmptyEmp = -1;
                            }
                        }
                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Invalid Father or Husband Name, only numeric and alphabetics are allowed :-");
                        //invalid_fh_name.ForEach(x => { CurrentMissingDtlMessage.Append("" + x.emp_code + ","); });
                        //CurrentMissingDtlMessage.Append("</br>");
                    }


                    var dob = list.Where(x => string.IsNullOrEmpty(x.date_of_birth.ToString()) || x.date_of_birth.ToString() == "NA" || x.date_of_birth.ToString() == "N.A." || x.date_of_birth.ToString() == "N.A").ToList();
                    if (dob.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => string.IsNullOrEmpty(p.date_of_birth.ToString()) || p.date_of_birth.ToString() == "NA" || p.date_of_birth.ToString() == "N.A." || p.date_of_birth.ToString() == "N.A")) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Date of Birth cannot be blank/Invalid for following Employee Code....");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Date of Birth cannot be blank/Invalid for following Employee Code.... <br/>");
                        //dob.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    var nationality = list.Where(x => string.IsNullOrEmpty(x.nationality) || x.nationality.Trim().ToUpper() == "NA" || x.nationality.Trim().ToUpper() == "N.A" || x.nationality.Trim().ToUpper() == "N.A.").ToList();
                    if (nationality.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => string.IsNullOrEmpty(p.nationality) || p.nationality.Trim().ToUpper() == "NA" || p.nationality.Trim().ToUpper() == "N.A" || p.nationality.Trim().ToUpper() == "N.A.")) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Nationality cannot be blank for following Employee Code....");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Nationality cannot be blank for following Employee Code....<br/>");
                        //nationality.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    var invalidnationality = list.Where(x => !string.IsNullOrEmpty(x.nationality) && !stringrgx.IsMatch(x.nationality)).ToList();
                    if (invalidnationality.Count > 0)
                    {
                        foreach (var item in invalidnationality)
                        {
                            while ((indexofEmptyEmp = list.FindIndex(p => !string.IsNullOrEmpty(p.nationality) && !stringrgx.IsMatch(p.nationality))) >= 0)
                            {
                                list[indexofEmptyEmp].error_message = string.Format("Invalid Nationality only numeric and alphabetics are allowed .");
                                issuedetaillist.Add(list[indexofEmptyEmp]);
                                list.RemoveAt(indexofEmptyEmp);
                                indexofEmptyEmp = -1;
                            }
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Invalid Nationality only numeric and alphabetics are allowed <br/>");
                        //invalidnationality.ForEach(x => { CurrentMissingDtlMessage.Append("" + x.nationality + ","); });
                        //CurrentMissingDtlMessage.Append("</br>");
                    }


                    var _gender = list.Where(x => string.IsNullOrEmpty(x.gender)).ToList();
                    if (_gender.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => string.IsNullOrEmpty(p.gender))) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Gender cannot be blank for following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Gender cannot be blank for following Employee Code....<br/>");
                        //_gender.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    list.ForEach(x =>
                    {
                        if (x.gender.Trim().ToUpper() == "FEMALE")
                        {
                            x.gender_id = 1;
                        }
                        else if (x.gender.Trim().ToUpper() == "MALE")
                        {
                            x.gender_id = 2;
                        }
                        else if (x.gender.Trim().ToUpper() == "OTHER" || x.gender.Trim().ToUpper() == "OTHERS")
                        {
                            x.gender_id = 3;
                        }
                        else
                        {
                            x.gender_id = 0;
                        }

                    });

                    if (list.Any(x => x.gender_id == 0))
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.gender_id == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Invalid Gender for following Employee Code....");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Invalid Gender for following Employee Code....<br/>");
                        //var _invalid_gender = list.Where(x => x.gender_id == 0).ToList();
                        //_invalid_gender.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }


                    var invalid_status = list.Where(x => string.IsNullOrEmpty(x.is_active) || x.is_active.Trim().ToUpper() == "NA" || x.is_active.Trim().ToUpper() == "N.A" || x.is_active.Trim().ToUpper() == "N.A." || !stringrgx.IsMatch(x.is_active)).ToList();
                    if (invalid_status.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => string.IsNullOrEmpty(p.is_active) || p.is_active.Trim().ToUpper() == "NA" || p.is_active.Trim().ToUpper() == "N.A" || p.is_active.Trim().ToUpper() == "N.A." || !stringrgx.IsMatch(p.is_active))) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Is Active cannot be blank or invalid active status of following employee Code");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Is Active cannot be blank or invalid active status of following employee Code...<br/>");
                        //invalid_status.ForEach(x => { CurrentMissingDtlMessage.Append("" + x.emp_code + ","); });
                        //CurrentMissingDtlMessage.Append("</br>");
                    }


                    list.ForEach(x =>
                    {
                        int blod_g = string.IsNullOrEmpty(x.blood_group) ? 0 : x.blood_group.Trim().ToUpper() == "A+" ? 1 : x.blood_group.Trim().ToUpper() == "O+" ? 2 : x.blood_group.Trim().ToUpper() == "B+" ? 3 : x.blood_group.Trim().ToUpper() == "AB+" ? 4 : x.blood_group.Trim().ToUpper() == "A-" ? 5 : x.blood_group.Trim().ToUpper() == "O-" ? 6 : x.blood_group.Trim().ToUpper() == "B-" ? 7 : x.blood_group.Trim().ToUpper() == "AB-" ? 8 : 0;
                        x.blood_group_id = string.IsNullOrEmpty(x.blood_group) ? 0 : x.blood_group.Trim().ToUpper() == "A+" ? 1 : x.blood_group.Trim().ToUpper() == "O+" ? 2 : x.blood_group.Trim().ToUpper() == "B+" ? 3 : x.blood_group.Trim().ToUpper() == "AB+" ? 4 : x.blood_group.Trim().ToUpper() == "A-" ? 5 : x.blood_group.Trim().ToUpper() == "O-" ? 6 : x.blood_group.Trim().ToUpper() == "B-" ? 7 : x.blood_group.Trim().ToUpper() == "AB-" ? 8 : 0;
                    });



                    list.ForEach(x =>
                    {
                        x.marital_status_id = string.IsNullOrEmpty(x.marital_status) ? 0 : x.marital_status.Trim().ToUpper() == "MARRIED" ? 1 : x.marital_status.Trim().ToUpper() == "SINGLE" ? 2 : x.marital_status.Trim().ToUpper() == "UN-MARRIED" || x.marital_status.Trim().ToUpper() == "UNMARRIED" ? 2 : x.marital_status.Trim().ToUpper() == "DIVORCY" ? 3 : 0;

                    });

                    if (list.Any(x => x.marital_status_id == 0))
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.marital_status_id == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Invalid Marital Status for following Employee Code....");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }
                        //var material_status = list.Where(x => x.marital_status_id == 0).ToList();
                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Invalid Marital Status for following Employee Code....<br/>");
                        //material_status.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }


                    string aadharno = @"^[0-9]{12}$";
                    Regex adharreg = new Regex(aadharno);
                    var checkadharcard = list.Where(x => x.emp_code != null && (!string.IsNullOrEmpty(x.adhar_no.Trim().ToUpper()) && x.adhar_no.Trim().ToUpper() != "NA" && x.adhar_no.Trim().ToUpper() != "N.A" && x.adhar_no.Trim().ToUpper() != "N.A.")).ToList();
                    if (checkadharcard.Count > 0)
                    {
                        var invalidadhar = checkadharcard.Where(x => !adharreg.IsMatch(x.adhar_no)).ToList();
                        if (invalidadhar.Count > 0)
                        {
                            while ((indexofEmptyEmp = list.FindIndex(p => !adharreg.IsMatch(p.adhar_no))) >= 0)
                            {
                                list[indexofEmptyEmp].error_message = string.Format("Invalid Aadhar card of following Employee Code...");
                                issuedetaillist.Add(list[indexofEmptyEmp]);
                                list.RemoveAt(indexofEmptyEmp);
                                indexofEmptyEmp = -1;
                            }

                            //_invalid = true;
                            CurrentMissingDtlMessage.Append("Invalid Aadhar card of following Employee Code <br/> ");
                            //invalidadhar.ForEach(x => { CurrentMissingDtlMessage.Append("" + x.emp_code + ","); });
                            //CurrentMissingDtlMessage.Append("</br>");
                        }

                        var adhardtl = _context.tbl_emp_adhar_details.Where(x => !string.IsNullOrEmpty(x.aadha_card_number) && x.aadha_card_number.Trim().ToUpper() != "NA" && x.aadha_card_number.Trim().ToUpper() != "N.A" && x.aadha_card_number.Trim().ToUpper() != "N.A." && x.is_deleted == 0).ToList();
                        var duplicate_adhar = checkadharcard.Where(x => adhardtl.Any(y => y.aadha_card_number.Trim().ToUpper() == x.adhar_no.Trim().ToUpper())).ToList();
                        if (duplicate_adhar.Count > 0)
                        {
                            while ((indexofEmptyEmp = list.FindIndex(p => adhardtl.Any(y => y.aadha_card_number.Trim().ToUpper() == p.adhar_no.Trim().ToUpper()))) >= 0)
                            {
                                list[indexofEmptyEmp].error_message = string.Format("Aadhar card No already exists of following Employee Code...");
                                issuedetaillist.Add(list[indexofEmptyEmp]);
                                list.RemoveAt(indexofEmptyEmp);
                                indexofEmptyEmp = -1;
                            }

                            //_invalid = true;
                            CurrentMissingDtlMessage.Append("Aadhar card No already exists of following Employee Code <br/>");
                            //duplicate_adhar.ForEach(x => { CurrentMissingDtlMessage.Append("" + x.emp_code + ","); });
                            //CurrentMissingDtlMessage.Append("</br>");
                        }


                        var adhardtl2 = _context.tbl_emp_family_sec.Where(x => !string.IsNullOrEmpty(x.aadhar_card_no) && x.aadhar_card_no.Trim().ToUpper() != "NA" && x.aadhar_card_no.Trim() != "N.A." && x.aadhar_card_no != "N.A" && x.is_deleted == 0).ToList();
                        var duplicate_adhar2 = checkadharcard.Where(x => adhardtl2.Any(y => y.aadhar_card_no.Trim().ToUpper() == x.adhar_no.Trim().ToUpper())).ToList();
                        if (duplicate_adhar2.Count > 0)
                        {
                            while ((indexofEmptyEmp = list.FindIndex(p => adhardtl2.Any(y => y.aadhar_card_no.Trim().ToUpper() == p.adhar_no.Trim().ToUpper()))) >= 0)
                            {
                                list[indexofEmptyEmp].error_message = string.Format("Aadhar card No already exists of following Employee Code...");
                                issuedetaillist.Add(list[indexofEmptyEmp]);
                                list.RemoveAt(indexofEmptyEmp);
                                indexofEmptyEmp = -1;
                            }

                            //_invalid = true;
                            CurrentMissingDtlMessage.Append("Aadhar Card No already exist of following Employee Code... <br/>");
                            //duplicate_adhar2.ForEach(x => { CurrentMissingDtlMessage.Append("" + x.emp_code + ","); });
                            //CurrentMissingDtlMessage.Append("</br>");
                        }



                    }


                    var adharname = list.Where(x => x.emp_code != null && (string.IsNullOrEmpty(x.adhar_name) || x.adhar_name.Trim().ToUpper() == "NA" || x.adhar_name.Trim().ToUpper() == "N.A" || x.adhar_name.Trim().ToUpper() == "N.A." || !stringrgx.IsMatch(x.adhar_name.Trim()))).ToList();
                    if (adharname.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.emp_code != null && (string.IsNullOrEmpty(p.adhar_name) || p.adhar_name.Trim().ToUpper() == "NA" || p.adhar_name.Trim().ToUpper() == "N.A" || p.adhar_name.Trim().ToUpper() == "N.A." || !stringrgx.IsMatch(p.adhar_name.Trim())))) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Aadhar Name Cannot be blank or Invalid of following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }
                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Aadhar Name Cannot be blank or Invalid of following Employee Code...<br/>");
                        //adharname.ForEach(x => { CurrentMissingDtlMessage.Append("" + x.emp_code + ","); });
                        //CurrentMissingDtlMessage.Append("</br>");
                    }


                    var _empstatus = list.Where(x => string.IsNullOrEmpty(x.employee_status)).ToList();
                    if (_empstatus.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => string.IsNullOrEmpty(p.employee_status))) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Employee Status cannot be blank for following Employee Code....");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Employee Status cannot be blank for following Employee Code....<br/>");
                        //_empstatus.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    list.ForEach(x =>
                    {
                        x.employee_status_id = x.employee_status.Trim().ToUpper() == "TEMPORARY" ? 1 :
                                x.employee_status.Trim().ToUpper() == "PROBATION" ? 2 : x.employee_status.Trim().ToUpper() == "CONFIRMED" || x.employee_status.Trim().ToUpper() == "CONFIRMEND" || x.employee_status.Trim().ToUpper() == "CONFIRM" || x.employee_status.Trim().ToUpper() == "PERMANENT" ? 3 : x.employee_status.Trim().ToUpper() == "CONTRACT" ? 4 : x.employee_status.Trim().ToUpper() == "NOTICED" || x.employee_status.Trim().ToUpper() == "NOTICE" ? 10 : x.employee_status.Trim().ToUpper() == "FNF" ? 99 : (x.employee_status.Trim().ToUpper() == "TERMINATE" || x.employee_status.Trim().ToUpper() == "SEPARATED" || x.employee_status.Trim().ToUpper() == "SEPARATE") ? 100 : 0;
                    });

                    if (list.Any(x => x.employee_status_id == 0))
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.employee_status_id == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Invalid Employee Status for following Employee Code.....");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        //var _empstats = list.Where(x => x.employee_status_id == 0).ToList();
                        CurrentMissingDtlMessage.Append("Invalid Employee Status for following Employee Code....<br/>");
                        //_empstats.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }



                    var doj = list.Where(x => x.emp_code != null && (string.IsNullOrEmpty(x.date_of_joining.ToString()) || x.date_of_joining.ToString() == "NA" || x.date_of_joining.ToString() == "N.A." || x.date_of_joining.ToString() == "N.A")).ToList();
                    if (doj.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.emp_code != null && (string.IsNullOrEmpty(p.date_of_joining.ToString()) || p.date_of_joining.ToString() == "NA" || p.date_of_joining.ToString() == "N.A." || p.date_of_joining.ToString() == "N.A"))) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Date of Joining cannot be blank/Invalid for following Employee Code.....");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }
                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Date of Joining cannot be blank/Invalid for following Employee Code....<br/>");
                        //doj.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    var confirmdate = list.Where(x => x.emp_code != null && (string.IsNullOrEmpty(x.confirmation_date.ToString()) || x.confirmation_date.ToString() == "NA" || x.confirmation_date.ToString() == "N.A" || x.confirmation_date.ToString() == "N.A.")).ToList();
                    if (confirmdate.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.emp_code != null && (string.IsNullOrEmpty(p.confirmation_date.ToString()) || p.confirmation_date.ToString() == "NA" || p.confirmation_date.ToString() == "N.A" || p.confirmation_date.ToString() == "N.A."))) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Confirmation Date cannot be blank/Invalid for following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Confirmation Date cannot be blank/Invalid for following Employee Code...<br/>");
                        //confirmdate.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    var card_no = list.Where(x => x.card_number == 0).ToList();
                    if (card_no.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.card_number == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Card No. cannot be blank for following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Card No. cannot be blank for following Employee Code....<br/>");
                        //card_no.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }



                    var duplicatecardno = _context.tbl_emp_officaial_sec.Where(x => x.is_deleted == 0 && list.Any(y => x.tbl_employee_id_details.tbl_employee_company_map.Any(z => z.company_id == y.company_id))).ToList();
                    if (duplicatecardno.Count > 0)
                    {
                        var dup = list.Where(x => duplicatecardno.Any(y => y.card_number.Trim().ToUpper() == x.card_number.ToString())).ToList();
                        if (dup.Count > 0)
                        {
                            while ((indexofEmptyEmp = list.FindIndex(p => duplicatecardno.Any(y => y.card_number.Trim().ToUpper() == p.card_number.ToString()))) >= 0)
                            {
                                list[indexofEmptyEmp].error_message = string.Format("Card no alredy exist of following Employee Code...");
                                issuedetaillist.Add(list[indexofEmptyEmp]);
                                list.RemoveAt(indexofEmptyEmp);
                                indexofEmptyEmp = -1;
                            }

                            //_invalid = true;
                            CurrentMissingDtlMessage.Append("Card no alredy exist of following Employee Code...");
                            //dup.ForEach(x =>
                            //{
                            //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                            //});

                            //CurrentMissingDtlMessage.Append("</br>");
                        }

                    }


                    var company_id = list.Where(x => x.company_id == 0).ToList();
                    if (company_id.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.company_id == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Company Name cannot be blank or Invalid for following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }
                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Company Name cannot be blank or Invalid for following Employee Code...<br/>");
                        //company_id.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    var blank_location_ = list.Where(x => x.location_id == 0).ToList();
                    if (blank_location_.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.location_id == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Location cannot be blank or Invalid for following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Location cannot be blank or Invalid for following Employee Code....<br/>");
                        //blank_location_.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    var blank_dept_ = list.Where(x => x.dept_id == 0).ToList();
                    if (blank_dept_.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.dept_id == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Department cannot be blank or Invalid for following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Department cannot be blank or Invalid for following Employee Code...<br/>");
                        //blank_dept_.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    var blank_desig_ = list.Where(x => x.desig_id == 0).ToList();
                    if (blank_desig_.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.dept_id == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Designaiton cannot be blank or Invalid for following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Designaiton cannot be blank or Invalid for following Employee Code...<br/>");
                        //blank_desig_.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    var blank_grade_ = list.Where(x => x.grade_id == 0).ToList();
                    if (blank_grade_.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.dept_id == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Grade cannot be blank or Invalid for following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Grade cannot be blank or Invalid for following Employee Code....<br/>");
                        //blank_grade_.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }


                    var blank_sg_ = list.Where(x => x.salary_group_id == 0).ToList();
                    if (blank_sg_.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.salary_group_id == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Salary Group cannot be blank or Invalid for following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Salary Group cannot be blank or Invalid for following Employee Code...");
                        //blank_sg_.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }




                    var bank_ = list.Where(x => x.emp_code != null && (!string.IsNullOrEmpty(x.bank_name) && x.bank_name.Trim().ToUpper() != "NA" && x.salary_account_no.Trim().ToUpper() != "N.A" && x.salary_account_no.Trim().ToUpper() != "N.A.")).ToList();
                    if (bank_.Count > 0)
                    {
                        var bank_ifsc = bank_.Where(x => string.IsNullOrEmpty(x.bank_IFSC_Code)).ToList();
                        if (bank_ifsc.Count > 0)
                        {
                            bank_ifsc.ForEach(x => x.bank_IFSC_Code = "NA");
                        }
                        var salary_account = bank_.Where(x => string.IsNullOrEmpty(x.salary_account_no) || x.salary_account_no.Trim().ToUpper() == "NA" || x.salary_account_no.Trim().ToUpper() == "N.A" || x.salary_account_no.Trim().ToUpper() == "N.A.").ToList();
                        if (salary_account.Count > 0)
                        {
                            salary_account.ForEach(x => x.salary_account_no = "");
                        }
                        else
                        {
                            string bank_acc = @"^[0-9]{9,18}$";
                            Regex rebank = new Regex(bank_acc);

                            var invalid_account = bank_.Where(x => !rebank.IsMatch(x.salary_account_no)).ToList();
                            if (invalid_account.Count > 0)
                            {
                                while ((indexofEmptyEmp = list.FindIndex(p => !rebank.IsMatch(p.salary_account_no))) >= 0)
                                {
                                    list[indexofEmptyEmp].error_message = string.Format("Invalid Salary Account no for following Employee Code...");
                                    issuedetaillist.Add(list[indexofEmptyEmp]);
                                    list.RemoveAt(indexofEmptyEmp);
                                    indexofEmptyEmp = -1;
                                }
                                //_invalid = true;
                                CurrentMissingDtlMessage.Append("Invalid Salary Account no for following Employee Code....<br/>");
                                //invalid_account.ForEach(x =>
                                //{
                                //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                                //});
                                //CurrentMissingDtlMessage.Append("</br>");

                            }

                            var duplicateaccount = _context.tbl_emp_bank_details.Where(x => x.is_deleted == 0 && bank_.Any(y => y.salary_account_no.Trim().ToUpper() == x.bank_acc.Trim().ToUpper())).ToList();
                            if (duplicateaccount.Count > 0)
                            {
                                foreach (var item in duplicateaccount)
                                {
                                    while ((indexofEmptyEmp = list.FindIndex(p => p.salary_account_no.Trim().ToUpper() == item.bank_acc.Trim().ToUpper())) >= 0)
                                    {
                                        list[indexofEmptyEmp].error_message = string.Format("Salary account no already exist of following Employee Code...");
                                        issuedetaillist.Add(list[indexofEmptyEmp]);
                                        list.RemoveAt(indexofEmptyEmp);
                                        indexofEmptyEmp = -1;

                                    }
                                }
                                //_invalid = true;
                                CurrentMissingDtlMessage.Append("Salary account no already exist of following Employee Code...<br/>");
                                //duplicateaccount.ForEach(x =>
                                //{
                                //    CurrentMissingDtlMessage.Append("" + bank_.FirstOrDefault(q => q.salary_account_no.Trim().ToUpper() == x.bank_acc.Trim().ToUpper()).emp_code + ",");
                                //});

                                //CurrentMissingDtlMessage.Append("</br>");
                            }


                        }


                    }




                    var _cityblank = list.Where(x => x.city_id == 0).ToList();
                    if (_cityblank.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.city_id == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("City cannot be blank for following Employee Code....");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("City cannot be blank for following Employee Code....<br/>");
                        //_cityblank.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    var _stateblank = list.Where(x => x.state_id == 0).ToList();
                    if (_stateblank.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => p.state_id == 0)) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("State cannot be blank for following Employee Code....");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }
                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("State cannot be blank for following Employee Code....:-");
                        //_stateblank.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }


                    var blank_paymode = list.Where(x => string.IsNullOrEmpty(x.payment_mode)).ToList();
                    if (blank_paymode.Count > 0)
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => string.IsNullOrEmpty(p.payment_mode))) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Payment Mode cannot be blank for following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }
                        //_invalid = true;
                        CurrentMissingDtlMessage.Append("Payment Mode cannot be blank for following Employee Code....<br/>");
                        //blank_paymode.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    list.ForEach(x =>
                     {
                         x.payment_mode_id = x.payment_mode.Trim().ToUpper() == "TRANSFER (NEFT)" ? 1 : x.payment_mode.Trim().ToUpper() == "BANK TRANSFER" ? 1 : x.payment_mode.Trim().ToUpper() == "CHEQUE" ? 2 : x.payment_mode.Trim().ToUpper() == "CASH" || x.payment_mode.Trim().ToUpper() == "DEMAND DRAFT" ? 3 : 0;
                     });

                    if (list.Any(x => x.payment_mode_id == 0))
                    {
                        while ((indexofEmptyEmp = list.FindIndex(p => string.IsNullOrEmpty(p.payment_mode))) >= 0)
                        {
                            list[indexofEmptyEmp].error_message = string.Format("Invalid Payment Mode for following Employee Code...");
                            issuedetaillist.Add(list[indexofEmptyEmp]);
                            list.RemoveAt(indexofEmptyEmp);
                            indexofEmptyEmp = -1;
                        }

                        //_invalid = true;
                        //var invalidpaymode = list.Where(x => x.payment_mode_id == 0).ToList();
                        CurrentMissingDtlMessage.Append("Invalid Payment Mode for following Employee Code....<br/>");
                        //invalidpaymode.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});
                        //CurrentMissingDtlMessage.Append("</br>");
                    }


                    if (list.Any(x => string.IsNullOrEmpty(x.PAN_No) || x.PAN_No.Trim().ToUpper() == "NA" || x.PAN_No.Trim().ToUpper() == "N.A" || x.PAN_No.Trim().ToUpper() == "N.A."))
                    {
                        list.Where(x => string.IsNullOrEmpty(x.PAN_No) || x.PAN_No.Trim().ToUpper() == "NA" || x.PAN_No.Trim().ToUpper() == "N.A" || x.PAN_No.Trim().ToUpper() == "N.A.").ToList().ForEach(p =>
                        {
                            p.PAN_No = "";
                        });
                    }

                    var checkpan = list.Where(x => x.emp_code != null && (!string.IsNullOrEmpty(x.PAN_No) && x.PAN_No.Trim().ToUpper() != "NA" && x.PAN_No.Trim().ToUpper() != "N.A" || x.PAN_No.Trim().ToUpper() != "N.A.")).Select(p => new
                    {
                        p.PAN_No,
                        p.emp_code
                    }).ToList();
                    if (checkpan.Count > 0)
                    {

                        var duplicatepan = _context.tbl_emp_pan_details.Where(x => x.is_deleted == 0 && checkpan.Any(y => y.PAN_No.Trim().ToUpper() == x.pan_card_number.Trim().ToUpper() && y.PAN_No.Trim().ToUpper() != "NA" && y.PAN_No.Trim().ToUpper() != "")).ToList();
                        if (duplicatepan.Count > 0)
                        {
                            foreach (var item in duplicatepan)
                            {
                                while ((indexofEmptyEmp = list.FindIndex(p => p.PAN_No.Trim().ToUpper() == item.pan_card_number.Trim().ToUpper() && p.PAN_No.Trim().ToUpper() != "NA" && p.PAN_No.Trim().ToUpper() != "")) >= 0)
                                {
                                    list[indexofEmptyEmp].error_message = string.Format("PAN No already exist of following exist..");
                                    issuedetaillist.Add(list[indexofEmptyEmp]);
                                    list.RemoveAt(indexofEmptyEmp);
                                    indexofEmptyEmp = -1;
                                }
                            }
                            //_invalid = true;
                            CurrentMissingDtlMessage.Append("PAN No already exist of following exist...<br/>");
                            //duplicatepan.ForEach(y =>
                            //{
                            //    CurrentMissingDtlMessage.Append("" + checkpan.FirstOrDefault(q => q.PAN_No.Trim().ToUpper() == y.pan_card_number.Trim().ToUpper()).emp_code + ",");
                            //});

                            //CurrentMissingDtlMessage.Append("</br>");
                        }
                    }

                    if (list.Any(x => string.IsNullOrEmpty(x.UAN_number) || x.UAN_number == "NA"))
                    {
                        list.Where(x => x.emp_code != null && (string.IsNullOrEmpty(x.PAN_No) || x.PAN_No.Trim().ToUpper() == "NA" || x.PAN_No.Trim().ToUpper() == "N.A" || x.PAN_No.Trim().ToUpper() == "N.A.")).ToList().ForEach(p =>
                        {
                            p.UAN_number = "";
                        });
                    }


                    string primaryemail = @"^([0-9a-zA-Z]([-_\\.]*[0-9a-zA-Z]+)*)@([0-9a-zA-Z]([-_\\.]*[0-9a-zA-Z]+)*)[\\.]([a-zA-Z]{2,9})$";
                    Regex re = new Regex(primaryemail);

                    list.ForEach(x =>
                    {

                        x.is_active_id = x.is_active.Trim().ToUpper() == "YES" ? 1 : 0;
                        if (x.email_work == null || x.email_work.Trim().ToUpper() == "NA" || x.email_work.Trim().ToUpper() == "N.A" || x.email_work.Trim().ToUpper() == "N.A.")
                        {
                            x.email_work = "";
                        }
                        else
                        {
                            if (!re.IsMatch(x.email_work))
                            {
                                x.email_work = "";
                            }
                        }
                        x.IS_PF_applicable = x.PF_applicable == null ? 2 : x.PF_applicable.Trim().ToUpper() == "YES" ? 1 : (x.PF_applicable.Trim().ToUpper() == "NO" || x.PF_applicable.Trim().ToUpper() == "NA" || x.PF_applicable.Trim().ToUpper() == "N.A" || x.PF_applicable.Trim().ToUpper() == "N.A.") ? 0 : 2;
                        x.Is_ESIC_applicable = x.ESIC_applicable == null ? 2 : x.ESIC_applicable.Trim().ToUpper() == "YES" ? 1 : (x.ESIC_applicable.Trim().ToUpper() == "NO" || x.ESIC_applicable.Trim().ToUpper() == "NA" || x.ESIC_applicable.Trim().ToUpper() == "N.A" || x.ESIC_applicable.Trim().ToUpper() == "N.A.") ? 0 : 2;
                        x.is_PT_applicable = x.PT_applicable == null ? 2 : x.PT_applicable.Trim().ToUpper() == "YES" ? 1 : (x.PT_applicable.Trim().ToUpper() == "NO" || x.PT_applicable.Trim().ToUpper() == "NA" || x.PT_applicable.Trim().ToUpper() == "N.A" || x.PT_applicable.Trim().ToUpper() == "N.A.") ? 0 : 2;
                    });


                    list.Where(x => !string.IsNullOrEmpty(x.email_work) && x.email_work.Trim().ToUpper() != "NA" && x.email_work.Trim().ToUpper() != "N.A." && x.email_work.Trim().ToUpper() != "N.A").GroupBy(y => y.email_work).Where(z => z.Count() > 1).ToList().ForEach(y => y.LastOrDefault().email_work = "");

                    var _checkemil_dup = list.Where(y => !string.IsNullOrEmpty(y.email_work) && y.email_work.Trim().ToUpper() != "NA" && y.email_work.Trim().ToUpper() != "N.A" && y.email_work.Trim().ToUpper() != "N.A.").ToList();
                    if (_checkemil_dup.Count > 0)
                    {
                        var existmail_ = _context.tbl_emp_officaial_sec.Where(x => !string.IsNullOrEmpty(x.official_email_id) && x.official_email_id.Trim().ToUpper() != "NA" && x.official_email_id.Trim().ToUpper() != "N.A" && x.official_email_id.Trim().ToUpper() != "N.A." && x.is_deleted == 0).ToList();
                        if (existmail_.Count > 0)
                        {
                            var existemail = _checkemil_dup.Where(x => existmail_.Any(y => y.official_email_id.Trim().ToUpper() == x.email_work.Trim().ToUpper())).ToList();
                            if (existemail.Count > 0)
                            {
                                foreach (var item in existemail)
                                {
                                    while ((indexofEmptyEmp = list.FindIndex(p => existmail_.Any(y => y.official_email_id.Trim().ToUpper() == item.email_work.Trim().ToUpper()))) >= 0)
                                    {
                                        list[indexofEmptyEmp].error_message = string.Format("Email ID Already exist of following Employee Code...");
                                        issuedetaillist.Add(list[indexofEmptyEmp]);
                                        list.RemoveAt(indexofEmptyEmp);
                                        indexofEmptyEmp = -1;
                                    }
                                }

                                //_invalid = true;
                                CurrentMissingDtlMessage.Append("Email ID Already exist of following Employee Code.. <br/>");
                                //existemail.ForEach(y =>
                                //{
                                //    CurrentMissingDtlMessage.Append("" + y.emp_code + ",");
                                //});
                                //CurrentMissingDtlMessage.Append("</br>");
                            }

                        }


                        string validemail = @"^([0-9a-zA-Z]([-_\\.]*[0-9a-zA-Z]+)*)@([0-9a-zA-Z]([-_\\.]*[0-9a-zA-Z]+)*)[\\.]([a-zA-Z]{2,9})$";
                        Regex mailrgx = new Regex(validemail);

                        var invalidemail = _checkemil_dup.Where(x => !mailrgx.IsMatch(x.email_work.Trim().ToUpper())).ToList();
                        if (invalidemail.Count > 0)
                        {
                            while ((indexofEmptyEmp = list.FindIndex(p => !mailrgx.IsMatch(p.email_work.Trim().ToUpper()))) >= 0)
                            {
                                list[indexofEmptyEmp].error_message = string.Format("Invalid Email Id of following Employee Code...");
                                issuedetaillist.Add(list[indexofEmptyEmp]);
                                list.RemoveAt(indexofEmptyEmp);
                                indexofEmptyEmp = -1;
                            }

                            //_invalid = true;
                            CurrentMissingDtlMessage.Append("Invalid Email Id of following Employee Code... <br/>");
                            //invalidemail.ForEach(x => { CurrentMissingDtlMessage.Append("" + x.email_work + ","); });
                            //CurrentMissingDtlMessage.Append("</br>");
                        }


                    }


                    if (list.Any(x => x.IS_PF_applicable == 1))
                    {
                        list.Where(x => x.IS_PF_applicable == 1).ToList().ForEach(x =>
                        {

                            x.pf_group_id = x.PF_group?.Trim().ToUpper() == enmPFGroup.PercentageOnBasic.GetDescription().ToUpper() ? (int)enmPFGroup.PercentageOnBasic : x.PF_group?.Trim().ToUpper() == enmPFGroup.PercentageOnMinBasicSlab.GetDescription().ToUpper() ? (int)enmPFGroup.PercentageOnMinBasicSlab : (int)enmPFGroup.PercentageOnMinBasicSlab;
                        });

                    }
                    else if (list.Any(x => x.IS_PF_applicable == 0))
                    {
                        list.Where(x => x.IS_PF_applicable == 0).ToList().ForEach(x => x.PF_number = "");
                    }



                    if (list.Any(x => x.Is_ESIC_applicable == 0))
                    {
                        list.Where(x => x.Is_ESIC_applicable == 0).ToList().ForEach(x => { x.ESIC_number = ""; x.ESIC_group = ""; });
                    }




                    var pf_ceiling = list.Where(x => string.IsNullOrEmpty(x.PF_ceiling)).ToList();
                    list.ForEach(x =>
                    {
                        x.pf_celing_value = x.PF_ceiling.Trim().ToUpper() == "YES" ? 1800 : 100000;
                    });




                    var _duplicateUAN = list.Where(a => !string.IsNullOrEmpty(a.UAN_number) && a.UAN_number != "NA").GroupBy(y => y.UAN_number.Trim().ToUpper()).Where(x => x.Count() > 1).Select(p => new
                    {
                        p.Key,
                        p.FirstOrDefault().emp_code,
                        p.FirstOrDefault().email_work,
                        p.FirstOrDefault().card_number,
                        p.FirstOrDefault().PAN_No,
                        p.FirstOrDefault().salary_account_no,
                        p.FirstOrDefault().UAN_number,
                        p.FirstOrDefault().adhar_no,
                        p.FirstOrDefault().PF_number,
                    }).ToList();

                    if (_duplicateUAN.Count > 0)
                    {
                        foreach (var item in _duplicateUAN)
                        {
                            while ((indexofEmptyEmp = list.FindIndex(p => p.UAN_number?.Trim() == item.UAN_number)) >= 0)
                            {
                                list[indexofEmptyEmp].error_message = string.Format("UAN Number Details Must be Unique...");
                                issuedetaillist.Add(list[indexofEmptyEmp]);
                                list.RemoveAt(indexofEmptyEmp);
                                indexofEmptyEmp = -1;
                            }
                        }
                    }


                    var exist = _context.tbl_employee_master.Where(x => x.is_active == 1 && list.Any(y => y.emp_code.Trim().ToUpper() == x.emp_code.Trim().ToUpper())).Select(y => y.emp_code).ToList();
                    if (exist.Count > 0)
                    {
                        foreach (var item in exist.ToList())
                        {
                            while ((indexofEmptyEmp = list.FindIndex(p => p.emp_code?.Trim() == item)) >= 0)
                            {
                                list[indexofEmptyEmp].error_message = string.Format("Employee Information Updated Successfully for this Employee...  ");
                                duplicatedetaillist.Add(list[indexofEmptyEmp]);
                                // issuedetaillist.Add(list[indexofEmptyEmp]);
                                list.RemoveAt(indexofEmptyEmp);
                                indexofEmptyEmp = -1;
                            }
                        }

                        // _invalid = true;
                        CurrentMissingDtlMessage.Append("Employee Code already exist... </br>");
                        //exist.ForEach(x =>
                        //{
                        //    CurrentMissingDtlMessage.Append("" + x.emp_code + ",");
                        //});

                        //CurrentMissingDtlMessage.Append("</br>");
                    }

                    adddblist.AddRange(list);
                    adddblist.AddRange(duplicatedetaillist);

                }
                catch (Exception ex)
                {
                    CurrentMissingDtlMessage.Clear();
                    CurrentMissingDtlMessage.Append("Something went wrong Please check details again than upload");
                    throw ex;
                }

            }
            catch (Exception ex)
            {
                CurrentMissingDtlMessage.Clear();
                CurrentMissingDtlMessage.Append("Something went wrong Please check details again than upload");
                throw ex;

            }

            return new EmployeeDetailListt
            {
                missinFullUpladtlc = missingdetaillist,
                duplicateFullUpladdtl = duplicatedetaillist,
                addbempFullUpladdtl = adddblist,
                issueFullUpladdtl = issuedetaillist,
                MissingDtlMessage = CurrentMissingDtlMessage.ToString(),
                objresponse = new Response_Msg()
            };

        }

    #region **START Emp Withdrawl PROCESS  **

        [HttpPost("Save_Emp_Withdrawal")]
        [Authorize(Policy = nameof(enmMenuMaster.EmployeeWithdrawal))]
        public IActionResult Save_Emp_Withdrawal([FromBody] tbl_emp_separation objtbl)
        {
            ResponseMsg objresponse = new ResponseMsg();
            if (!_clsCurrentUser.CompanyId.Contains(objtbl.company_id))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Unauthorize Company Access...!!";
                return Ok(objresponse);
            }

            if (!_clsCurrentUser.DownlineEmpId.Contains(objtbl.emp_id))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Unauthorize Access...!!";
                return Ok(objresponse);
            }

            try
            {
                //var emp_sts = _context.tbl_emp_officaial_sec.Where(x => x.employee_id == objtbl.emp_id && x.is_deleted == 0).FirstOrDefault().current_employee_type;
                //if (emp_sts != 1 && emp_sts != 2 && emp_sts != 3)
                //{
                //    objresponse.StatusCode = 1;
                //    objresponse.Message = "Employee has been resigned already...!!";
                //    return Ok(objresponse);
                //}

                var existSep = _context.tbl_emp_separation.Where(x => x.company_id == objtbl.company_id && x.emp_id == objtbl.emp_id && x.is_deleted == 0).FirstOrDefault();
                if (existSep != null)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Employee has been resigned already...!!";
                }
                else
                {

                    objtbl.is_approved1 = 0;
                    objtbl.is_approved2 = 0;
                    objtbl.is_approved3 = 0;
                    objtbl.is_admin_approved = 1;
                    objtbl.is_final_approve = 1;
                    objtbl.is_cancel = 0;
                    objtbl.app1_dt = Convert.ToDateTime("01-01-2000");
                    objtbl.app2_dt = Convert.ToDateTime("01-01-2000");
                    objtbl.app3_dt = Convert.ToDateTime("01-01-2000");
                    objtbl.admin_dt = DateTime.Now;
                    objtbl.final_relieve_dt = objtbl.last_wrking_dt;
                    objtbl.req_relieving_date = objtbl.last_wrking_dt;
                    objtbl.req_notice_days = objtbl.notice_day;
                    objtbl.cancelation_dt = Convert.ToDateTime("01-01-2000");

                    objtbl.is_deleted = 0;
                    objtbl.created_by = _clsCurrentUser.EmpId;
                    objtbl.created_dt = DateTime.Now;
                    objtbl.modified_by = 0;
                    objtbl.modified_dt = Convert.ToDateTime("01-01-2000");
                    objtbl.is_withdrawal = 1;
                    objtbl.is_kt_transfered = objtbl.is_kt_transfered;
                    objtbl.is_no_due_cleared = objtbl.is_no_due_cleared;
                    objtbl.ref_doc_path = "";

                    _context.Entry(objtbl).State = EntityState.Added;


                    var emp_status = _context.tbl_employment_type_master.OrderByDescending(y => y.effective_date).Where(x => x.is_deleted == 0 && x.employee_id == objtbl.emp_id).FirstOrDefault();
                    if (emp_status != null)
                    {   
                        //emp_status.is_deleted = 1;
                        emp_status.last_modified_by = _clsCurrentUser.EmpId;
                        emp_status.last_modified_date = DateTime.Now;
                        _context.tbl_employment_type_master.Update(emp_status);
                    }

                    var emp_status_notice = _context.tbl_employment_type_master.OrderByDescending(y => y.effective_date).Where(x => x.is_deleted == 0 && x.employee_id == objtbl.emp_id && x.employment_type == 10).FirstOrDefault();
                    if (emp_status_notice != null)
                    {
                        emp_status_notice.is_deleted = 1;
                        emp_status_notice.last_modified_by = _clsCurrentUser.EmpId;
                        emp_status_notice.last_modified_date = DateTime.Now;
                        _context.tbl_employment_type_master.Update(emp_status_notice);
                    }
                    tbl_employment_type_master tbl_employment_type_master_ = new tbl_employment_type_master()
                    {
                        employee_id = objtbl.emp_id,
                        employment_type = (byte)EmployeeType.Notice,
                        is_deleted = 0,
                        created_by = _clsCurrentUser.EmpId,
                        last_modified_by = _clsCurrentUser.EmpId,
                        created_date = DateTime.Now,
                        last_modified_date = DateTime.Now,
                        effective_date = DateTime.Now,
                        
                    };
                    _context.tbl_employment_type_master.Add(tbl_employment_type_master_);

                    var emp_status_fnf = _context.tbl_employment_type_master.OrderByDescending(y => y.effective_date).Where(x => x.is_deleted == 0 && x.employee_id == objtbl.emp_id && x.employment_type == 10).FirstOrDefault();
                    if (emp_status_fnf != null)
                    {
                        emp_status_fnf.is_deleted = 1;
                        emp_status_fnf.last_modified_by = _clsCurrentUser.EmpId;
                        emp_status_fnf.last_modified_date = DateTime.Now;
                        _context.tbl_employment_type_master.Update(emp_status_fnf);
                    }
                    tbl_employment_type_master tbl_employment_type_master1_ = new tbl_employment_type_master()
                    {
                        employee_id = objtbl.emp_id,
                        employment_type = (byte)EmployeeType.FNF,
                        is_deleted = 0,
                        created_by = _clsCurrentUser.EmpId,
                        last_modified_by = _clsCurrentUser.EmpId,
                        created_date = DateTime.Now,
                        last_modified_date = DateTime.Now,
                        effective_date = DateTime.Now.AddDays(1)                       
                    };
                    _context.tbl_employment_type_master.Add(tbl_employment_type_master1_);



                    _context.SaveChanges();

                    objresponse.StatusCode = 0;
                    objresponse.Message = "Employee withdrawal successfully...!!";
                }
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 2;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
            return Ok(objresponse);
        }

        [HttpPost("Update_Emp_Withdrawal")]
        [Authorize(Policy = nameof(enmMenuMaster.EmployeeWithdrawal))]
        public IActionResult Update_Emp_Withdrawal([FromBody] tbl_emp_separation objtbl)
        {
            ResponseMsg objresponse = new ResponseMsg();
            if (!_clsCurrentUser.CompanyId.Contains(objtbl.company_id))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Unauthorize Company Access...!!";
                return Ok(objresponse);
            }

            if (!_clsCurrentUser.DownlineEmpId.Contains(objtbl.emp_id))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Unauthorize Access...!!";
                return Ok(objresponse);
            }

            try
            {
                //var emp_sts = _context.tbl_emp_officaial_sec.Where(x => x.employee_id == objtbl.emp_id && x.is_deleted == 0).FirstOrDefault().current_employee_type;
                //if (emp_sts != 1 && emp_sts != 2 && emp_sts != 3)
                //{
                //    objresponse.StatusCode = 1;
                //    objresponse.Message = "Employee has been resigned already...!!";
                //    return Ok(objresponse);
                //}

                var exist = _context.tbl_emp_separation.Where(x => x.sepration_id == objtbl.sepration_id).FirstOrDefault();
                if (exist == null)
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Invalid E-Sepration id please try again !!";
                    return Ok(objresponse);
                }
                else
                {
                    exist.is_deleted = 1;
                    exist.modified_by = 0;
                    exist.modified_dt = DateTime.Now;
                    //_context.Entry(exist).State = EntityState.Modified;
                    _context.tbl_emp_separation.Update(exist);
                    _context.SaveChanges();
                }

                tbl_emp_separation obj_emp_sepration = new tbl_emp_separation()
                {
                    emp_id = objtbl.emp_id,
                    company_id = objtbl.company_id,
                    resignation_dt = objtbl.resignation_dt,
                    policy_relieving_dt = objtbl.policy_relieving_dt,
                    last_wrking_dt = objtbl.last_wrking_dt,
                    req_reason = objtbl.req_reason,
                    req_remarks = objtbl.req_remarks,
                    notice_day = objtbl.notice_day,
                    salary_process_type = objtbl.salary_process_type,
                    is_approved1 = 0,
                    is_approved2 = 0,
                    is_approved3 = 0,
                    is_admin_approved = 1,
                    is_final_approve = 1,
                    is_cancel = 0,
                    app1_dt = Convert.ToDateTime("01-01-2000"),
                    app2_dt = Convert.ToDateTime("01-01-2000"),
                    app3_dt = Convert.ToDateTime("01-01-2000"),
                    admin_dt = DateTime.Now,
                    final_relieve_dt = objtbl.last_wrking_dt,
                    req_relieving_date = objtbl.last_wrking_dt,
                    req_notice_days = objtbl.notice_day,
                    cancelation_dt = Convert.ToDateTime("01-01-2000"),
                    is_deleted = 0,
                    created_by = _clsCurrentUser.EmpId,
                    created_dt = DateTime.Now,
                    modified_by = 0,
                    modified_dt = Convert.ToDateTime("01-01-2000"),
                    is_withdrawal = 1,
                    is_kt_transfered = objtbl.is_kt_transfered,
                    is_no_due_cleared = objtbl.is_no_due_cleared,
                    ref_doc_path = "",
                };
                _context.tbl_emp_separation.Add(obj_emp_sepration);

                var emp_status = _context.tbl_employment_type_master.OrderByDescending(y => y.effective_date).Where(x => x.is_deleted == 0 && x.employee_id == objtbl.emp_id).FirstOrDefault();
                if (emp_status != null)
                {
                    
                    //emp_status.is_deleted = 1;
                    emp_status.last_modified_by = _clsCurrentUser.EmpId;
                    emp_status.last_modified_date = DateTime.Now;
                    _context.tbl_employment_type_master.Update(emp_status);
                }

                var emp_status_notice = _context.tbl_employment_type_master.OrderByDescending(y => y.effective_date).Where(x => x.is_deleted == 0 && x.employee_id == objtbl.emp_id && x.employment_type == 10).FirstOrDefault();
                if (emp_status_notice != null)
                {
                    emp_status_notice.is_deleted = 1;
                    emp_status_notice.last_modified_by = _clsCurrentUser.EmpId;
                    emp_status_notice.last_modified_date = DateTime.Now;
                    _context.tbl_employment_type_master.Update(emp_status_notice);
                }

                tbl_employment_type_master tbl_employment_type_master_ = new tbl_employment_type_master()
                {
                    employee_id = objtbl.emp_id,
                    employment_type = (byte)EmployeeType.Notice,
                    is_deleted = 0,
                    created_by = _clsCurrentUser.EmpId,
                    last_modified_by = _clsCurrentUser.EmpId,
                    created_date = DateTime.Now,
                    last_modified_date = DateTime.Now,
                    effective_date = DateTime.Now,                  
                };
                _context.tbl_employment_type_master.Add(tbl_employment_type_master_);

                var emp_status_fnf = _context.tbl_employment_type_master.OrderByDescending(y => y.effective_date).Where(x => x.is_deleted == 0 && x.employee_id == objtbl.emp_id && x.employment_type == 10).FirstOrDefault();
                if (emp_status_fnf != null)
                {
                    emp_status_fnf.is_deleted = 1;
                    emp_status_fnf.last_modified_by = _clsCurrentUser.EmpId;
                    emp_status_fnf.last_modified_date = DateTime.Now;
                    _context.tbl_employment_type_master.Update(emp_status_fnf);
                }
                tbl_employment_type_master tbl_employment_type_master1_ = new tbl_employment_type_master()
                {
                    employee_id = objtbl.emp_id,
                    employment_type = (byte)EmployeeType.FNF,
                    is_deleted = 0,
                    created_by = _clsCurrentUser.EmpId,
                    last_modified_by = _clsCurrentUser.EmpId,
                    created_date = DateTime.Now,
                    last_modified_date = DateTime.Now,
                    effective_date = DateTime.Now.AddDays(1),
                  
                };
                _context.tbl_employment_type_master.Add(tbl_employment_type_master1_);

                _context.SaveChanges();

                objresponse.StatusCode = 0;
                objresponse.Message = "Record updated successfully...!!";
                // }
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 2;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
            return Ok(objresponse);
        }

        [HttpGet("Get_EmpWithdrawal/{companyid}")]
        [Authorize(Policy = nameof(enmMenuMaster.EmployeeWithdrawal))]
        public IActionResult Get_EmpWithdrawal([FromRoute] int companyid)
        {
            ResponseMsg objresponse = new ResponseMsg();
            //if (!_clsCurrentUser.CompanyId.Contains(companyid))
            //{
            //    objresponse.StatusCode = 1;
            //    objresponse.Message = "Unauthorize Access...!!";
            //    return Ok(objresponse);
            //}

            try
            {
                var data = _context.tbl_emp_separation.Where(x => x.is_withdrawal == 1 && x.is_deleted == 0 && x.company_id == companyid && _clsCurrentUser.DownlineEmpId.Contains(x.emp_id)).Select(p => new
                {
                    p.sepration_id,
                    p.company_id,
                    p.comp_master.company_name,
                    p.emp_id,
                    emp_name = string.Format("{0} {1} {2}", p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_first_name,
                      p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_middle_name,
                      p.emp_mstr.tbl_emp_officaial_sec.FirstOrDefault(q => q.is_deleted == 0).employee_last_name),
                    emp_code = p.emp_mstr.emp_code,
                    p.resignation_dt,
                    p.last_wrking_dt,
                    p.notice_day,
                    //p.withdrawal_type,
                    p.req_reason,
                    salary_process_type = p.salary_process_type == 1 ? "Salary Hold for Resign" : p.salary_process_type == 2 ? "Salary Process and Hold" : p.salary_process_type == 3 ? "Salary Process" : "",
                    //gratuity = p.gratuity == 1 ? "Yes" : p.gratuity == 0 ? "No" : "",
                    p.req_remarks,
                    p.created_dt
                }).ToList();

                return Ok(data);
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(objresponse);
            }
        }

        [HttpDelete("Delete_Emp_Withdrawal")]
        [Authorize(Policy = nameof(enmMenuMaster.EmployeeWithdrawal))]
        public IActionResult Delete_Emp_Withdrawal([FromBody] tbl_emp_separation objtbl)
        {
            ResponseMsg objresponse = new ResponseMsg();
            if (!_clsCurrentUser.DownlineEmpId.Contains(objtbl.emp_id))
            {
                objresponse.StatusCode = 1;
                objresponse.Message = "Unauthorize Access....!!";
                return Ok(objresponse);
            }
            try
            {
                var exist = _context.tbl_emp_separation.Where(x => x.sepration_id == objtbl.sepration_id && x.emp_id == objtbl.emp_id && x.is_deleted == 0).FirstOrDefault();
                if (exist != null)
                {
                    exist.is_deleted = 1;
                    exist.modified_by = _clsCurrentUser.EmpId;
                    exist.modified_dt = DateTime.Now;

                    _context.Entry(exist).State = EntityState.Modified;
                    _context.SaveChanges();

                    objresponse.StatusCode = 0;
                    objresponse.Message = "Employee Withdrawal successfully deleted";
                }
                else
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Cannot be Delete";
                }
            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 2;
                objresponse.Message = ex.Message;

            }
            return Ok(objresponse);
        }

        [Route("Get_Emp_Withdrawal_details/{sepration_id}/{emp_id}")]
        [HttpGet]
        // [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Get_Emp_Withdrawal_details([FromRoute] int sepration_id, int emp_id)
        {
            try
            {
                var data = _context.tbl_emp_separation.Where(x => x.sepration_id == sepration_id && x.emp_id == emp_id && x.is_deleted == 0).FirstOrDefault();

                return Ok(data);

            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }

    #endregion **END Emp Withdrawl ** 

#if false
    #region KT Module - Made by Anil
        [Route("Get_Employee_esperation/{companyid}/{emp_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Get_Employee_esperation([FromRoute] int companyid, int emp_id)
        {
            ResponseMsg objresponse = new ResponseMsg();
            try
            {

                var user_dtl = _context.tbl_user_master.Where(x => x.employee_id == _clsCurrentUser.EmpId && x.is_active == 1).FirstOrDefault();


                clsUsersDetails objuser_dtl = new clsUsersDetails(_context, _config, user_dtl.username.Trim().ToUpper(), user_dtl.password.Trim(), 0);

                mdlLoginOutput mdl_output = new mdlLoginOutput();
                mdl_output.user_id = objuser_dtl._UserId;
                mdl_output.user_name = objuser_dtl._tbl_user_master.username;
                mdl_output.emp_id = objuser_dtl._tbl_user_master.employee_id ?? 0;
                objuser_dtl.LoadEmpSpecificDetail(mdl_output);


                mdl_output.emp_company_lst = objuser_dtl.Get_emp_company_lst(mdl_output.emp_id, mdl_output);
                var emplist1 = objuser_dtl.Get_Emp_dtl_under_login_emp(mdl_output, _clEmployeeDetail).ToList();
                var esperation_emp = _context.tbl_emp_separation.Where(x => x.is_deleted == 0 && x.is_cancel == 0 && x.is_final_approve == 1).Select(x => x.emp_id).ToList();
                List<EmployeeList> emplist = emplist1.Where(x => esperation_emp.Contains(x._empid)).ToList();
                return Ok(emplist);

            }
            catch (Exception ex)
            {
                objresponse.StatusCode = 1;
                objresponse.Message = ex.Message;
                return Ok(ex.Message);
            }
        }
        [Route("Save_KT_Task_Master")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Save_KT_Task_Master([FromBody] kt_task_master obj_kt_task_Master)
        {
            Response_Msg objResult = new Response_Msg();
            //if (!_clsCurrentUser.CompanyId.Contains(objholidayMaster.company_id))
            //{
            //    objResult.StatusCode = 1;
            //    objResult.Message = "Unauthorize Company Access...!!";
            //    return Ok(objResult);
            //}
            try
            {
                //  var company_id_list = obj_kt_task_Master.company_id_list.Select(x => x.company_id).ToList();
                //var exist = _context.tbl_holiday_master.Where(x => x.holiday_name.Trim().ToUpper() == objholidayMaster.holiday_name.Trim().ToUpper() && x.holiday_date == objholidayMaster.holiday_date && x.tbl_holiday_master_comp_list.FirstOrDefault(g => g.is_deleted == 0).company_id == objholidayMaster.company_id && x.holiday_date.Year == objholidayMaster.holiday_date.Year).FirstOrDefault();  // add by Ravi
                // var exist = _context.tbl_holiday_master.Where(x => x.holiday_name == objholidayMaster.holiday_name && x.holiday_date != objholidayMaster.holiday_date).FirstOrDefault();
                var exist = _context.tbl_kt_task_master.Where(x => x.emp_sepration_Id == obj_kt_task_Master.emp_sepration_Id && x.taskName.Trim().ToUpper() == obj_kt_task_Master.taskName.Trim().ToUpper() && x.is_active == 1).ToList();
                if (exist != null && exist.Count() > 0)
                {
                    objResult.StatusCode = 1;
                    objResult.Message = "Task Name already exist...!";
                    return Ok(objResult);
                }
                else
                {
                    using (var trans = _context.Database.BeginTransaction())
                    {
                        try
                        {
                            Random random_obj = new Random();
                            int random_no_1 = random_obj.Next();
                            var s_no_generate = random_no_1.ToString();

                            tbl_kt_task_master tbl_kt_task_master = new tbl_kt_task_master();

                            tbl_kt_task_master.Task_Sno = s_no_generate;
                            tbl_kt_task_master.emp_sepration_Id = obj_kt_task_Master.emp_sepration_Id;
                            tbl_kt_task_master.taskName = obj_kt_task_Master.taskName;
                            tbl_kt_task_master.Procedure = obj_kt_task_Master.Procedure;
                            tbl_kt_task_master.remarks = obj_kt_task_Master.remarks;
                            tbl_kt_task_master.Status = 0; // initial status is 0 it will be update when kt status will be update after completion step by step
                            tbl_kt_task_master.ModHandover = obj_kt_task_Master.ModHandover;
                            tbl_kt_task_master.is_active = obj_kt_task_Master.is_active;
                            tbl_kt_task_master.created_by = obj_kt_task_Master.created_by;
                            tbl_kt_task_master.last_modified_by = obj_kt_task_Master.last_modified_by;
                            tbl_kt_task_master.CreatedOn = DateTime.Now;
                            tbl_kt_task_master.modified_on = DateTime.Now;

                            _context.Entry(tbl_kt_task_master).State = EntityState.Added;

                            var kt_id = tbl_kt_task_master.id;

    #region for multiple employee store in KT task emp details table

                            var employeesplit = obj_kt_task_Master.emp_id_list.Split(",");

                            List<emp_id_list> emp_id_listd = new List<emp_id_list>();

                            foreach (var s in employeesplit)
                            {
                                emp_id_list obje = new emp_id_list();
                                obje.employee_id = Convert.ToInt32(s);
                                emp_id_listd.Add(obje);
                            }

                            var emp_selected_ids = emp_id_listd.Select(x => x.employee_id).Distinct().ToList();

                            List<tbl_kt_task_emp_details> objemplist = new List<tbl_kt_task_emp_details>();

                            for (int emp = 0; emp < emp_selected_ids.Count; emp++) // for multiple selection of employee
                            {
                                tbl_kt_task_emp_details kt_task_emp_details = new tbl_kt_task_emp_details();
                                kt_task_emp_details.EmpId = emp_selected_ids[emp];
                                kt_task_emp_details.Kt_Master_id = kt_id;
                                kt_task_emp_details.is_deleted = 0;
                                kt_task_emp_details.is_active = 1;
                                kt_task_emp_details.is_deleted = 0;
                                kt_task_emp_details.created_on = DateTime.Now;
                                kt_task_emp_details.modifed_on = DateTime.Now;
                                _context.Entry(kt_task_emp_details).State = EntityState.Added;
                                objemplist.Add(kt_task_emp_details);
                            }
                            _context.tbl_kt_task_emp_details.AddRange(objemplist);

    #endregion

                            _context.SaveChanges();

                            trans.Commit();
                            objResult.StatusCode = 0;
                            objResult.Message = "Task Details Save successfully...!";
                            return Ok(objResult);

                        }
                        catch (Exception ex)
                        {
                            trans.Rollback();
                            objResult.StatusCode = 2;
                            objResult.Message = ex.Message;
                            return Ok(objResult);
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                objResult.StatusCode = 2;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }

        [Route("Save_KT_Task")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Save_KT_Task([FromBody] List<kt_task_master> obj_kt_task_Master)
        {
            Response_Msg objResult = new Response_Msg();
            //if (!_clsCurrentUser.CompanyId.Contains(objholidayMaster.company_id))
            //{
            //    objResult.StatusCode = 1;
            //    objResult.Message = "Unauthorize Company Access...!!";
            //    return Ok(objResult);
            //}
            try
            {

                foreach (var objkt in obj_kt_task_Master)
                {
                    //var exist = _context.tbl_kt_task_master.Where(x => x.emp_sepration_Id == objkt.emp_sepration_Id && x.taskName.Trim().ToUpper() == objkt.taskName.Trim().ToUpper() && x.is_active == 1).ToList();
                    //if (exist != null && exist.Count > 0)
                    //{
                    //    objResult.StatusCode = 1;
                    //    objResult.Message = objkt.taskName + " - Task Name already exist...!";
                    //    return Ok(objResult);
                    //}
                    //else
                    //{

                    try
                    {
                        Random random_obj = new Random();
                        int random_no_1 = random_obj.Next();
                        var s_no_generate = random_no_1.ToString();

                        tbl_kt_task_master tbl_kt_task_master = new tbl_kt_task_master();
                        var pk_sepration_id = _context.tbl_emp_separation.Where(x => x.is_deleted == 0 && x.is_cancel == 0 && x.is_final_approve == 1 && x.emp_id == objkt.emp_sepration_Id).OrderByDescending(x => x.sepration_id).FirstOrDefault().sepration_id;
                        tbl_kt_task_master.Task_Sno = s_no_generate;
                        tbl_kt_task_master.emp_sepration_Id = pk_sepration_id;
                        tbl_kt_task_master.taskName = objkt.taskName;
                        tbl_kt_task_master.Procedure = objkt.Procedure;
                        tbl_kt_task_master.remarks = objkt.remarks;
                        tbl_kt_task_master.Status = 0; // initial status is 0 it will be update when kt status will be update after completion step by step
                        tbl_kt_task_master.ModHandover = objkt.ModHandover;
                        tbl_kt_task_master.is_active = objkt.is_active;
                        tbl_kt_task_master.created_by = objkt.created_by;
                        tbl_kt_task_master.last_modified_by = objkt.last_modified_by;
                        tbl_kt_task_master.CreatedOn = DateTime.Now;
                        tbl_kt_task_master.modified_on = DateTime.Now;

                        _context.Entry(tbl_kt_task_master).State = EntityState.Added;

                        _context.SaveChanges();
                        var kt_id = tbl_kt_task_master.id;

    #region for multiple employee store in KT task emp details table

                        var employeelist = objkt.emp_id_list.Split(",");

                        List<emp_id_list> emp_id_listd = new List<emp_id_list>();
                        foreach (var e in employeelist)
                        {
                            emp_id_list obje = new emp_id_list();
                            obje.employee_id = Convert.ToInt32(e);
                            emp_id_listd.Add(obje);
                        }
                        var emp_selected_ids = emp_id_listd.Select(x => x.employee_id).Distinct().ToList();

                        List<tbl_kt_task_emp_details> objemplist = new List<tbl_kt_task_emp_details>();

                        for (int emp = 0; emp < emp_selected_ids.Count; emp++) // for multiple selection of employee
                        {
                            tbl_kt_task_emp_details kt_task_emp_details = new tbl_kt_task_emp_details();
                            kt_task_emp_details.EmpId = emp_selected_ids[emp];
                            kt_task_emp_details.Kt_Master_id = kt_id;
                            kt_task_emp_details.is_deleted = 0;
                            kt_task_emp_details.is_active = 1;
                            kt_task_emp_details.is_deleted = 0;
                            kt_task_emp_details.created_on = DateTime.Now;
                            kt_task_emp_details.modifed_on = DateTime.Now;
                            _context.Entry(kt_task_emp_details).State = EntityState.Added;
                            objemplist.Add(kt_task_emp_details);
                        }
                        _context.tbl_kt_task_emp_details.AddRange(objemplist);

    #endregion
                    }
                    catch (Exception ex)
                    {
                        objResult.StatusCode = 2;
                        objResult.Message = ex.Message;
                        return Ok(objResult);
                    }
                    //}
                }
                using (var trans = _context.Database.BeginTransaction())
                {
                    try
                    {
                        _context.SaveChanges();
                        trans.Commit();
                        objResult.StatusCode = 0;
                        objResult.Message = "Task Details Save successfully...!";
                        return Ok(objResult);
                    }
                    catch (Exception ex)
                    {
                        trans.Rollback();
                        objResult.StatusCode = 2;
                        objResult.Message = ex.Message;
                        return Ok(objResult);
                    }
                }
            }
            catch (Exception ex)
            {
                objResult.StatusCode = 2;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }

        [Route("Get_KT_Task_List/{loginned_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> Get_KT_Task_List(int loginned_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            if (loginned_id > 0)
            {
                // string[] hno = { "123ss", "2223w", "343dd", "455fddf" };
                List<int> emplst = new List<int>();

                //if (!_clsCurrentUser.RoleId.Contains((int)enmRoleMaster.SuperAdmin))
                //{
                //    List<int> loginid = new List<int>();
                //    loginid.Add(_clsCurrentUser.EmpId);
                //    emplst = _clsCurrentUser.DownlineEmpId.Except(loginid).ToList();
                //}
                //else
                //{
                //    emplst = _clsCurrentUser.DownlineEmpId.ToList();
                //}


                var result = (from hm in _context.tbl_kt_task_master
                              join es in _context.tbl_emp_separation on hm.emp_sepration_Id equals es.sepration_id
                              join c in _context.tbl_company_master on es.company_id equals c.company_id
                              join t2 in _context.tbl_emp_officaial_sec on es.emp_id equals t2.employee_id
                              where (hm.is_active == 1 || hm.is_active == 0) && t2.is_deleted == 0
                              // && _clsCurrentUser.DownlineEmpId.Contains(hm.emp_sepration_Id ?? 0)
                              && es.emp_id == loginned_id && c.is_active == 1 && es.is_final_approve == 1 && es.is_cancel == 0 && es.is_deleted == 0
                              select new
                              {
                                  company = c.company_name,
                                  id = hm.id,
                                  s_no = hm.Task_Sno,
                                  task_name = hm.taskName,
                                  procedure = hm.Procedure,
                                  modhandover = hm.ModHandover,
                                  remarks = hm.remarks,
                                  status = hm.Status.ToString() + "%",
                                  handoverby = $"{t2.employee_first_name} {t2.employee_middle_name ?? string.Empty} {t2.employee_last_name ?? string.Empty}",
                                  created_by = hm.created_by,
                                  created_date = Convert.ToDateTime(hm.CreatedOn).ToString("dd-MMM-yyyy"),
                                  is_active = hm.is_active,
                                  handoverdate = hm.HandoverDate.ToString() == "1/1/0001 12:00:00 AM" ? "---" : Convert.ToDateTime(hm.HandoverDate).ToString("dd-MMM-yyyy"),
                                  empnamelist = (from k in _context.tbl_kt_task_emp_details
                                                 join em in _context.tbl_emp_officaial_sec on k.EmpId equals em.employee_id
                                                 where k.Kt_Master_id == hm.id && k.is_deleted == 0 && k.is_active == 1
                                                 select new { empname = $"{em.employee_first_name} {em.employee_middle_name ?? string.Empty} {em.employee_last_name ?? string.Empty}" }).Distinct().ToList()

                              }).ToList().Distinct().OrderByDescending(x => x.id);
                return Ok(result);
            }
            return Ok(0);
        }

        [Route("Get_KT_Task_ById/{kid}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> Get_KT_Task_ById([FromRoute] int kid)
        {
            ResponseMsg objResult = new ResponseMsg();

            var result = (from hm in _context.tbl_kt_task_master
                          join es in _context.tbl_emp_separation on hm.emp_sepration_Id equals es.sepration_id
                          where (hm.is_active == 1 || hm.is_active == 0) && hm.id == kid && es.is_cancel == 0 && es.is_deleted == 0 && es.is_final_approve == 1
                          select new
                          {
                              company_id = es.company_id,
                              id = hm.id,
                              s_no = hm.Task_Sno,
                              task_name = hm.taskName,
                              procedure = hm.Procedure,
                              modhandover = hm.ModHandover,
                              remarks = hm.remarks,
                              status = hm.Status.ToString(),
                              handoverby = es.emp_id,
                              created_by = hm.created_by,
                              created_date = Convert.ToDateTime(hm.CreatedOn).ToString("dd-MMM-yyyy"),
                              is_active = hm.is_active,
                              handoverdate = hm.HandoverDate.ToString() == "1/1/0001 12:00:00 AM" ? "---" : Convert.ToDateTime(hm.HandoverDate).ToString("dd-MMM-yyyy"),
                              emplist = _context.tbl_kt_task_emp_details.Where(k => k.Kt_Master_id == hm.id && k.is_deleted == 0 && k.is_active == 1)
                                             .Select(x => x.EmpId).ToList()

                          }).FirstOrDefault();

            if (result == null)
            {
                objResult.Message = "Record Not Found...!";
                objResult.StatusCode = 0;
                return Ok(objResult);
            }
            else
            {
                return Ok(result);
            }

        }

        [Route("Update_KT_Task_Master")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> Update_KT_Task_Master([FromBody] kt_task_master obj_kt_task_Master)
        {
            Response_Msg objResult = new Response_Msg();
            //if (!_clsCurrentUser.CompanyId.Contains(objholidayMaster.company_id))
            //{
            //    objResult.StatusCode = 1;
            //    objResult.Message = "Unauthorize Company Access...!!";
            //    return Ok(objResult);
            //}
            try
            {

                var exist = _context.tbl_kt_task_master.Where(x => x.id == obj_kt_task_Master.id).ToList();

                if (exist == null && exist.Count() == 0)
                {
                    objResult.StatusCode = 2;
                    objResult.Message = "KT Task id not exist...!";
                    return Ok(objResult);
                }
                else
                {
                    var kt_task_master_exists = (from a in _context.tbl_kt_task_master select a).Where(x => x.id == obj_kt_task_Master.id).FirstOrDefault();
                    if (kt_task_master_exists == null)
                    {
                        objResult.StatusCode = 2;
                        objResult.Message = "Invalid Data...";
                        return Ok(objResult);
                    }
                    var exist_task = _context.tbl_kt_task_master.Where(x => x.id != obj_kt_task_Master.id && x.is_active == 1 && x.taskName.ToUpper().Trim() == obj_kt_task_Master.taskName.ToUpper().Trim()).ToList();
                    if (exist_task != null && exist_task.Count() > 0)
                    {
                        objResult.StatusCode = 2;
                        objResult.Message = "KT Task Name already exist...!!";
                        return Ok(objResult);
                    }

                    using (var trans = _context.Database.BeginTransaction())
                    {
                        try
                        {
                            var pk_sepration_id = _context.tbl_emp_separation.Where(x => x.is_deleted == 0 && x.is_cancel == 0 && x.is_final_approve == 1 && x.emp_id == obj_kt_task_Master.emp_sepration_Id).OrderByDescending(x => x.sepration_id).FirstOrDefault().sepration_id;
                            kt_task_master_exists.Task_Sno = kt_task_master_exists.Task_Sno;
                            kt_task_master_exists.emp_sepration_Id = pk_sepration_id;// obj_kt_task_Master.emp_sepration_Id;
                            kt_task_master_exists.taskName = obj_kt_task_Master.taskName;
                            kt_task_master_exists.Procedure = obj_kt_task_Master.Procedure;
                            kt_task_master_exists.ModHandover = obj_kt_task_Master.ModHandover;
                            kt_task_master_exists.remarks = obj_kt_task_Master.remarks;
                            kt_task_master_exists.Status = kt_task_master_exists.Status;
                            kt_task_master_exists.created_by = kt_task_master_exists.created_by;
                            kt_task_master_exists.CreatedOn = kt_task_master_exists.CreatedOn;
                            kt_task_master_exists.modified_on = DateTime.Now;
                            kt_task_master_exists.is_deleted = 0;
                            kt_task_master_exists.is_active = obj_kt_task_Master.is_active;
                            kt_task_master_exists.last_modified_by = obj_kt_task_Master.last_modified_by;

                            _context.Entry(kt_task_master_exists).State = EntityState.Modified;

                            //delete exists records from emplisttask
                            List<tbl_kt_task_emp_details> kt_emp_list = (from a in _context.tbl_kt_task_emp_details select a).Where(x => x.Kt_Master_id == obj_kt_task_Master.id && x.is_deleted == 0).ToList();
                            if (kt_emp_list != null)
                            {
                                kt_emp_list.ForEach(p => p.is_deleted = 1);
                                _context.UpdateRange(kt_emp_list);
                            }

    #region for multiple employee store in KT task emp details table

                            var employeelist = obj_kt_task_Master.emp_id_list.Split(",");

                            List<emp_id_list> emp_id_listd = new List<emp_id_list>();
                            foreach (var e in employeelist)
                            {
                                emp_id_list obje = new emp_id_list();
                                obje.employee_id = Convert.ToInt32(e);
                                emp_id_listd.Add(obje);
                            }
                            var emp_selected_ids = emp_id_listd.Select(x => x.employee_id).Distinct().ToList();

                            // var employeelist = obj_kt_task_Master.emp_id_listd;

                            //  var emp_selected_ids = employeelist.Select(x => x.employee_id).Distinct().ToList();

                            List<tbl_kt_task_emp_details> objemplist = new List<tbl_kt_task_emp_details>();

                            for (int emp = 0; emp < emp_selected_ids.Count; emp++) // for multiple selection of employee
                            {
                                tbl_kt_task_emp_details kt_task_emp_details = new tbl_kt_task_emp_details();
                                kt_task_emp_details.EmpId = emp_selected_ids[emp];
                                kt_task_emp_details.Kt_Master_id = obj_kt_task_Master.id;
                                kt_task_emp_details.is_deleted = 0;
                                kt_task_emp_details.is_active = 1;
                                kt_task_emp_details.is_deleted = 0;
                                kt_task_emp_details.created_on = DateTime.Now;
                                kt_task_emp_details.modifed_on = DateTime.Now;
                                _context.Entry(kt_task_emp_details).State = EntityState.Added;
                                objemplist.Add(kt_task_emp_details);
                            }
                            _context.tbl_kt_task_emp_details.AddRange(objemplist);

    #endregion

                            await _context.SaveChangesAsync();

                            trans.Commit();
                            objResult.StatusCode = 0;
                            objResult.Message = "KT Task Details Updated Successfully...!";
                            return Ok(objResult);
                        }
                        catch (Exception ex)
                        {
                            trans.Rollback();
                            objResult.StatusCode = 2;
                            objResult.Message = ex.Message;
                            return Ok(objResult);
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                objResult.StatusCode = 2;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }

        [Route("Get_KT_Task_List_all")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> Get_KT_Task_List_all()
        {
            ResponseMsg objResult = new ResponseMsg();
            var kthandoverto = _context.tbl_kt_task_emp_details.Where(x => x.is_active == 1 && x.is_deleted == 0).ToList();
            var result = (from hm in _context.tbl_kt_task_master
                          join es in _context.tbl_emp_separation on hm.emp_sepration_Id equals es.sepration_id
                          join t2 in _context.tbl_emp_officaial_sec on es.emp_id equals t2.employee_id
                          //join d in _context.tbl_kt_task_emp_details on hm.id equals d.Kt_Master_id 
                          where (hm.is_active == 1 || hm.is_active == 0) && t2.is_deleted == 0 && es.is_deleted == 0 && es.is_cancel == 0
                          && es.is_final_approve == 1 && (_clsCurrentUser.DownlineEmpId.Contains(es.emp_id) || es.emp_id == _clsCurrentUser.EmpId
                          // || d.EmpId == _clsCurrentUser.EmpId
                          || (kthandoverto.Where(x => x.Kt_Master_id == hm.id && x.EmpId == _clsCurrentUser.EmpId).Count() > 0)
                          ) //&& d.is_active == 1 && d.is_deleted == 0
                          select new
                          {
                              id = hm.id,
                              s_no = hm.Task_Sno,
                              task_name = hm.taskName,
                              procedure = hm.Procedure,
                              modhandover = hm.ModHandover,
                              remarks = hm.remarks,
                              status = hm.Status.ToString() + "%",
                              handoverby = $"{t2.employee_first_name} {t2.employee_middle_name ?? string.Empty} {t2.employee_last_name ?? string.Empty}",
                              created_by = hm.created_by,
                              created_date = Convert.ToDateTime(hm.CreatedOn).ToString("dd-MMM-yyyy"),
                              is_active = hm.is_active,
                              handoverdate = hm.HandoverDate.ToString() == "1/1/0001 12:00:00 AM" ? "---" : Convert.ToDateTime(hm.HandoverDate).ToString("dd-MMM-yyyy"),
                              empnamelist = (from k in _context.tbl_kt_task_emp_details
                                             join em in _context.tbl_emp_officaial_sec on k.EmpId equals em.employee_id
                                             where k.Kt_Master_id == hm.id && k.is_deleted == 0 && k.is_active == 1
                                             select new { empname = $"{em.employee_first_name} {em.employee_middle_name ?? string.Empty} {em.employee_last_name ?? string.Empty}" }).Distinct().ToList()

                          }).ToList().Distinct().OrderByDescending(x => x.id);
            return Ok(result);

        }

        [Route("Save_KT_Task_Status")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public IActionResult Save_KT_Task_Status([FromBody] tbl_kt_status obj_kt_task_status)
        {
            Response_Msg objResult = new Response_Msg();

            try
            {

                using (var trans = _context.Database.BeginTransaction())
                {
                    try
                    {
                        var getlatest_status = _context.tbl_kt_status.Where(x => x.Kt_Master_id == obj_kt_task_status.Kt_Master_id).OrderByDescending(x => x.id).FirstOrDefault();
                        if (obj_kt_task_status.Status > 100)
                        {
                            objResult.StatusCode = 1;
                            objResult.Message = "KT Status can not be greater than 100% ...!!";
                            return Ok(objResult);
                        }
                        if (getlatest_status != null)
                        {
                            if ((obj_kt_task_status.Status == 100) && (Convert.ToInt32(getlatest_status.Status) == obj_kt_task_status.Status))
                            {
                                objResult.StatusCode = 1;
                                objResult.Message = "KT Status is already completed 100% ...!!";
                                return Ok(objResult);
                            }

                            if (Convert.ToInt32(getlatest_status.Status) >= obj_kt_task_status.Status)
                            {
                                objResult.StatusCode = 1;
                                objResult.Message = "New KT Status must be greater than current status...!!";
                                return Ok(objResult);
                            }
                        }
                        tbl_kt_status tbl_kt_status = new tbl_kt_status();
                        tbl_kt_status.Kt_Master_id = obj_kt_task_status.Kt_Master_id;
                        tbl_kt_status.Status = obj_kt_task_status.Status;
                        tbl_kt_status.created_by = obj_kt_task_status.created_by;
                        tbl_kt_status.last_modified_by = obj_kt_task_status.last_modified_by;
                        tbl_kt_status.CreatedOn = DateTime.Now;
                        tbl_kt_status.modified_on = DateTime.Now;

                        _context.Entry(tbl_kt_status).State = EntityState.Added;
                        _context.SaveChanges();

                        // update latest status of kt task
                        var task = _context.tbl_kt_task_master.Find(obj_kt_task_status.Kt_Master_id);
                        var getlateststatus = _context.tbl_kt_status.Where(x => x.Kt_Master_id == obj_kt_task_status.Kt_Master_id).OrderByDescending(x => x.id).FirstOrDefault();
                        task.Status = getlateststatus.Status;
                        _context.Entry(task).State = EntityState.Modified;
                        _context.SaveChanges();

                        trans.Commit();
                        objResult.StatusCode = 0;
                        objResult.Message = "Task Status Save successfully...!";
                        return Ok(objResult);

                    }
                    catch (Exception ex)
                    {
                        trans.Rollback();
                        objResult.StatusCode = 2;
                        objResult.Message = ex.Message;
                        return Ok(objResult);
                    }
                }

            }
            catch (Exception ex)
            {
                objResult.StatusCode = 2;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }

        [Route("Update_KT_Task_Status")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> Update_KT_Task_Status([FromBody] tbl_kt_status obj_kt_task_status)
        {
            Response_Msg objResult = new Response_Msg();
            try
            {

                var exist = _context.tbl_kt_status.Where(x => x.id == obj_kt_task_status.id).FirstOrDefault();

                if (exist == null)
                {
                    objResult.StatusCode = 2;
                    objResult.Message = "KT Task Status id not exist...!";
                    return Ok(objResult);
                }
                else
                {
                    using (var trans = _context.Database.BeginTransaction())
                    {
                        try
                        {
                            var getlatest_status = _context.tbl_kt_status.Where(x => x.Kt_Master_id == obj_kt_task_status.Kt_Master_id).OrderByDescending(x => x.id).FirstOrDefault();
                            if (obj_kt_task_status.Status > 100)
                            {
                                objResult.StatusCode = 1;
                                objResult.Message = "KT Status can not be greater than 100% ...!!";
                                return Ok(objResult);
                            }
                            if (getlatest_status != null)
                            {
                                if ((obj_kt_task_status.Status == 100) && (Convert.ToInt32(getlatest_status.Status) == obj_kt_task_status.Status))
                                {
                                    objResult.StatusCode = 1;
                                    objResult.Message = "KT Status is already completed 100% ...!!";
                                    return Ok(objResult);
                                }
                                if (Convert.ToInt32(getlatest_status.Status) >= obj_kt_task_status.Status)
                                {
                                    objResult.StatusCode = 1;
                                    objResult.Message = "New KT Status must be greater than current status...!!";
                                    return Ok(objResult);
                                }
                            }
                            exist.Status = obj_kt_task_status.Status;
                            exist.created_by = exist.created_by;
                            exist.CreatedOn = exist.CreatedOn;
                            exist.modified_on = DateTime.Now;
                            exist.last_modified_by = obj_kt_task_status.last_modified_by;

                            _context.Entry(exist).State = EntityState.Modified;
                            await _context.SaveChangesAsync();
                            // update latest status of kt task
                            var task = _context.tbl_kt_task_master.Find(obj_kt_task_status.Kt_Master_id);
                            var getlateststatus = _context.tbl_kt_status.Where(x => x.Kt_Master_id == obj_kt_task_status.Kt_Master_id).OrderByDescending(x => x.id).FirstOrDefault();
                            task.Status = getlateststatus.Status;
                            _context.Entry(task).State = EntityState.Modified;
                            await _context.SaveChangesAsync();

                            trans.Commit();
                            objResult.StatusCode = 0;
                            objResult.Message = "KT Task Status Updated Successfully...!";
                            return Ok(objResult);
                        }
                        catch (Exception ex)
                        {
                            trans.Rollback();
                            objResult.StatusCode = 2;
                            objResult.Message = ex.Message;
                            return Ok(objResult);
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                objResult.StatusCode = 2;
                objResult.Message = ex.Message;
                return Ok(objResult);
            }
        }

        [Route("Get_KT_Task_Status_List/{loginned_id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> Get_KT_Task_Status_List(int loginned_id)
        {
            ResponseMsg objResult = new ResponseMsg();
            if (loginned_id > 0)
            {
                // string[] hno = { "123ss", "2223w", "343dd", "455fddf" };

                var result = (from hm in _context.tbl_kt_task_master
                              join es in _context.tbl_emp_separation on hm.emp_sepration_Id equals es.sepration_id
                              join ks in _context.tbl_kt_status on hm.id equals ks.Kt_Master_id
                              // join t2 in _context.tbl_emp_officaial_sec on hm.emp_sepration_Id equals t2.employee_id
                              where hm.is_active == 1 && es.emp_id == loginned_id && es.is_final_approve == 1 && es.is_deleted == 0 && es.is_cancel == 0
                              select new
                              {
                                  sid = ks.id,
                                  id = hm.id,
                                  task_name = hm.taskName,
                                  status = ks.Status.ToString() + "%",
                                  created_date = Convert.ToDateTime(ks.CreatedOn).ToString("dd-MMM-yyyy"),
                                  updated_date = ks.modified_on.ToString() == "1/1/0001 12:00:00 AM" ? "---" : Convert.ToDateTime(ks.modified_on).ToString("dd-MMM-yyyy"),
                              }).ToList().Distinct().OrderByDescending(x => x.sid);
                return Ok(result);
            }
            return Ok(0);
        }

        [Route("Get_KT_Task_Status_ById/{id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> Get_KT_Task_Status_ById([FromRoute] int id)
        {
            ResponseMsg objResult = new ResponseMsg();

            var result = (from hm in _context.tbl_kt_status
                          join kt in _context.tbl_kt_task_master on hm.Kt_Master_id equals kt.id
                          join es in _context.tbl_emp_separation on kt.emp_sepration_Id equals es.sepration_id
                          where hm.id == id && es.is_cancel == 0 && es.is_deleted == 0 && es.is_final_approve == 1
                          select new
                          {
                              id = hm.id,
                              taskid = hm.Kt_Master_id,
                              handoverby = es.emp_id,
                              status = hm.Status,
                              company_id = es.company_id

                          }).FirstOrDefault();

            if (result == null)
            {
                objResult.Message = "Record Not Found...!";
                objResult.StatusCode = 0;
                return Ok(objResult);
            }
            else
            {
                return Ok(result);
            }

        }

        [Route("Upload_KTTaskStatus")]
        [HttpPost]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> Upload_KTTaskStatus()
        {
            try
            {
                ResponseMsg objresponse = new ResponseMsg();
                var files = HttpContext.Request.Form.Files;
                var a = HttpContext.Request.Form["AllData"];
                if (string.IsNullOrEmpty(a.ToString()))
                {
                    objresponse.StatusCode = 1;
                    objresponse.Message = "Invalid Data !!";
                    return Ok(objresponse);
                }

                CommonClass objcom = new CommonClass();
                tbl_kt_file objkt = new tbl_kt_file();
                objkt = objcom.ToObjectFromJSON<tbl_kt_file>(a.ToString());

                //open excel using openxml sdk
                StringBuilder excelResult = new StringBuilder();
                List<tbl_kt_file> kt_filelst = new List<tbl_kt_file>();
                string get_file_path = "";

                for (int i = 0; i < files.Count; i++)
                {
                    if (files[i].Length > 0 && files[i] != null)
                    {
                        //var allowedExtensions = new[] { ".xlsx",".xls",".docx",".doc" };

                        var ext = Path.GetExtension(files[i].FileName); //getting the extension
                                                                        //if (allowedExtensions.Contains(ext.ToLower()))//check what type of extension  
                                                                        //{
                        string name = Path.GetFileNameWithoutExtension(files[i].FileName); //getting file name without extension  


                        string MyFileName = "KT_Task_" + DateTime.Now.ToString("dd_MM_yyyy_hh_mm_ss_tt") + ext; //Guid.NewGuid().ToString().Replace("-", "") +

                        var webRoot = _hostingEnvironment.WebRootPath;

                        string currentmonth = Convert.ToString(DateTime.Now.Month).Length.ToString() == "1" ? "0" + Convert.ToString(DateTime.Now.Month) : Convert.ToString(DateTime.Now.Month);

                        var currentyearmonth = Convert.ToString(DateTime.Now.Year) + currentmonth;

                        var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/KTTask/");

                        //save file
                        using (var fileStream = new FileStream(Path.Combine(path, MyFileName), FileMode.Create))
                        {
                            files[i].CopyTo(fileStream);
                            get_file_path = fileStream.Name;

                            objkt.ktfile = MyFileName;
                            objkt.uploadedOn = DateTime.Now;
                            objkt.modified_on = DateTime.Now;

                            _context.Entry(objkt).State = EntityState.Added;
                            _context.SaveChanges();

                        }
                        //}
                        //else
                        //{
                        //    objresponse.StatusCode = 1;
                        //    objresponse.Message = "Please Select Only Excel File or Doc File";
                        //    return Ok(objresponse);
                        //}
                    }
                    else
                    {
                        objresponse.StatusCode = 1;
                        objresponse.Message = "Please Select File";
                        return Ok(objresponse);
                    }
                }
                objresponse.StatusCode = 0;
                objresponse.Message = "KT File is uploaded successfully";
                return Ok(objresponse);
            }
            catch (Exception ex)
            {
                return Ok(ex.Message);
            }
        }

        [Route("Get_KT_file_ById/{id}")]
        [HttpGet]
        [Authorize(Policy = nameof(enmMenuMaster.Dashboard))]
        public async Task<IActionResult> Get_KT_file_ById([FromRoute] int id)
        {
            ResponseMsg objResult = new ResponseMsg();

            var result = _context.tbl_kt_file.Where(x => x.seperation_id == id).OrderByDescending(x => x.id).FirstOrDefault();

            if (result == null)
            {
                objResult.Message = "Record Not Found...!";
                objResult.StatusCode = 0;
                return Ok(objResult);
            }
            else
            {
                var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" + "/KTTask/" + result.ktfile);
                return Ok(new { ktfile = result.ktfile });
            }

        }
    #endregion
#endif
    }
#endif
}
