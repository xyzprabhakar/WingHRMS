// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projContext.DB.CRM.Travel;

namespace projContext.Migrations.Travel2
{
    [DbContext(typeof(TravelContext))]
    [Migration("20220122061516_22_jan-2021")]
    partial class _22_jan2021
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblAirline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<bool>("isLcc");

                    b.HasKey("Id");

                    b.ToTable("tblAirline");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblAirport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AirportCode")
                        .HasMaxLength(200);

                    b.Property<string>("AirportName")
                        .HasMaxLength(200);

                    b.Property<string>("CityCode")
                        .HasMaxLength(200);

                    b.Property<string>("CityName")
                        .HasMaxLength(200);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(200);

                    b.Property<string>("CountryName")
                        .HasMaxLength(200);

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDomestic");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.Property<string>("Terminal")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("tblAirport");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlighBookingPassengerDetails", b =>
                {
                    b.Property<string>("PassengerDetailId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64);

                    b.Property<string>("LastName")
                        .HasMaxLength(64);

                    b.Property<int>("PassengerType");

                    b.Property<DateTime?>("PassportExpiryDate");

                    b.Property<DateTime?>("PassportIssueDate");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(64);

                    b.Property<int>("Title");

                    b.Property<string>("VisitorId");

                    b.HasKey("PassengerDetailId");

                    b.HasIndex("VisitorId");

                    b.ToTable("tblFlighBookingPassengerDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlighRefundPassengerDetails", b =>
                {
                    b.Property<int>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64);

                    b.Property<string>("LastName")
                        .HasMaxLength(64);

                    b.Property<int>("PassengerType");

                    b.Property<DateTime?>("PassportExpiryDate");

                    b.Property<DateTime?>("PassportIssueDate");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(64);

                    b.Property<string>("RefundId");

                    b.Property<string>("Title")
                        .HasMaxLength(16);

                    b.HasKey("Sno");

                    b.ToTable("tblFlighRefundPassengerDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightBookingAlterDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlterId");

                    b.Property<int>("CabinClass");

                    b.Property<string>("ClassOfBooking");

                    b.Property<string>("Identifier")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("AlterId");

                    b.ToTable("tblFlightBookingAlterDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightBookingAlterMaster", b =>
                {
                    b.Property<int>("AlterId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CabinClass");

                    b.Property<string>("ClassOfBooking");

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("Identifier")
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.HasKey("AlterId");

                    b.ToTable("tblFlightBookingAlterMaster");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightBookingMaster", b =>
                {
                    b.Property<string>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(32);

                    b.Property<int>("AdultCount");

                    b.Property<string>("BankName")
                        .HasMaxLength(128);

                    b.Property<double>("BookingAmount");

                    b.Property<DateTime>("BookingDate");

                    b.Property<int>("BookingStatus");

                    b.Property<int>("CabinClass");

                    b.Property<string>("CardNo")
                        .HasMaxLength(32);

                    b.Property<int>("ChildCount");

                    b.Property<double>("ConsumedLoyaltyAmount");

                    b.Property<int>("ConsumedLoyaltyPoint");

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<DateTime>("DepartureDt");

                    b.Property<string>("EmailNo")
                        .HasMaxLength(128);

                    b.Property<string>("From");

                    b.Property<double>("GatewayCharge");

                    b.Property<int>("GatewayId");

                    b.Property<bool>("HaveRefund");

                    b.Property<bool>("IncludeLoaylty");

                    b.Property<int>("InfantCount");

                    b.Property<int>("JourneyType");

                    b.Property<double>("LoyaltyAmount");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.Property<double>("NetAmount");

                    b.Property<ulong>("Nid");

                    b.Property<int>("OrgId");

                    b.Property<double>("PaidAmount");

                    b.Property<int>("PaymentMode");

                    b.Property<int>("PaymentStatus");

                    b.Property<string>("PaymentTransactionNumber")
                        .HasMaxLength(128);

                    b.Property<int>("PaymentType");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("ReturnDt");

                    b.Property<string>("To");

                    b.Property<double>("WalletAmount");

                    b.HasKey("VisitorId");

                    b.ToTable("tblFlightBookingMaster");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightBookingSearchDetails", b =>
                {
                    b.Property<string>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<int>("BookedCabinClass");

                    b.Property<string>("BookedClassOfBooking")
                        .HasMaxLength(256);

                    b.Property<string>("BookedIdentifier")
                        .HasMaxLength(64);

                    b.Property<int>("BookingStatus");

                    b.Property<double>("ConvenienceAmount");

                    b.Property<double>("CustomerMarkupAmount");

                    b.Property<double>("DiscountAmount");

                    b.Property<bool>("HaveRefund");

                    b.Property<double>("IncentiveAmount");

                    b.Property<bool>("IncludeBaggageServices");

                    b.Property<bool>("IncludeMealServices");

                    b.Property<bool>("IncludeSeatServices");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("MarkupAmount");

                    b.Property<double>("NetSaleAmount");

                    b.Property<double>("PassengerConvenienceAmount");

                    b.Property<double>("PassengerDiscountAmount");

                    b.Property<double>("PassengerIncentiveAmount");

                    b.Property<double>("PassengerMarkupAmount");

                    b.Property<double>("PassengerServiceMarkupAmount");

                    b.Property<int>("PaymentStatus");

                    b.Property<string>("ProviderBookingId")
                        .HasMaxLength(128);

                    b.Property<double>("PurchaseAmount");

                    b.Property<int>("PurchaseCabinClass");

                    b.Property<string>("PurchaseClassOfBooking")
                        .HasMaxLength(256);

                    b.Property<string>("PurchaseIdentifier")
                        .HasMaxLength(64);

                    b.Property<string>("Remarks")
                        .HasMaxLength(25);

                    b.Property<double>("SaleAmount");

                    b.Property<int>("SegmentId");

                    b.Property<int>("ServiceProvider");

                    b.Property<double>("TotalAmount");

                    b.Property<string>("VisitorId");

                    b.HasKey("BookingId");

                    b.HasIndex("VisitorId");

                    b.ToTable("tblFlightBookingSearchDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightClassOfBooking", b =>
                {
                    b.Property<int>("BookingClassId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingClassCode")
                        .HasMaxLength(16);

                    b.Property<string>("GenerlizedName")
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.HasKey("BookingClassId");

                    b.ToTable("tblFlightClassOfBooking");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<double>("AmountCaping");

                    b.Property<int>("Applicability");

                    b.Property<string>("ApprovalRemarks")
                        .HasMaxLength(128);

                    b.Property<byte>("ApprovalStatus");

                    b.Property<ulong?>("ApprovedBy");

                    b.Property<DateTime?>("ApprovedDt");

                    b.Property<DateTime>("BookingFromDt");

                    b.Property<DateTime>("BookingToDt");

                    b.Property<int>("FlightType");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsAllAirline");

                    b.Property<bool>("IsAllCustomer");

                    b.Property<bool>("IsAllCustomerType");

                    b.Property<bool>("IsAllFlightClass");

                    b.Property<bool>("IsAllPessengerType");

                    b.Property<bool>("IsAllProvider");

                    b.Property<bool>("IsAllSegment");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMLMIncentive");

                    b.Property<bool>("IsPercentage");

                    b.Property<double>("PercentageValue");

                    b.Property<ulong>("RequestedBy");

                    b.Property<DateTime?>("RequestedDt");

                    b.Property<string>("RequestedRemarks")
                        .HasMaxLength(128);

                    b.Property<DateTime>("TravelFromDt");

                    b.Property<DateTime>("TravelToDt");

                    b.HasKey("Id");

                    b.ToTable("tblFlightConvenience");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceAirline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AirlineId");

                    b.Property<int?>("ChargeId");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightConvenienceAirline");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceCustomerDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int?>("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("tblFlightConvenienceCustomerDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceCustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("customerType");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightConvenienceCustomerType");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceFlightClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CabinClass");

                    b.Property<int?>("ChargeId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightConvenienceFlightClass");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConveniencePassengerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("PassengerType");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightConveniencePassengerType");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<string>("destination");

                    b.Property<string>("orign");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightConvenienceSegment");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("ServiceProvider");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightConvenienceServiceProvider");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightCustomerMarkup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("EffectiveFromDt");

                    b.Property<DateTime>("EffectiveToDt");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("MarkupAmount");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.Property<ulong>("Nid");

                    b.HasKey("Id");

                    b.ToTable("tblFlightCustomerMarkup");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<double>("AmountCaping");

                    b.Property<int>("Applicability");

                    b.Property<string>("ApprovalRemarks")
                        .HasMaxLength(128);

                    b.Property<byte>("ApprovalStatus");

                    b.Property<ulong?>("ApprovedBy");

                    b.Property<DateTime?>("ApprovedDt");

                    b.Property<DateTime>("BookingFromDt");

                    b.Property<DateTime>("BookingToDt");

                    b.Property<int>("FlightType");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsAllAirline");

                    b.Property<bool>("IsAllCustomer");

                    b.Property<bool>("IsAllCustomerType");

                    b.Property<bool>("IsAllFlightClass");

                    b.Property<bool>("IsAllPessengerType");

                    b.Property<bool>("IsAllProvider");

                    b.Property<bool>("IsAllSegment");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMLMIncentive");

                    b.Property<bool>("IsPercentage");

                    b.Property<double>("PercentageValue");

                    b.Property<ulong>("RequestedBy");

                    b.Property<DateTime?>("RequestedDt");

                    b.Property<string>("RequestedRemarks")
                        .HasMaxLength(128);

                    b.Property<DateTime>("TravelFromDt");

                    b.Property<DateTime>("TravelToDt");

                    b.HasKey("Id");

                    b.ToTable("tblFlightDiscount");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountAirline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AirlineId");

                    b.Property<int?>("ChargeId");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightDiscountAirline");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountCustomerDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int?>("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("tblFlightDiscountCustomerDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountCustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("customerType");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightDiscountCustomerType");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountFlightClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CabinClass");

                    b.Property<int?>("ChargeId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightDiscountFlightClass");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountPassengerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("PassengerType");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightDiscountPassengerType");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<string>("destination");

                    b.Property<string>("orign");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightDiscountSegment");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("ServiceProvider");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightDiscountServiceProvider");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareConvenience", b =>
                {
                    b.Property<int>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("BookingId")
                        .HasMaxLength(128);

                    b.Property<int?>("ConvenienceId");

                    b.HasKey("Sno");

                    b.HasIndex("BookingId");

                    b.HasIndex("ConvenienceId");

                    b.ToTable("tblFlightFareConvenience");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDetail", b =>
                {
                    b.Property<string>("FlightFareDetailId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25);

                    b.Property<double>("BaseFare");

                    b.Property<string>("BookingId")
                        .HasMaxLength(128);

                    b.Property<double>("Convenience");

                    b.Property<double>("Discount");

                    b.Property<double>("MLMMarkup");

                    b.Property<double>("NetFare");

                    b.Property<string>("PassengerDetailId")
                        .HasMaxLength(128);

                    b.Property<double>("ServiceChargeAmount");

                    b.Property<double>("ServiceChargeMarkup");

                    b.Property<double>("Tax");

                    b.Property<double>("TotalFare");

                    b.Property<double>("WingMarkup");

                    b.Property<double>("YQTax");

                    b.HasKey("FlightFareDetailId");

                    b.HasIndex("BookingId");

                    b.HasIndex("PassengerDetailId");

                    b.ToTable("tblFlightFareDetail");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDetailConvenience", b =>
                {
                    b.Property<ulong>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int?>("ConvenienceId");

                    b.Property<string>("FareDetailId");

                    b.HasKey("Sno");

                    b.HasIndex("ConvenienceId");

                    b.HasIndex("FareDetailId");

                    b.ToTable("tblFlightFareDetailConvenience");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDetailDiscount", b =>
                {
                    b.Property<ulong>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int?>("DiscountId");

                    b.Property<string>("FareDetailId");

                    b.HasKey("Sno");

                    b.HasIndex("DiscountId");

                    b.HasIndex("FareDetailId");

                    b.ToTable("tblFlightFareDetailDiscount");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDetailMLMMarkup", b =>
                {
                    b.Property<ulong>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("FareDetailId")
                        .HasMaxLength(128);

                    b.Property<int?>("MLMMarkupId");

                    b.HasKey("Sno");

                    b.HasIndex("FareDetailId");

                    b.HasIndex("MLMMarkupId");

                    b.ToTable("tblFlightFareDetailMLMMarkup");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDetailMarkupDetail", b =>
                {
                    b.Property<ulong>("Sno")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25);

                    b.Property<double>("Amount");

                    b.Property<string>("FareDetailId")
                        .HasMaxLength(128);

                    b.Property<int?>("MarkupId");

                    b.HasKey("Sno");

                    b.HasIndex("FareDetailId");

                    b.HasIndex("MarkupId");

                    b.ToTable("tblFlightFareDetailMarkupDetail");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDetail_Caching", b =>
                {
                    b.Property<int>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BaseFare");

                    b.Property<string>("CabinBaggage");

                    b.Property<string>("CheckingBaggage");

                    b.Property<double>("Discount");

                    b.Property<bool>("IsFreeMeal");

                    b.Property<byte>("IsRefundable");

                    b.Property<double>("NetFare");

                    b.Property<double>("Tax");

                    b.Property<double>("TotalFare");

                    b.Property<double>("WingMarkup");

                    b.Property<double>("YQTax");

                    b.HasKey("Sno");

                    b.ToTable("tblFlightFareDetail_Caching");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDiscount", b =>
                {
                    b.Property<int>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("BookingId")
                        .HasMaxLength(128);

                    b.Property<int?>("DiscountId");

                    b.HasKey("Sno");

                    b.HasIndex("BookingId");

                    b.HasIndex("DiscountId");

                    b.ToTable("tblFlightFareDiscount");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareFilter", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int>("CustomerType");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEanableAllFare");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.HasKey("FilterId");

                    b.ToTable("tblFlightFareFilter");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareFilterDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassOfBooking");

                    b.Property<int?>("FilterId");

                    b.Property<string>("Identifier")
                        .HasMaxLength(64);

                    b.Property<int?>("tblFlightFareFilterFilterId");

                    b.HasKey("Id");

                    b.HasIndex("FilterId");

                    b.HasIndex("tblFlightFareFilterFilterId");

                    b.ToTable("tblFlightFareFilterDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareMLMMarkup", b =>
                {
                    b.Property<int>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("BookingId")
                        .HasMaxLength(128);

                    b.Property<int?>("MLMMarkupId");

                    b.HasKey("Sno");

                    b.HasIndex("BookingId");

                    b.HasIndex("MLMMarkupId");

                    b.ToTable("tblFlightFareMLMMarkup");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareMarkupDetail", b =>
                {
                    b.Property<int>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("BookingId")
                        .HasMaxLength(128);

                    b.Property<int?>("MarkupId");

                    b.HasKey("Sno");

                    b.HasIndex("BookingId");

                    b.HasIndex("MarkupId");

                    b.ToTable("tblFlightFareMarkupDetail");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFare_Caching", b =>
                {
                    b.Property<int>("FareId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdultPrice");

                    b.Property<double>("BaseFare");

                    b.Property<int>("CabinClass");

                    b.Property<int?>("ChildPrice");

                    b.Property<string>("ClassOfBooking");

                    b.Property<double>("Convenience");

                    b.Property<double>("CustomerMarkup");

                    b.Property<double>("Discount");

                    b.Property<string>("Identifier")
                        .HasMaxLength(64);

                    b.Property<int?>("InfantPrice");

                    b.Property<double>("NetFare");

                    b.Property<double>("PromoCode");

                    b.Property<double>("PromoDiscount");

                    b.Property<string>("ProviderFareDetailId")
                        .HasMaxLength(256);

                    b.Property<int?>("SearchIndexId");

                    b.Property<int>("SeatRemaning");

                    b.Property<double>("TotalFare");

                    b.Property<double>("WingMarkup");

                    b.HasKey("FareId");

                    b.HasIndex("AdultPrice");

                    b.HasIndex("ChildPrice");

                    b.HasIndex("InfantPrice");

                    b.HasIndex("SearchIndexId");

                    b.ToTable("tblFlightFare_Caching");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightInstantBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int>("CustomerType");

                    b.Property<DateTime>("EffectiveFromDate");

                    b.Property<bool>("InstantDomestic");

                    b.Property<bool>("InstantNonDomestic");

                    b.Property<bool>("IsDeleted");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("tblFlightInstantBooking");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupAirline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AirlineId");

                    b.Property<int?>("ChargeId");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightMarkupAirline");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupCustomerDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int?>("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("tblFlightMarkupCustomerDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupCustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("customerType");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightMarkupCustomerType");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupFlightClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CabinClass");

                    b.Property<int?>("ChargeId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightMarkupFlightClass");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<double>("AmountCaping");

                    b.Property<int>("Applicability");

                    b.Property<string>("ApprovalRemarks")
                        .HasMaxLength(128);

                    b.Property<byte>("ApprovalStatus");

                    b.Property<ulong?>("ApprovedBy");

                    b.Property<DateTime?>("ApprovedDt");

                    b.Property<DateTime>("BookingFromDt");

                    b.Property<DateTime>("BookingToDt");

                    b.Property<int>("FlightType");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsAllAirline");

                    b.Property<bool>("IsAllCustomer");

                    b.Property<bool>("IsAllCustomerType");

                    b.Property<bool>("IsAllFlightClass");

                    b.Property<bool>("IsAllPessengerType");

                    b.Property<bool>("IsAllProvider");

                    b.Property<bool>("IsAllSegment");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMLMIncentive");

                    b.Property<bool>("IsPercentage");

                    b.Property<double>("PercentageValue");

                    b.Property<ulong>("RequestedBy");

                    b.Property<DateTime?>("RequestedDt");

                    b.Property<string>("RequestedRemarks")
                        .HasMaxLength(128);

                    b.Property<DateTime>("TravelFromDt");

                    b.Property<DateTime>("TravelToDt");

                    b.HasKey("Id");

                    b.ToTable("tblFlightMarkupMaster");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupPassengerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("PassengerType");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightMarkupPassengerType");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<string>("destination");

                    b.Property<string>("orign");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightMarkupSegment");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("ServiceProvider");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightMarkupServiceProvider");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightRefundStatusDetails", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<string>("BookingId")
                        .HasMaxLength(128);

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("ProviderBookingId")
                        .HasMaxLength(256);

                    b.Property<double>("RefundAmount");

                    b.Property<int>("RefundStatus");

                    b.Property<string>("Remarks")
                        .HasMaxLength(25);

                    b.Property<int>("ServiceProvider");

                    b.HasKey("RefundId");

                    b.HasIndex("BookingId");

                    b.ToTable("tblFlightRefundStatusDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchRequest_Caching", b =>
                {
                    b.Property<string>("CachingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<int>("AdultCount");

                    b.Property<int>("ChildCount");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("Destination")
                        .HasMaxLength(24);

                    b.Property<DateTime>("ExpiredDt");

                    b.Property<int>("FlightCabinClass");

                    b.Property<int>("InfantCount");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("JourneyType");

                    b.Property<double>("MinmumPrice");

                    b.Property<string>("Origin")
                        .HasMaxLength(24);

                    b.Property<string>("ProviderTraceId")
                        .HasMaxLength(64);

                    b.Property<int>("ServiceProvider");

                    b.Property<DateTime>("TravelDt");

                    b.HasKey("CachingId");

                    b.ToTable("tblFlightSearchRequest_Caching");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchResponses_Caching", b =>
                {
                    b.Property<int>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ResponseId")
                        .HasMaxLength(64);

                    b.HasKey("IndexId");

                    b.HasIndex("ResponseId");

                    b.ToTable("tblFlightSearchResponses_Caching");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchSegment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<string>("AirlineType")
                        .HasMaxLength(30);

                    b.Property<DateTime>("ArrivalTime");

                    b.Property<string>("BookingId")
                        .HasMaxLength(128);

                    b.Property<string>("Code")
                        .HasMaxLength(32);

                    b.Property<DateTime>("DepartureTime");

                    b.Property<string>("DestinationAirportCode")
                        .HasMaxLength(32);

                    b.Property<string>("DestinationAirportName")
                        .HasMaxLength(256);

                    b.Property<string>("DestinationCityCode")
                        .HasMaxLength(64);

                    b.Property<string>("DestinationCityName")
                        .HasMaxLength(256);

                    b.Property<string>("DestinationCountryCode")
                        .HasMaxLength(64);

                    b.Property<string>("DestinationCountryName")
                        .HasMaxLength(256);

                    b.Property<string>("DestinationTerminal")
                        .HasMaxLength(64);

                    b.Property<int>("Duration");

                    b.Property<string>("FlightNumber")
                        .HasMaxLength(32);

                    b.Property<int>("Layover");

                    b.Property<int>("Mile");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("OperatingCarrier")
                        .HasMaxLength(128);

                    b.Property<string>("OriginAirportCode")
                        .HasMaxLength(32);

                    b.Property<string>("OriginAirportName")
                        .HasMaxLength(256);

                    b.Property<string>("OriginCityCode")
                        .HasMaxLength(64);

                    b.Property<string>("OriginCityName")
                        .HasMaxLength(256);

                    b.Property<string>("OriginCountryCode")
                        .HasMaxLength(64);

                    b.Property<string>("OriginCountryName")
                        .HasMaxLength(256);

                    b.Property<string>("OriginTerminal")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderSegmentId");

                    b.Property<int>("Stops");

                    b.Property<int>("TripIndicator");

                    b.Property<bool>("isLcc");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("tblFlightSearchSegment");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchSegmentStops", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<string>("AirportCode");

                    b.Property<string>("AirportName")
                        .HasMaxLength(256);

                    b.Property<string>("CityCode")
                        .HasMaxLength(64);

                    b.Property<string>("CityName")
                        .HasMaxLength(256);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(64);

                    b.Property<string>("CountryName")
                        .HasMaxLength(256);

                    b.Property<string>("FlightSearchSegmentId")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("FlightSearchSegmentId");

                    b.ToTable("tblFlightSearchSegmentStops");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchSegment_Caching", b =>
                {
                    b.Property<int>("SegmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AirlineType")
                        .HasMaxLength(30);

                    b.Property<DateTime>("ArrivalTime");

                    b.Property<string>("Code")
                        .HasMaxLength(32);

                    b.Property<DateTime>("DepartureTime");

                    b.Property<string>("DestinationAirportCode")
                        .HasMaxLength(32);

                    b.Property<string>("DestinationAirportName")
                        .HasMaxLength(256);

                    b.Property<string>("DestinationCityCode")
                        .HasMaxLength(64);

                    b.Property<string>("DestinationCityName")
                        .HasMaxLength(256);

                    b.Property<string>("DestinationCountryCode")
                        .HasMaxLength(64);

                    b.Property<string>("DestinationCountryName")
                        .HasMaxLength(256);

                    b.Property<string>("DestinationTerminal")
                        .HasMaxLength(64);

                    b.Property<int>("Duration");

                    b.Property<string>("FlightNumber")
                        .HasMaxLength(32);

                    b.Property<int>("Layover");

                    b.Property<int>("Mile");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("OperatingCarrier")
                        .HasMaxLength(128);

                    b.Property<string>("OriginAirportCode")
                        .HasMaxLength(32);

                    b.Property<string>("OriginAirportName")
                        .HasMaxLength(256);

                    b.Property<string>("OriginCityCode")
                        .HasMaxLength(64);

                    b.Property<string>("OriginCityName")
                        .HasMaxLength(256);

                    b.Property<string>("OriginCountryCode")
                        .HasMaxLength(64);

                    b.Property<string>("OriginCountryName")
                        .HasMaxLength(256);

                    b.Property<string>("OriginTerminal")
                        .HasMaxLength(64);

                    b.Property<int?>("SearchIndexId");

                    b.Property<int>("SegmentNumber");

                    b.Property<int>("TripIndicator");

                    b.Property<bool>("isLcc");

                    b.HasKey("SegmentId");

                    b.HasIndex("SearchIndexId");

                    b.ToTable("tblFlightSearchSegment_Caching");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSerivceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<DateTime>("EffectiveFromDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnabled");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.Property<int>("ServiceProvider");

                    b.HasKey("Id");

                    b.ToTable("tblFlightSerivceProvider");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSerivceProviderPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<DateTime>("EffectiveFromDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.Property<int>("ServiceProvider");

                    b.Property<int>("priority");

                    b.HasKey("Id");

                    b.ToTable("tblFlightSerivceProviderPriority");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FlightSearchSegmentId")
                        .HasMaxLength(128);

                    b.Property<double>("MarkupAmount");

                    b.Property<string>("PassengerDetailId")
                        .HasMaxLength(128);

                    b.Property<double>("ServiceChargeAmount");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(128);

                    b.Property<string>("ServiceDescription")
                        .HasMaxLength(256);

                    b.Property<string>("ServiceKey")
                        .HasMaxLength(128);

                    b.Property<int>("ServiceType");

                    b.Property<string>("tblFlightFareDetailFlightFareDetailId");

                    b.HasKey("Id");

                    b.HasIndex("FlightSearchSegmentId");

                    b.HasIndex("PassengerDetailId");

                    b.HasIndex("tblFlightFareDetailFlightFareDetailId");

                    b.ToTable("tblFlightServices");
                });

            modelBuilder.Entity("projContext.DB.tblCustomerOrganisation", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<int>("CustomerType");

                    b.Property<DateTime>("EffectiveFromDt");

                    b.Property<DateTime>("EffectiveToDt");

                    b.Property<string>("Email")
                        .HasMaxLength(128);

                    b.Property<bool>("IsActive");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.Property<string>("OrgLogo")
                        .HasMaxLength(128);

                    b.Property<string>("OrganisationCode")
                        .HasMaxLength(32);

                    b.Property<string>("OrganisationName")
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.HasKey("CustomerId");

                    b.ToTable("tblCustomerOrganisation");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlighBookingPassengerDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightBookingMaster", "tblFlightBookingMaster")
                        .WithMany()
                        .HasForeignKey("VisitorId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightBookingAlterDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightBookingAlterMaster", "tblFlightBookingAlterMaster")
                        .WithMany("tblFlightBookingAlterDetails")
                        .HasForeignKey("AlterId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightBookingSearchDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightBookingMaster", "tblFlightBookingMaster")
                        .WithMany()
                        .HasForeignKey("VisitorId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceAirline", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblAirline", "tblAirline")
                        .WithMany()
                        .HasForeignKey("AirlineId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConvenienceAirline")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceCustomerDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConvenienceCustomerDetails")
                        .HasForeignKey("ChargeId");

                    b.HasOne("projContext.DB.tblCustomerOrganisation", "tblCustomerMaster")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceCustomerType", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConvenienceCustomerType")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceFlightClass", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConvenienceFlightClass")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConveniencePassengerType", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConveniencePassengerType")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceSegment", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConvenienceSegment")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceServiceProvider", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConvenienceServiceProvider")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountAirline", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblAirline", "tblAirline")
                        .WithMany()
                        .HasForeignKey("AirlineId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountAirline")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountCustomerDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountCustomerDetails")
                        .HasForeignKey("ChargeId");

                    b.HasOne("projContext.DB.tblCustomerOrganisation", "tblCustomerMaster")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountCustomerType", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountCustomerType")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountFlightClass", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountFlightClass")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountPassengerType", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountPassengerType")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountSegment", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountSegment")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountServiceProvider", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountServiceProvider")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareConvenience", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightBookingSearchDetails", "tblFlightBookingSearchDetails")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany()
                        .HasForeignKey("ConvenienceId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDetail", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightBookingSearchDetails", "tblFlightBookingSearchDetails")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlighBookingPassengerDetails", "tblFlighBookingPassengerDetails")
                        .WithMany()
                        .HasForeignKey("PassengerDetailId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDetailConvenience", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany()
                        .HasForeignKey("ConvenienceId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightFareDetail", "tblFlightFareDetail")
                        .WithMany("tblFlightFareDetailConvenience")
                        .HasForeignKey("FareDetailId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDetailDiscount", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightFareDetail", "tblFlightFareDetail")
                        .WithMany("tblFlightFareDetailDiscount")
                        .HasForeignKey("FareDetailId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDetailMLMMarkup", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightFareDetail", "tblFlightFareDetail")
                        .WithMany("tblFlightFareDetailMLMMarkup")
                        .HasForeignKey("FareDetailId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany()
                        .HasForeignKey("MLMMarkupId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDetailMarkupDetail", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightFareDetail", "tblFlightFareDetail")
                        .WithMany("tblFlightFareDetailMarkupDetail")
                        .HasForeignKey("FareDetailId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany()
                        .HasForeignKey("MarkupId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDiscount", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightBookingSearchDetails", "tblFlightBookingSearchDetails")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany()
                        .HasForeignKey("DiscountId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareFilterDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightBookingAlterMaster", "tblFlightBookingAlterMaster")
                        .WithMany()
                        .HasForeignKey("FilterId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightFareFilter")
                        .WithMany("tblFlightFareFilterDetails")
                        .HasForeignKey("tblFlightFareFilterFilterId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareMLMMarkup", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightBookingSearchDetails", "tblFlightBookingSearchDetails")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany()
                        .HasForeignKey("MLMMarkupId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareMarkupDetail", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightBookingSearchDetails", "tblFlightBookingSearchDetails")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany()
                        .HasForeignKey("MarkupId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFare_Caching", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightFareDetail_Caching", "tblFlightFareDetail_Caching_Adult")
                        .WithMany()
                        .HasForeignKey("AdultPrice");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightFareDetail_Caching", "tblFlightFareDetail_Caching_Child")
                        .WithMany()
                        .HasForeignKey("ChildPrice");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightFareDetail_Caching", "tblFlightFareDetail_Caching_Infant")
                        .WithMany()
                        .HasForeignKey("InfantPrice");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightSearchResponses_Caching", "tblFlightSearchResponses_Caching")
                        .WithMany("tblFlightFare_Caching")
                        .HasForeignKey("SearchIndexId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupAirline", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblAirline", "tblAirline")
                        .WithMany()
                        .HasForeignKey("AirlineId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupAirline")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupCustomerDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupCustomerDetails")
                        .HasForeignKey("ChargeId");

                    b.HasOne("projContext.DB.tblCustomerOrganisation", "tblCustomerMaster")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupCustomerType", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupCustomerType")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupFlightClass", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupFlightClass")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupPassengerType", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupPassengerType")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupSegment", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupSegment")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupServiceProvider", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupServiceProvider")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightRefundStatusDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightBookingSearchDetails", "tblFlightBookingSearchDetails")
                        .WithMany()
                        .HasForeignKey("BookingId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchResponses_Caching", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightSearchRequest_Caching", "tblFlightSearchRequest_Caching")
                        .WithMany("tblFlightSearchResponses_Caching")
                        .HasForeignKey("ResponseId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchSegment", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightBookingSearchDetails", "tblFlightBookingSearchDetails")
                        .WithMany()
                        .HasForeignKey("BookingId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchSegmentStops", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightSearchSegment", "tblFlightSearchSegment")
                        .WithMany("tblFlightSearchSegmentStops")
                        .HasForeignKey("FlightSearchSegmentId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchSegment_Caching", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightSearchResponses_Caching", "tblFlightSearchResponses_Caching")
                        .WithMany("tblFlightSearchSegment_Caching")
                        .HasForeignKey("SearchIndexId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightServices", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightSearchSegment", "tblFlightSearchSegment")
                        .WithMany()
                        .HasForeignKey("FlightSearchSegmentId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlighBookingPassengerDetails", "tblFlighBookingPassengerDetails")
                        .WithMany()
                        .HasForeignKey("PassengerDetailId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightFareDetail")
                        .WithMany("tblFlightServices")
                        .HasForeignKey("tblFlightFareDetailFlightFareDetailId");
                });
#pragma warning restore 612, 618
        }
    }
}
