// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projContext.DB.CRM.Travel;

namespace projContext.Migrations.Travel
{
    [DbContext(typeof(TravelContext))]
    [Migration("20211026184529_26_oct1")]
    partial class _26_oct1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblAirline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<bool>("isLcc");

                    b.HasKey("Id");

                    b.ToTable("tblAirline");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblAirport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AirportCode")
                        .HasMaxLength(200);

                    b.Property<string>("AirportName")
                        .HasMaxLength(200);

                    b.Property<string>("CityCode")
                        .HasMaxLength(200);

                    b.Property<string>("CityName")
                        .HasMaxLength(200);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(200);

                    b.Property<string>("CountryName")
                        .HasMaxLength(200);

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDomestic");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.Property<string>("Terminal")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("tblAirport");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlighBookingPassengerDetails", b =>
                {
                    b.Property<int>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingId");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64);

                    b.Property<string>("LastName")
                        .HasMaxLength(64);

                    b.Property<int>("PassengerType");

                    b.Property<DateTime?>("PassportExpiryDate");

                    b.Property<DateTime?>("PassportIssueDate");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(64);

                    b.Property<string>("Title")
                        .HasMaxLength(16);

                    b.HasKey("Sno");

                    b.ToTable("tblFlighBookingPassengerDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlighRefundPassengerDetails", b =>
                {
                    b.Property<int>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64);

                    b.Property<string>("LastName")
                        .HasMaxLength(64);

                    b.Property<int>("PassengerType");

                    b.Property<DateTime?>("PassportExpiryDate");

                    b.Property<DateTime?>("PassportIssueDate");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(64);

                    b.Property<string>("RefundId");

                    b.Property<string>("Title")
                        .HasMaxLength(16);

                    b.HasKey("Sno");

                    b.ToTable("tblFlighRefundPassengerDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightBookingMaster", b =>
                {
                    b.Property<string>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<double>("BookingAmount");

                    b.Property<DateTime>("BookingDate");

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("EmailNo")
                        .HasMaxLength(128);

                    b.Property<double>("GatewayCharge");

                    b.Property<int>("GatewayId");

                    b.Property<ulong?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDt");

                    b.Property<string>("ModifyRemarks")
                        .HasMaxLength(128);

                    b.Property<double>("NetAmount");

                    b.Property<int>("OrgId");

                    b.Property<int>("PaymentMode");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(64);

                    b.Property<int>("UserId");

                    b.HasKey("VisitorId");

                    b.ToTable("tblFlightBookingMaster");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightClassOfBooking", b =>
                {
                    b.Property<int>("BookingClassId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GenerlizedName")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.HasKey("BookingClassId");

                    b.ToTable("tblFlightClassOfBooking");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int>("Applicability");

                    b.Property<string>("ApprovalRemarks")
                        .HasMaxLength(128);

                    b.Property<byte>("ApprovalStatus");

                    b.Property<ulong?>("ApprovedBy");

                    b.Property<DateTime?>("ApprovedDt");

                    b.Property<DateTime>("BookingFromDt");

                    b.Property<DateTime>("BookingToDt");

                    b.Property<int>("DayCount");

                    b.Property<DateTime>("EffectiveFromDt");

                    b.Property<DateTime>("EffectiveToDt");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsAllAirline");

                    b.Property<bool>("IsAllCustomer");

                    b.Property<bool>("IsAllCustomerType");

                    b.Property<bool>("IsAllFlightClass");

                    b.Property<bool>("IsAllPessengerType");

                    b.Property<bool>("IsAllProvider");

                    b.Property<bool>("IsDeleted");

                    b.Property<ulong>("RequestedBy");

                    b.Property<DateTime?>("RequestedDt");

                    b.Property<string>("RequestedRemarks")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("tblFlightConvenience");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceAirline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AirlineId");

                    b.Property<int?>("ChargeId");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightConvenienceAirline");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceCustomerDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightConvenienceCustomerDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceCustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("customerType");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightConvenienceCustomerType");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceFlightClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CabinClass");

                    b.Property<int?>("ChargeId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightConvenienceFlightClass");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConveniencePassengerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("PassengerType");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightConveniencePassengerType");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("ServiceProvider");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightConvenienceServiceProvider");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int>("Applicability");

                    b.Property<string>("ApprovalRemarks")
                        .HasMaxLength(128);

                    b.Property<byte>("ApprovalStatus");

                    b.Property<ulong?>("ApprovedBy");

                    b.Property<DateTime?>("ApprovedDt");

                    b.Property<DateTime>("BookingFromDt");

                    b.Property<DateTime>("BookingToDt");

                    b.Property<int>("DayCount");

                    b.Property<DateTime>("EffectiveFromDt");

                    b.Property<DateTime>("EffectiveToDt");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsAllAirline");

                    b.Property<bool>("IsAllCustomer");

                    b.Property<bool>("IsAllCustomerType");

                    b.Property<bool>("IsAllFlightClass");

                    b.Property<bool>("IsAllPessengerType");

                    b.Property<bool>("IsAllProvider");

                    b.Property<bool>("IsDeleted");

                    b.Property<ulong>("RequestedBy");

                    b.Property<DateTime?>("RequestedDt");

                    b.Property<string>("RequestedRemarks")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("tblFlightDiscount");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountAirline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AirlineId");

                    b.Property<int?>("ChargeId");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightDiscountAirline");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountCustomerDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightDiscountCustomerDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountCustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("customerType");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightDiscountCustomerType");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountFlightClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CabinClass");

                    b.Property<int?>("ChargeId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightDiscountFlightClass");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountPassengerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("PassengerType");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightDiscountPassengerType");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("ServiceProvider");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightDiscountServiceProvider");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFareDetail_Caching", b =>
                {
                    b.Property<int>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BaseFare");

                    b.Property<string>("CabinBaggage");

                    b.Property<string>("CheckingBaggage");

                    b.Property<double>("Discount");

                    b.Property<bool>("IsFreeMeal");

                    b.Property<byte>("IsRefundable");

                    b.Property<double>("NetFare");

                    b.Property<double>("Tax");

                    b.Property<double>("TotalFare");

                    b.Property<double>("WingMarkup");

                    b.Property<double>("YQTax");

                    b.HasKey("Sno");

                    b.ToTable("tblFlightFareDetail_Caching");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFare_Caching", b =>
                {
                    b.Property<int>("FareId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdultPrice");

                    b.Property<double>("BaseFare");

                    b.Property<int>("CabinClass");

                    b.Property<int?>("ChildPrice");

                    b.Property<string>("ClassOfBooking");

                    b.Property<double>("Convenience");

                    b.Property<double>("CustomerMarkup");

                    b.Property<double>("Discount");

                    b.Property<string>("Identifier")
                        .HasMaxLength(64);

                    b.Property<int?>("InfantPrice");

                    b.Property<double>("NetFare");

                    b.Property<double>("PromoCode");

                    b.Property<double>("PromoDiscount");

                    b.Property<string>("ProviderFareDetailId")
                        .HasMaxLength(256);

                    b.Property<int?>("SearchIndexId");

                    b.Property<int>("SeatRemaning");

                    b.Property<double>("TotalFare");

                    b.Property<double>("WingMarkup");

                    b.HasKey("FareId");

                    b.HasIndex("AdultPrice");

                    b.HasIndex("ChildPrice");

                    b.HasIndex("InfantPrice");

                    b.HasIndex("SearchIndexId");

                    b.ToTable("tblFlightFare_Caching");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupAirline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AirlineId");

                    b.Property<int?>("ChargeId");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightMarkupAirline");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupCustomerDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightMarkupCustomerDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupCustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("customerType");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightMarkupCustomerType");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupFlightClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CabinClass");

                    b.Property<int?>("ChargeId");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightMarkupFlightClass");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int>("Applicability");

                    b.Property<string>("ApprovalRemarks")
                        .HasMaxLength(128);

                    b.Property<byte>("ApprovalStatus");

                    b.Property<ulong?>("ApprovedBy");

                    b.Property<DateTime?>("ApprovedDt");

                    b.Property<DateTime>("BookingFromDt");

                    b.Property<DateTime>("BookingToDt");

                    b.Property<int>("DayCount");

                    b.Property<DateTime>("EffectiveFromDt");

                    b.Property<DateTime>("EffectiveToDt");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsAllAirline");

                    b.Property<bool>("IsAllCustomer");

                    b.Property<bool>("IsAllCustomerType");

                    b.Property<bool>("IsAllFlightClass");

                    b.Property<bool>("IsAllPessengerType");

                    b.Property<bool>("IsAllProvider");

                    b.Property<bool>("IsDeleted");

                    b.Property<ulong>("RequestedBy");

                    b.Property<DateTime?>("RequestedDt");

                    b.Property<string>("RequestedRemarks")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("tblFlightMarkupMaster");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupPassengerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("PassengerType");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightMarkupPassengerType");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChargeId");

                    b.Property<int>("ServiceProvider");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.ToTable("tblFlightMarkupServiceProvider");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightPurchaseDetails", b =>
                {
                    b.Property<int>("Sno")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingId")
                        .HasMaxLength(128);

                    b.Property<double>("ConvenienceAmount");

                    b.Property<double>("CustomerMarkupAmount");

                    b.Property<double>("DiscountAmount");

                    b.Property<double>("IncentiveAmount");

                    b.Property<double>("MarkupAmount");

                    b.Property<double>("NetSaleAmount");

                    b.Property<double>("PurchaseAmount");

                    b.Property<double>("SaleAmount");

                    b.Property<int>("SearviceType");

                    b.Property<string>("ServiceDetail");

                    b.HasKey("Sno");

                    b.ToTable("tblFlightPurchaseDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightRefundStatusDetails", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<int?>("BookingId");

                    b.Property<ulong>("CreatedBy");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("ProviderBookingId");

                    b.Property<double>("RefundAmount");

                    b.Property<int>("RefundStatus");

                    b.Property<string>("Remarks")
                        .HasMaxLength(25);

                    b.Property<int>("ServiceProvider");

                    b.HasKey("RefundId");

                    b.HasIndex("BookingId");

                    b.ToTable("tblFlightRefundStatusDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchRequest_Caching", b =>
                {
                    b.Property<string>("CachingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<int>("AdultCount");

                    b.Property<int>("ChildCount");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<string>("Destination")
                        .HasMaxLength(24);

                    b.Property<DateTime>("ExpiredDt");

                    b.Property<int>("FlightCabinClass");

                    b.Property<int>("InfantCount");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("JourneyType");

                    b.Property<double>("MinmumPrice");

                    b.Property<string>("Origin")
                        .HasMaxLength(24);

                    b.Property<string>("ProviderTraceId")
                        .HasMaxLength(64);

                    b.Property<int>("ServiceProvider");

                    b.Property<DateTime>("TravelDt");

                    b.HasKey("CachingId");

                    b.ToTable("tblFlightSearchRequest_Caching");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchResponses_Caching", b =>
                {
                    b.Property<int>("IndexId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ResponseId")
                        .HasMaxLength(64);

                    b.HasKey("IndexId");

                    b.HasIndex("ResponseId");

                    b.ToTable("tblFlightSearchResponses_Caching");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchSegment_Caching", b =>
                {
                    b.Property<int>("SegmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AirlineType")
                        .HasMaxLength(30);

                    b.Property<DateTime>("ArrivalTime");

                    b.Property<string>("Code")
                        .HasMaxLength(32);

                    b.Property<DateTime>("DepartureTime");

                    b.Property<string>("DestinationAirportCode")
                        .HasMaxLength(32);

                    b.Property<string>("DestinationAirportName")
                        .HasMaxLength(256);

                    b.Property<string>("DestinationCityCode")
                        .HasMaxLength(64);

                    b.Property<string>("DestinationCityName")
                        .HasMaxLength(256);

                    b.Property<string>("DestinationCountryCode")
                        .HasMaxLength(64);

                    b.Property<string>("DestinationCountryName")
                        .HasMaxLength(256);

                    b.Property<string>("DestinationTerminal")
                        .HasMaxLength(64);

                    b.Property<int>("Duration");

                    b.Property<string>("FlightNumber")
                        .HasMaxLength(32);

                    b.Property<int>("Layover");

                    b.Property<int>("Mile");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("OperatingCarrier")
                        .HasMaxLength(128);

                    b.Property<string>("OriginAirportCode")
                        .HasMaxLength(32);

                    b.Property<string>("OriginAirportName")
                        .HasMaxLength(256);

                    b.Property<string>("OriginCityCode")
                        .HasMaxLength(64);

                    b.Property<string>("OriginCityName")
                        .HasMaxLength(256);

                    b.Property<string>("OriginCountryCode")
                        .HasMaxLength(64);

                    b.Property<string>("OriginCountryName")
                        .HasMaxLength(256);

                    b.Property<string>("OriginTerminal")
                        .HasMaxLength(64);

                    b.Property<int?>("SearchIndexId");

                    b.Property<int>("SegmentNumber");

                    b.Property<int>("TripIndicator");

                    b.Property<bool>("isLcc");

                    b.HasKey("SegmentId");

                    b.HasIndex("SearchIndexId");

                    b.ToTable("tblFlightSearchSegment_Caching");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlilghtBookingSearchDetails", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookingStatus");

                    b.Property<bool>("CachingId");

                    b.Property<double>("ConvenienceAmount");

                    b.Property<double>("CustomerMarkupAmount");

                    b.Property<double>("DiscountAmount");

                    b.Property<double>("IncentiveAmount");

                    b.Property<bool>("IncludeBaggageServices");

                    b.Property<bool>("IncludeMealServices");

                    b.Property<bool>("IncludeSeatServices");

                    b.Property<int>("JourneyType");

                    b.Property<double>("MarkupAmount");

                    b.Property<double>("NetSaleAmount");

                    b.Property<string>("ProviderBookingId")
                        .HasMaxLength(128);

                    b.Property<double>("PurchaseAmount");

                    b.Property<string>("Remarks")
                        .HasMaxLength(25);

                    b.Property<double>("SaleAmount");

                    b.Property<int>("SearchCachingId");

                    b.Property<int>("ServiceProvider");

                    b.Property<string>("VisitorId");

                    b.HasKey("BookingId");

                    b.HasIndex("VisitorId");

                    b.ToTable("tblFlilghtBookingSearchDetails");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceAirline", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblAirline", "tblAirline")
                        .WithMany()
                        .HasForeignKey("AirlineId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConvenienceAirline")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceCustomerDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConvenienceCustomerDetails")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceCustomerType", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConvenienceCustomerType")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceFlightClass", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConvenienceFlightClass")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConveniencePassengerType", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConveniencePassengerType")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightConvenienceServiceProvider", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightConvenience", "tblFlightConvenience")
                        .WithMany("tblFlightConvenienceServiceProvider")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountAirline", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblAirline", "tblAirline")
                        .WithMany()
                        .HasForeignKey("AirlineId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountAirline")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountCustomerDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountCustomerDetails")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountCustomerType", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountCustomerType")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountFlightClass", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountFlightClass")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountPassengerType", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountPassengerType")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightDiscountServiceProvider", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightDiscount", "tblFlightDiscount")
                        .WithMany("tblFlightDiscountServiceProvider")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightFare_Caching", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightFareDetail_Caching", "tblFlightFareDetail_Caching_Adult")
                        .WithMany()
                        .HasForeignKey("AdultPrice");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightFareDetail_Caching", "tblFlightFareDetail_Caching_Child")
                        .WithMany()
                        .HasForeignKey("ChildPrice");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightFareDetail_Caching", "tblFlightFareDetail_Caching_Infant")
                        .WithMany()
                        .HasForeignKey("InfantPrice");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightSearchResponses_Caching", "tblFlightSearchResponses_Caching")
                        .WithMany("tblFlightFare_Caching")
                        .HasForeignKey("SearchIndexId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupAirline", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblAirline", "tblAirline")
                        .WithMany()
                        .HasForeignKey("AirlineId");

                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupAirline")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupCustomerDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupCustomerDetails")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupCustomerType", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupCustomerType")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupFlightClass", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupFlightClass")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupPassengerType", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupPassengerType")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightMarkupServiceProvider", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightMarkupMaster", "tblFlightMarkupMaster")
                        .WithMany("tblFlightMarkupServiceProvider")
                        .HasForeignKey("ChargeId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightRefundStatusDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlilghtBookingSearchDetails", "tblFlilghtBookingSearchDetails")
                        .WithMany()
                        .HasForeignKey("BookingId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchResponses_Caching", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightSearchRequest_Caching", "tblFlightSearchRequest_Caching")
                        .WithMany("tblFlightSearchResponses_Caching")
                        .HasForeignKey("ResponseId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlightSearchSegment_Caching", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightSearchResponses_Caching", "tblFlightSearchResponses_Caching")
                        .WithMany("tblFlightSearchSegment_Caching")
                        .HasForeignKey("SearchIndexId");
                });

            modelBuilder.Entity("projContext.DB.CRM.Travel.tblFlilghtBookingSearchDetails", b =>
                {
                    b.HasOne("projContext.DB.CRM.Travel.tblFlightBookingMaster", "tblFlightBookingMaster")
                        .WithMany()
                        .HasForeignKey("VisitorId");
                });
#pragma warning restore 612, 618
        }
    }
}
